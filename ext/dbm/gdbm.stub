;;
;; gdbm.stub - gdbm interface
;;
;;  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: gdbm.stub,v 1.11 2002-02-10 05:40:05 shirok Exp $
;;

"
 #include <gdbm.h>
 #include <stdlib.h>
 #include \"dbmconfig.h\"
 #include <gauche/extend.h>

 SCM_CLASS_DECL(Scm_GdbmClass);
 static void gdbm_print(ScmObj, ScmPort *, ScmWriteContext*);
 SCM_DEFINE_BUILTIN_CLASS_SIMPLE(Scm_GdbmClass, gdbm_print);

 #define SCM_CLASS_GDBM       (&Scm_GdbmClass)
 #define SCM_GDBM(obj)        ((ScmGdbm*)obj)
 #define SCM_GDBM_P(obj)      SCM_XTYPEP(obj, SCM_CLASS_GDBM)

 typedef struct ScmGdbmRec {
    SCM_HEADER;
    ScmObj name;
    GDBM_FILE dbf;              /* NULL if closed */
 } ScmGdbm;

 static void gdbm_print(ScmObj obj, ScmPort *out, ScmWriteContext *ctx)
 {
    Scm_Printf(out, \"#<gdbm-file %S>\", SCM_GDBM(obj)->name);
 }

 #define TO_DATUM(datum_, scm_)                     \\
   do {                                             \\
     datum_.dptr = (char*)Scm_GetStringConst(scm_); \\
     datum_.dsize = SCM_STRING_SIZE(scm_);          \\
   } while (0)
 #define FROM_DATUM(scm_, datum_)           \\
   do {                                     \\
     if (datum_.dptr) {                     \\
       scm_ = Scm_MakeString(datum_.dptr, datum_.dsize, -1, SCM_MAKSTR_COPYING); \\
       free(datum_.dptr);                   \\
     } else {                               \\
       scm_ = SCM_FALSE;                    \\
     }                                      \\
   } while (0)

 #define CHECK_GDBM(g)    if (!g->dbf) Scm_Error(\"gdbm file already closed: %S\", g)

 /* Those symbols may not be defined in the older gdbm */
 #ifndef GDBM_SYNC
 #define GDBM_SYNC 0
 #endif
 #ifndef GDBM_NOLOCK
 #define GDBM_NOLOCK 0
 #endif
 #ifndef GDBM_SYNCMODE
 #define GDBM_SYNCMODE 0
 #endif
 #ifndef GDBM_CENTFREE
 #define GDBM_CENTFREE 0
 #endif
 #ifndef GDBM_COALESCEBLKS
 #define GDBM_COALESCEBLKS 0
 #endif

 /* Hack for initialization stub */
 void internal_init(ScmModule*);

 void Scm_Init_gdbm(void)
 {
    ScmModule *mod;
    SCM_INIT_EXTENSION(gdbm);
    mod = SCM_MODULE(SCM_FIND_MODULE(\"dbm.gdbm\", TRUE));
    Scm_InitBuiltinClass(&Scm_GdbmClass, \"<gdbm-file>\", NULL, sizeof(ScmGdbm), mod);
    internal_init(mod);
 }
 #define Scm_Init_gdbm  internal_init
"

(define-type "gdbm" gdbm? "ScmGdbm*" "SCM_GDBM_P" "SCM_GDBM")

;; finalization
"static void gdbm_finalize(GC_PTR obj, GC_PTR data)
 {
    ScmGdbm *g = SCM_GDBM(obj);
    if (g->dbf) { gdbm_close(g->dbf); g->dbf = NULL; }
 }
"


(define-cproc gdbm-open (name &optional
                              (size 0)
                              (rwmode (c "SCM_MAKE_INT(GDBM_READER)"))
                              (fmode (c "SCM_MAKE_INT(0666)")))
  (assert (string? name))
  (assert (small-integer? size))
  (assert (small-integer? rwmode))
  (assert (small-integer? fmode))
  "GC_finalization_proc ofn; GC_PTR ocd;
  ScmGdbm *z = SCM_NEW(ScmGdbm);
  SCM_SET_CLASS(z, SCM_CLASS_GDBM);
  GC_REGISTER_FINALIZER(z, gdbm_finalize, NULL, &ofn, &ocd);
  z->name = SCM_OBJ(name);
  z->dbf = gdbm_open(Scm_GetString(name), size, rwmode, fmode, NULL);
  if (z->dbf == NULL) Scm_SysError(\"couldn't open gdbm file %S\", name);
  SCM_RETURN(SCM_OBJ(z));")

(define-cproc gdbm-close (gdbm)
  (assert (gdbm? gdbm))
  "CHECK_GDBM(gdbm);
  if (gdbm->dbf) {
    gdbm_close(gdbm->dbf);
    gdbm->dbf = NULL;
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc gdbm-closed? (gdbm)
  (assert (gdbm? gdbm))
  "SCM_RETURN(SCM_MAKE_BOOL(gdbm->dbf == NULL));")

(define-cproc gdbm-store (gdbm key val &optional (flags 0))
  (assert (gdbm? gdbm))
  (assert (string? key))
  (assert (string? val))
  (assert (small-integer? flags))
  "datum dkey, dval; int r;
  CHECK_GDBM(gdbm);
  TO_DATUM(dkey, key);
  TO_DATUM(dval, val);
  r = gdbm_store(gdbm->dbf, dkey, dval, flags);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc gdbm-fetch (gdbm key)
  (assert (gdbm? gdbm))
  (assert (string? key))
  "datum dkey, dval; ScmObj r;
  CHECK_GDBM(gdbm);
  TO_DATUM(dkey, key);
  dval = gdbm_fetch(gdbm->dbf, dkey);
  FROM_DATUM(r, dval);
  SCM_RETURN(r);")

(define-cproc gdbm-delete (gdbm key)
  (assert (gdbm? gdbm))
  (assert (string? key))
  "datum dkey; int r;
  CHECK_GDBM(gdbm);
  TO_DATUM(dkey, key);
  r = gdbm_delete(gdbm->dbf, dkey);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc gdbm-firstkey (gdbm)
  (assert (gdbm? gdbm))
  "datum dkey = gdbm_firstkey(gdbm->dbf); ScmObj r;
  FROM_DATUM(r, dkey);
  SCM_RETURN(r);")

(define-cproc gdbm-nextkey (gdbm key)
  (assert (gdbm? gdbm))
  (assert (string? key))
  "datum dkey, dnkey; ScmObj r;
  CHECK_GDBM(gdbm);
  TO_DATUM(dkey, key);
  dnkey = gdbm_nextkey(gdbm->dbf, dkey);
  FROM_DATUM(r, dnkey);
  SCM_RETURN(r);")

(define-cproc gdbm-reorganize (gdbm)
  (assert (gdbm? gdbm))
  "int r;
  CHECK_GDBM(gdbm);
  r = gdbm_reorganize(gdbm->dbf);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc gdbm-sync (gdbm)
  (assert (gdbm? gdbm))
  "CHECK_GDBM(gdbm);
  gdbm_sync(gdbm->dbf);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc gdbm-exists? (gdbm key)
  (assert (gdbm? gdbm))
  (assert (string? key))
  "datum dkey; int r;
  CHECK_GDBM(gdbm);
  TO_DATUM(dkey, key);
  r = gdbm_exists(gdbm->dbf, dkey);
  SCM_RETURN(SCM_MAKE_BOOL(r));")

(define-cproc gdbm-strerror (errno)
  (assert (small-integer? errno))
  "SCM_RETURN(SCM_MAKE_STR_IMMUTABLE(gdbm_strerror(errno)));")

(define-cproc gdbm-setopt (gdbm option val)
  (assert (gdbm? gdbm))
  (assert (small-integer? option))
  "int ival, r;
  CHECK_GDBM(gdbm);
  if (SCM_EXACTP(val)) ival = Scm_GetUInteger(val);
  else ival = !SCM_FALSEP(val);
  r = gdbm_setopt(gdbm->dbf, option, &ival, sizeof(int));
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc gdbm-version ()
  "SCM_RETURN(SCM_MAKE_STR_IMMUTABLE(gdbm_version));")

(define-cproc gdbm-errno ()
  "int r = gdbm_errno;
  gdbm_errno = 0;
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-symbol |GDBM_READER| "sym_GDBM_READER" "Scm_MakeInteger(GDBM_READER)")
(define-symbol |GDBM_WRITER| "sym_GDBM_WRITER" "Scm_MakeInteger(GDBM_WRITER)")
(define-symbol |GDBM_WRCREAT| "sym_GDBM_WRCREAT" "Scm_MakeInteger(GDBM_WRCREAT)")
(define-symbol |GDBM_NEWDB| "sym_GDBM_NEWDB" "Scm_MakeInteger(GDBM_NEWDB)")
(define-symbol |GDBM_FAST| "sym_GDBM_FAST" "Scm_MakeInteger(GDBM_FAST)")
(define-symbol |GDBM_SYNC| "sym_GDBM_SYNC" "Scm_MakeInteger(GDBM_SYNC)")
(define-symbol |GDBM_NOLOCK| "sym_GDBM_NOLOCK" "Scm_MakeInteger(GDBM_NOLOCK)")
(define-symbol |GDBM_INSERT| "sym_GDBM_INSERT" "Scm_MakeInteger(GDBM_INSERT)")
(define-symbol |GDBM_REPLACE| "sym_GDBM_REPLACE" "Scm_MakeInteger(GDBM_REPLACE)")
(define-symbol |GDBM_CACHESIZE| "sym_GDBM_CACHESIZE" "Scm_MakeInteger(GDBM_CACHESIZE)")
(define-symbol |GDBM_FASTMODE| "sym_GDBM_FASTMODE" "Scm_MakeInteger(GDBM_FASTMODE)")
(define-symbol |GDBM_SYNCMODE| "sym_GDBM_SYNCMODE" "Scm_MakeInteger(GDBM_SYNCMODE)")
(define-symbol |GDBM_CENTFREE| "sym_GDBM_CENTFREE" "Scm_MakeInteger(GDBM_CENTFREE)")
(define-symbol |GDBM_COALESCEBLKS| "sym_GDBM_COALESCEBLKS" "Scm_MakeInteger(GDBM_COALESCEBLKS)")

;; Local variables:
;; mode: scheme
;; end:

