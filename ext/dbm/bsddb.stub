;;
;; bsddb.stub - BSD DB interface
;;
;;  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: bsddb.stub,v 1.1 2001-11-17 23:04:36 shirok Exp $
;;

"
 #include \"bsddb.h\"

 static void bsddb_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx);
 {
     char *type;
     switch (SCM_BSD_DB_TYPE(obj)) {
     case DB_BTREE: type = \"btree\"; break;
     case DB_HASH:  type = \"hash\"; break;
     case DB_RECNO: type = \"recno\"; break;
     default: type = \"unknown\"; break;
     }
     Scm_Printf(port, \"#<bsd-%s \\\"%s\\\">\", type, SCM_BSD_DB(obj)->file);
 }

 SCM_DEFINE_BUILTIN_CLASS_SIMPLE(Scm_BsdDbClass, bsddb_print, NULL);

 #define TO_DBT(dbt_, scm_)             \\
   do {                                 \\
     dbt_.data = Scm_GetString(scm_);   \\
     dbt_.size = SCM_STRING_SIZE(scm_); \\
   } while (0)
 #define FROM_DBT(scm_, dbt_)           \\
   do {                                 \\
     if (dbt_.data) {                   \\
       scm_ = Scm_MakeString(dbt_.data, dbt_.size, -1, SCM_MAKSTR_COPYING); \\
     } else {                           \\
       scm_ = SCM_FALSE;                \\
     }                                  \\
   } while (0)
 #define CHECK_DB(b)   if (!b->db) Scm_Error(\"bsd db already closed: %S\", b)
"

(define-type "bsd-db" bsd-db? "ScmBsdDb*" "SCM_BSD_DB_P" "SCM_BSD_DB")

(define-cproc bsd-db-open (file rwflags mode type
                                &keyword (flags 0) (cache-size 0)
                                (max-key-page 0) (min-key-page 0)
                                (page-size 0)  (compare #f) (prefix #f)
                                (byte-order #f)
                                (bucket-size 0) (ffactor 0) (num-elements 0)
                                (hash #f) (record-length 0) (bval #f)
                                (btree-file-name 0))
  "")

(define-cproc bsd-db-close (db)
  (assert (bsd-db? d))
  "CHECK_DB(d);
   if (d->db->close(d->db) == -1) Scm_SysError(\"closing %S\", d);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc bsd-db-delete! (db key &optional (flags 0))
  (assert (bsd-db? db))
  (assert (string? key))
  (assert (small-integer? flags))
  "DBT dkey;
  CHECK_DB(d);
  TO_DBT(dkey, key);
  if (d->db->del(d->db, &dkey, flags) == -1)
    Scm_SysError(\"deleteing key %S from %S\", key, d);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc bsd-db-fd (db)
  (assert (bsd-db? db))
  "CHECK_DB(d);
  SCM_RETURN(SCM_MAKE_INT(d->db->fd(d->db)));")

(define-cproc bsd-db-get (db key &optional (flags 0))
  (assert (bsd-db? db))
  (assert (string? key))
  (assert (small-integer? flags))
  "DBT dkey, ddata; ScmObj data;
  CHECK_DB(d);
  TO_DBT(dkey, key);
  if (d->db->get(d->db, &dkey, &ddata, flags) == -1)
    Scm_SysError(\"getting key %S from %S\", key, d);
  FROM_DBT(data, ddata);
  SCM_RETURN(data);")


;; Local variables:
;; mode: scheme
;; end:
