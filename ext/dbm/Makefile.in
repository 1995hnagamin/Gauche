.SUFFIXES: .stub .c

CC = @CC@
OPTFLAGS = @OPTFLAGS@
CFLAGS = @DEFS@ @CFLAGS@ $(OPTFLAGS)
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
GOSH = @GOSH@
GAUCHE_CONFIG = @GAUCHE_CONFIG@
GAUCHE_TOP = @GAUCHE_TOP@
INSTALL = @INSTALL@

ARCHFILES = @ARCHFILES@
SCMFILES = @SCMFILES@
HEADERS = 

TARGET = @ARCHFILES@
CONFIG_GENERATED = Makefile config.cache config.log config.status dbmconfig.h \
		   gdbm_head.c gdbm_tail.c ndbm_head.c ndbm_tail.c \
                   odbm_head.c odbm_tail.c bsddb_head.c bsddb_tail.c \
                   autom4te*.cache 
GENERATED = gdbm.c ndbm.c odbm.c bsddb.c

GDBM_OBJS = gdbm_head.o gdbm.o gdbm_tail.o
NDBM_OBJS = ndbm_head.o ndbm.o ndbm_tail.o
ODBM_OBJS = odbm_head.o odbm.o odbm_tail.o
BSDDB_OBJS = bsddb_head.o bsddb.o bsddb_tail.o

INSTALL_TYPE = @INSTALL_TYPE@
HEADER_INSTALL_DIR  = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)incdir`
SCM_INSTALL_DIR     = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)libdir`
ARCH_INSTALL_DIR    = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)archdir`

all : $(TARGET)

.stub.c :
	$(GOSH) genstub $<

gdbm.so : $(GDBM_OBJS)
	$(CC) $(LDFLAGS) gdbm.so $(GDBM_OBJS) @GDBMLIB@ $(LIBS)

ndbm.so : $(NDBM_OBJS)
	$(CC) $(LDFLAGS) ndbm.so $(NDBM_OBJS) @NDBMLIB@ $(LIBS)

odbm.so : $(ODBM_OBJS)
	$(CC) $(LDFLAGS) odbm.so $(ODBM_OBJS) @ODBMLIB@ $(LIBS)

#bsddb.so : $(BSDDB_OBJS)
#	$(CC) $(LDFLAGS) bsddb.so $(BSDDB_OBJS) @BSDDBLIB@ $(LIBS)

test : all
	@rm -f test.log
	$(GOSH) -I. test.scm > test.log

install : all
	@for f in $(HEADERS) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(HEADER_INSTALL_DIR); \
	  fi; \
	done
	@$(INSTALL) -m 444 dbm.scm $(SCM_INSTALL_DIR)
	@$(INSTALL) -d $(SCM_INSTALL_DIR)/dbm
	@for f in $(SCMFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(SCM_INSTALL_DIR)/dbm/; \
	  fi; \
	done
	@for f in $(ARCHFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 555 $$f $(ARCH_INSTALL_DIR); \
	  fi; \
	done

clean :
	rm -rf core $(TARGET) $(GENERATED) *.o *~ test.log so_locations

distclean : clean
	rm -rf $(CONFIG_GENERATED)

realclean : clean
	rm -rf $(CONFIG_GENERATED) configure

# 'link' creates symlinks from source tree to extension modules, so that
# it can be tested within the source tree.  'unlink' removes them.
# these are only for developer's.

link : $(TARGET) $(SCMFILES)
	if test ! -d $(GAUCHE_TOP)/lib/dbm; then mkdir $(GAUCHE_TOP)/lib/dbm; fi
	$(GOSH) ../xlink -d dbm -l $(TARGET) $(SCMFILES)

unlink :
	-$(GOSH) ../xlink -d dbm -u $(TARGET) $(SCMFILES)
	rm -rf $(GAUCHE_TOP)/lib/dbm
