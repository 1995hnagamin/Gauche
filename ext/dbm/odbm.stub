;;;
;;; odbm.stub - original dbm interface
;;;  
;;;   Copyright (c) 2000-2003 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: odbm.stub,v 1.12 2003-07-20 10:07:10 shirok Exp $
;;;

"
 #include <gauche/extend.h>
 #include \"dbmconf.h\"

 #if HAVE_DBM_H
 #include <dbm.h>
 #elif HAVE_GDBM_DBM_H
 #include <gdbm/dbm.h>
 #endif

 #define CHECK_ODBM() if (!odbm_opened) Scm_Error(\"odbm file already closed\")

 /* Hack for initialization stub */
 static void Scm_odbm_internal_init(ScmModule*);
 void Scm_Init_odbm(void)
 {
    SCM_INIT_EXTENSION(odbm);
    Scm_odbm_internal_init(SCM_MODULE(SCM_FIND_MODULE(\"dbm.odbm\", TRUE)));
 }
 #define Scm_Init_odbm  Scm_odbm_internal_init

 #define TO_DATUM(datum_, scm_)                    \\
   do {                                            \\
     datum_.dptr = (char*)Scm_GetStringConst(scm_);\\
     datum_.dsize = SCM_STRING_SIZE(scm_);         \\
   } while (0)
 #define FROM_DATUM(scm_, datum_)           \\
   do {                                     \\
     if (datum_.dptr) {                     \\
       scm_ = Scm_MakeString(datum_.dptr, datum_.dsize, -1, SCM_MAKSTR_COPYING); \\
     } else {                               \\
       scm_ = SCM_FALSE;                    \\
     }                                      \\
   } while (0)
"

;; Original dbm allows to open only one file at a time.
;; The static variable odbm_opened tracks the status.
;; TODO: MT SAFENESS

"static int odbm_opened = FALSE;"

(define-cproc odbm-init (name::<string>)
  "int r;
  if (odbm_opened) Scm_Error(\"dbm file is already opened.\");
  r = dbminit(Scm_GetString(name));
  if (r < 0) {
    Scm_SysError(\"couldn't open dbm database %S\", name);
  }
  odbm_opened = TRUE;
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc odbm-close ()
  "if (odbm_opened) {
      dbmclose();
      odbm_opened = FALSE;
   }
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc odbm-closed? ()
  "SCM_RETURN(SCM_MAKE_BOOL(!odbm_opened));")

(define-cproc odbm-store (key::<string> val::<string>)
  "datum dkey, dval; int r;
   CHECK_ODBM();
   TO_DATUM(dkey, key);
   TO_DATUM(dval, val);
   r = store(dkey, dval);
   SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc odbm-fetch (key::<string>)
  "datum dkey, dval; ScmObj r;
   CHECK_ODBM();
   TO_DATUM(dkey, key);
   dval = fetch(dkey);
   FROM_DATUM(r, dval);
   SCM_RETURN(r);")

(define-cproc odbm-delete (key::<string>)
  "datum dkey; int r;
   CHECK_ODBM();
   TO_DATUM(dkey, key);
   r = delete(dkey);
   SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc odbm-firstkey ()
  "datum dkey; ScmObj r;
   CHECK_ODBM();
   dkey = firstkey();
   FROM_DATUM(r, dkey);
   SCM_RETURN(r);")

(define-cproc odbm-nextkey (key::<string>)
  "datum dkey, dnkey; ScmObj r;
   CHECK_ODBM();
   TO_DATUM(dkey, key);
   dnkey = nextkey(dkey);
   FROM_DATUM(r, dnkey);
   SCM_RETURN(r);")

;; Local variables:
;; mode: scheme
;; end:
