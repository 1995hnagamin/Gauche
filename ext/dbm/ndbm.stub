;;
;; ndbmlib.stub - ndbm interface
;;
;;  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: ndbm.stub,v 1.3 2001-10-21 09:02:29 shirok Exp $
;;

"
 #include \"dbmconfig.h\"
 #include \"fcntl.h\"

 #ifdef HAVE_NDBM_H
 #include <ndbm.h>
 #elif HAVE_GDBM_NDBM_H
 #include <gdbm/ndbm.h>
 #endif

 static void ndbm_print(ScmObj, ScmPort *, ScmWriteContext*);
 static SCM_DEFINE_BUILTIN_CLASS_SIMPLE(Scm_NdbmClass, ndbm_print);

 #define SCM_CLASS_NDBM       (&Scm_NdbmClass)
 #define SCM_NDBM(obj)        ((ScmNdbm*)obj)
 #define SCM_NDBM_P(obj)      SCM_TYPEP(obj, SCM_CLASS_NDBM)

 typedef struct ScmNdbmRec {
    ScmObj name;
    DBM *dbf;                   /* NULL if closed */
 } ScmNdbm;

 static void ndbm_print(ScmObj obj, ScmPort *out, ScmWriteContext *ctx)
 {
    Scm_Printf(out, \"#<ndbm-file %S>\", SCM_NDBM(obj)->name);
 }

 #define TO_DATUM(datum_, scm_)             \\
   do {                                     \\
     datum_.dptr = Scm_GetString(scm_);     \\
     datum_.dsize = SCM_STRING_SIZE(scm_);  \\
   } while (0)
 #define FROM_DATUM(scm_, datum_)           \\
   do {                                     \\
     if (datum_.dptr) {                     \\
       scm_ = Scm_MakeString(datum_.dptr, datum_.dsize, -1, SCM_MAKSTR_COPYING); \\
     } else {                               \\
       scm_ = SCM_FALSE;                    \\
     }                                      \\
   } while (0)

 #define CHECK_NDBM(g)    if (!g->dbf) Scm_Error(\"ndbm file already closed: %S\", g)
"

(initcode
 "Scm_InitBuiltinClass(&Scm_NdbmClass, \"<ndbm-file>\", NULL, module);\n")

(define-type "ndbm" ndbm? "ScmNdbm*" "SCM_NDBM_P" "SCM_NDBM")

(define-cproc ndbm-open (name flags mode)
  (assert (string? name))
  (assert (small-integer? flags))
  (assert (small-integer? mode))
  "ScmNdbm *z = SCM_NEW(ScmNdbm);
  SCM_SET_CLASS(z, SCM_CLASS_NDBM);
  z->name = SCM_OBJ(name);
  z->dbf = dbm_open(Scm_GetString(name), flags, mode);
  if (z->dbf == NULL) Scm_SysError(\"couldn't open ndbm file %S\", name);
  SCM_RETURN(SCM_OBJ(z));")

(define-cproc ndbm-close (ndbm)
  (assert (ndbm? ndbm))
  "if (ndbm->dbf) {
     dbm_close(ndbm->dbf);
     ndbm->dbf = NULL;
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc ndbm-closed? (ndbm)
  (assert (ndbm? ndbm))
  "SCM_RETURN(SCM_MAKE_BOOL(ndbm->dbf != NULL));")

(define-cproc ndbm-store (ndbm key val &optional (flags 0))
  (assert (ndbm? ndbm))
  (assert (string? key))
  (assert (string? val))
  (assert (small-integer? flags))
  "datum dkey, dval; int r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  TO_DATUM(dval, val);
  r = dbm_store(ndbm->dbf, dkey, dval, flags);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-fetch (ndbm key)
  (assert (ndbm? ndbm))
  (assert (string? key))
  "datum dkey, dval; ScmObj r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  dval = dbm_fetch(ndbm->dbf, dkey);
  FROM_DATUM(r, dval);
  SCM_RETURN(r);")

(define-cproc ndbm-delete (ndbm key)
  (assert (ndbm? ndbm))
  (assert (string? key))
  "datum dkey; int r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  r = dbm_delete(ndbm->dbf, dkey);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-firstkey (ndbm)
  (assert (ndbm? ndbm))
  "datum dkey; ScmObj r;
  CHECK_NDBM(ndbm);
  dkey = dbm_firstkey(ndbm->dbf);
  FROM_DATUM(r, dkey);
  SCM_RETURN(r);")

(define-cproc ndbm-nextkey (ndbm key)
  (assert (ndbm? ndbm))
  "datum dkey; ScmObj r;
  CHECK_NDBM(ndbm);
  dkey = dbm_nextkey(ndbm->dbf);
  FROM_DATUM(r, dkey);
  SCM_RETURN(r);")

(define-cproc ndbm-error (ndbm)
  (assert (ndbm? ndbm))
  "int r;
  CHECK_NDBM(ndbm);
  r = dbm_error(ndbm->dbf);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-clearerror (ndbm)
  (assert (ndbm? ndbm))
  "CHECK_NDBM(ndbm);
   dbm_clearerr(ndbm->dbf);
   SCM_RETURN(SCM_UNDEFINED);")

(define-symbol |DBM_INSERT| "sym_DBM_INSERT" "Scm_MakeInteger(DBM_INSERT)")
(define-symbol |DBM_REPLACE| "sym_DBM_REPLACE" "Scm_MakeInteger(DBM_REPLACE)")
(define-symbol |O_RDONLY| "sym_O_RDONLY" "Scm_MakeInteger(O_RDONLY)")
(define-symbol |O_WRONLY| "sym_O_WRONLY" "Scm_MakeInteger(O_WRONLY)")
(define-symbol |O_RDWR| "sym_O_RDWR" "Scm_MakeInteger(O_RDWR)")
(define-symbol |O_CREAT| "sym_O_CREAT" "Scm_MakeInteger(O_CREAT)")
(define-symbol |O_TRUNC| "sym_O_TRUNC" "Scm_MakeInteger(O_TRUNC)")

;; Local variables:
;; mode: scheme
;; end:
