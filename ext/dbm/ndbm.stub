;;
;; ndbm.stub - ndbm interface
;;
;;  Copyright(C) 2001-2002 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: ndbm.stub,v 1.14 2002-07-24 15:38:50 shirok Exp $
;;

"
 #include \"dbmconfig.h\"
 #include \"fcntl.h\"
 #include <gauche/extend.h>

 #if HAVE_NDBM_H
 #include <ndbm.h>
 #elif HAVE_GDBM_NDBM_H
 #include <gdbm/ndbm.h>
 #endif

 SCM_CLASS_DECL(Scm_NdbmClass); 
 static void ndbm_print(ScmObj, ScmPort *, ScmWriteContext*);
 SCM_DEFINE_BUILTIN_CLASS_SIMPLE(Scm_NdbmClass, ndbm_print);

 #define SCM_CLASS_NDBM       (&Scm_NdbmClass)
 #define SCM_NDBM(obj)        ((ScmNdbm*)obj)
 #define SCM_NDBM_P(obj)      SCM_XTYPEP(obj, SCM_CLASS_NDBM)

 typedef struct ScmNdbmRec {
    SCM_HEADER;
    ScmObj name;
    DBM *dbf;                   /* NULL if closed */
 } ScmNdbm;

 static void ndbm_print(ScmObj obj, ScmPort *out, ScmWriteContext *ctx)
 {
    Scm_Printf(out, \"#<ndbm-file %S>\", SCM_NDBM(obj)->name);
 }

 #define TO_DATUM(datum_, scm_)                     \\
   do {                                             \\
     datum_.dptr = (char*)Scm_GetStringConst(scm_); \\
     datum_.dsize = SCM_STRING_SIZE(scm_);          \\
   } while (0)
 #define FROM_DATUM(scm_, datum_)           \\
   do {                                     \\
     if (datum_.dptr) {                     \\
       scm_ = Scm_MakeString(datum_.dptr, datum_.dsize, -1, SCM_MAKSTR_COPYING); \\
     } else {                               \\
       scm_ = SCM_FALSE;                    \\
     }                                      \\
   } while (0)

 #define CHECK_NDBM(g)    if (!g->dbf) Scm_Error(\"ndbm file already closed: %S\", g)

 /* Hack for initialization stub */
 void internal_init(ScmModule*);

 void Scm_Init_ndbm(void)
 {
    ScmModule *mod;
    SCM_INIT_EXTENSION(ndbm);
    mod = SCM_MODULE(SCM_FIND_MODULE(\"dbm.ndbm\", TRUE));
    Scm_InitBuiltinClass(&Scm_NdbmClass, \"<ndbm-file>\", NULL, sizeof(ScmNdbm), mod);
    internal_init(mod);
 }
 #define Scm_Init_ndbm  internal_init
"

(define-type <ndbm> "ScmNdbm*")

;; finalization
"static void ndbm_finalize(GC_PTR obj, GC_PTR data)
 {
    ScmNdbm *n = SCM_NDBM(obj);
    if (n->dbf) { dbm_close(n->dbf); n->dbf = NULL; }
 }
"

(define-cproc ndbm-open (name::<string> flags::<fixnum> mode::<fixnum>)
  "GC_finalization_proc ofn; GC_PTR ocd;
  ScmNdbm *z = SCM_NEW(ScmNdbm);
  SCM_SET_CLASS(z, SCM_CLASS_NDBM);
  GC_REGISTER_FINALIZER(z, ndbm_finalize, NULL, &ofn, &ocd);
  z->name = SCM_OBJ(name);
  z->dbf = dbm_open(Scm_GetString(name), flags, mode);
  if (z->dbf == NULL) Scm_SysError(\"couldn't open ndbm file %S\", name);
  SCM_RETURN(SCM_OBJ(z));")

(define-cproc ndbm-close (ndbm::<ndbm>)
  "if (ndbm->dbf) {
     dbm_close(ndbm->dbf);
     ndbm->dbf = NULL;
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc ndbm-closed? (ndbm::<ndbm>)
  "SCM_RETURN(SCM_MAKE_BOOL(ndbm->dbf == NULL));")

(define-cproc ndbm-store (ndbm::<ndbm> key::<string> val::<string>
                                       &optional (flags::<fixnum> 0))
  "datum dkey, dval; int r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  TO_DATUM(dval, val);
  r = dbm_store(ndbm->dbf, dkey, dval, flags);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-fetch (ndbm::<ndbm> key::<string>)
  "datum dkey, dval; ScmObj r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  dval = dbm_fetch(ndbm->dbf, dkey);
  FROM_DATUM(r, dval);
  SCM_RETURN(r);")

(define-cproc ndbm-exists? (ndbm::<ndbm> key::<string>)
  "datum dkey, dval;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  dval = dbm_fetch(ndbm->dbf, dkey);
  SCM_RETURN(SCM_MAKE_BOOL(dval.dptr != NULL));")

(define-cproc ndbm-delete (ndbm::<ndbm> key::<string>)
  "datum dkey; int r;
  CHECK_NDBM(ndbm);
  TO_DATUM(dkey, key);
  r = dbm_delete(ndbm->dbf, dkey);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-firstkey (ndbm::<ndbm>)
  "datum dkey; ScmObj r;
  CHECK_NDBM(ndbm);
  dkey = dbm_firstkey(ndbm->dbf);
  FROM_DATUM(r, dkey);
  SCM_RETURN(r);")

(define-cproc ndbm-nextkey (ndbm::<ndbm>)
  "datum dkey; ScmObj r;
  CHECK_NDBM(ndbm);
  dkey = dbm_nextkey(ndbm->dbf);
  FROM_DATUM(r, dkey);
  SCM_RETURN(r);")

(define-cproc ndbm-error (ndbm::<ndbm>)
  "int r;
  CHECK_NDBM(ndbm);
  r = dbm_error(ndbm->dbf);
  SCM_RETURN(SCM_MAKE_INT(r));")

(define-cproc ndbm-clearerror (ndbm::<ndbm>)
  "CHECK_NDBM(ndbm);
   dbm_clearerr(ndbm->dbf);
   SCM_RETURN(SCM_UNDEFINED);")

(define-enum DBM_INSERT)
(define-enum DBM_REPLACE)
(define-enum O_RDONLY)
(define-enum O_WRONLY)
(define-enum O_RDWR)
(define-enum O_CREAT)
(define-enum O_TRUNC)

;; Local variables:
;; mode: scheme
;; end:
