;;-*-Scheme-*-
;; 

"
#include \"mt-random.h\"
#include \"gauche/uvector.h\"
"

(define-type "mersenne-twister" mersenne-twister?
  "ScmMersenneTwister*" "SCM_MERSENNE_TWISTER_P" "SCM_MERSENNE_TWISTER")
(define-type "u32vector" u32vector?
  "ScmU32Vector*" "SCM_U32VECTORP" "SCM_U32VECTOR")
(define-type "f32vector" f32vector?
  "ScmF32Vector*" "SCM_F32VECTORP" "SCM_F32VECTOR")
(define-type "f64vector" f64vector?
  "ScmF64Vector*" "SCM_F64VECTORP" "SCM_F64VECTOR")

(define-cproc mt-random-real (mt)
  (assert (mersenne-twister? mt))
  "SCM_RETURN(Scm_MakeFlonum(Scm_MTGenrandF64(mt)));")

(define-cproc %mt-random-integer (mt n)
  (assert (mersenne-twister? mt))
  "SCM_RETURN(Scm_MTGenrandInt(mt, n));")

(define-cproc %mt-random-uint32 (mt)
  (assert (mersenne-twister? mt))
  "SCM_RETURN(Scm_MakeIntegerFromUI(Scm_MTGenrandU32(mt)));")

(define-cproc mt-random-fill-u32vector! (mt v)
  (assert (mersenne-twister? mt))
  (assert (u32vector? v))
  " int len = SCM_U32VECTOR_SIZE(v), i;
  SCM_UVECTOR_UINT32 *p = SCM_U32VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandU32(mt);
  SCM_RETURN(SCM_OBJ(v));")

(define-cproc mt-random-fill-f32vector! (mt v)
  (assert (mersenne-twister? mt))
  (assert (f32vector? v))
  " int len = SCM_F32VECTOR_SIZE(v), i;
  float *p = SCM_F32VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandF32(mt);
  SCM_RETURN(SCM_OBJ(v));")

(define-cproc mt-random-fill-f64vector! (mt v)
  (assert (mersenne-twister? mt))
  (assert (f64vector? v))
  " int len = SCM_F64VECTOR_SIZE(v), i;
  double *p = SCM_F64VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandF64(mt);
  SCM_RETURN(SCM_OBJ(v));")

