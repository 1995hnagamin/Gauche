;;-*-Scheme-*-
;; 

"
#include \"mt-random.h\"
"

(define-type <mersenne-twister> "ScmMersenneTwister*")
(define-type <u32vector> "ScmU32Vector*")
(define-type <f32vector> "ScmF32Vector*")
(define-type <f64vector> "ScmF64Vector*")

(define-cproc mt-random-set-seed! (mt::<mersenne-twister> init)
  "if (SCM_INTP(init)) {
    Scm_MTInitByUI(mt, Scm_GetUInteger(init));
  } else if (SCM_BIGNUMP(init)) {
    int i; unsigned long s = 0;
    for (i=0; i<SCM_BIGNUM_SIZE(init); i++) {
      s ^= SCM_BIGNUM(init)->values[i];
    }
    Scm_MTInitByUI(mt, s);
  } else if (SCM_U32VECTORP(init)) {
    Scm_MTInitByArray(mt, (ScmInt32*)SCM_U32VECTOR_ELEMENTS(init), SCM_U32VECTOR_SIZE(init));
  } else {
    Scm_Error(\"bad random seed: must be an exact integer or u32vector, but got %S\", init);
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc mt-random-get-state (mt::<mersenne-twister>)
  "
   ScmObj v = Scm_MakeU32Vector(N+1, 0);
   int i;
   for (i=0; i<N; i++) SCM_U32VECTOR_ELEMENTS(v)[i] = mt->mt[i];
   SCM_U32VECTOR_ELEMENTS(v)[N] = mt->mti;
   SCM_RETURN(v);
   ")

(define-cproc mt-random-set-state! (mt::<mersenne-twister> state::<u32vector>)
  "int i;
  if (SCM_U32VECTOR_SIZE(state) != N+1) {
    Scm_Error(\"u32vector of length %d is required, but got length %d\", N+1, SCM_U32VECTOR_SIZE(state));
  }
  for (i=0; i<N; i++) mt->mt[i] = SCM_U32VECTOR_ELEMENTS(state)[i];
  mt->mti = SCM_U32VECTOR_ELEMENTS(state)[N];
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc mt-random-real (mt::<mersenne-twister>)
  "SCM_RETURN(Scm_MakeFlonum(Scm_MTGenrandF64(mt, TRUE)));")

(define-cproc mt-random-real0 (mt::<mersenne-twister>)
  "SCM_RETURN(Scm_MakeFlonum(Scm_MTGenrandF64(mt, FALSE)));")

(define-cproc %mt-random-integer (mt::<mersenne-twister> n)
  "SCM_RETURN(Scm_MTGenrandInt(mt, n));")

(define-cproc %mt-random-uint32 (mt::<mersenne-twister>)
  "SCM_RETURN(Scm_MakeIntegerFromUI(Scm_MTGenrandU32(mt)));")

(define-cproc mt-random-fill-u32vector! (mt::<mersenne-twister> v::<u32vector>)
  " int len = SCM_U32VECTOR_SIZE(v), i;
  ScmUInt32 *p = SCM_U32VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandU32(mt);
  SCM_RETURN(SCM_OBJ(v));")

(define-cproc mt-random-fill-f32vector! (mt::<mersenne-twister> v::<f32vector>)
  " int len = SCM_F32VECTOR_SIZE(v), i;
  float *p = SCM_F32VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandF32(mt, TRUE);
  SCM_RETURN(SCM_OBJ(v));")

(define-cproc mt-random-fill-f64vector! (mt::<mersenne-twister> v::<f64vector>)
  " int len = SCM_F64VECTOR_SIZE(v), i;
  double *p = SCM_F64VECTOR_ELEMENTS(v);
  for (i=0; i<len; i++) *p++ = Scm_MTGenrandF64(mt, TRUE);
  SCM_RETURN(SCM_OBJ(v));")
