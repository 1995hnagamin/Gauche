;;;
;;; sha1.stub - SHA-1 message-digest
;;;
;;;  Copyright(C) 2002 by Kimura Fuyuki (fuyuki@hadaly.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;
;;;  $Id: sha1.stub,v 1.3 2002-12-11 03:09:26 shirok Exp $
;;;

"
 #include <gauche/extend.h>
 #include <gauche/class.h>
 #include \"sha.h\"

 typedef struct ScmSha1Rec {
   SCM_HEADER;
   SHA_CTX ctx;
 } ScmSha1;

 SCM_CLASS_DECL(Scm_Sha1Class);
 static ScmObj sha1_allocate(ScmClass *, ScmObj);
 SCM_DEFINE_BUILTIN_CLASS(Scm_Sha1Class,
                          NULL, NULL, NULL, sha1_allocate,
                          NULL);

 #define SCM_CLASS_SHA1      (&Scm_Sha1Class)
 #define SCM_SHA1(obj)       ((ScmSha1*)obj)
 #define SCM_SHA1P(obj)      SCM_XTYPEP(obj, SCM_CLASS_SHA1)

 static ScmObj sha1_allocate(ScmClass *klass, ScmObj initargs)
 {
   ScmSha1 *sha1 = SCM_ALLOCATE(ScmSha1, klass);
   SCM_SET_CLASS(sha1, klass);
   SHAInit(&sha1->ctx);
   return SCM_OBJ(sha1);
 }

 /* Hack for initialization stub */
 static void internal_init(ScmModule*);
 void Scm_Init_sha1(void)
 {
   ScmModule *mod = SCM_MODULE(SCM_FIND_MODULE(\"rfc.sha1\", TRUE));
   SCM_INIT_EXTENSION(sha1);
   Scm_InitBuiltinClass(&Scm_Sha1Class, \"<sha1-context>\", NULL, sizeof(ScmSha1), mod);
   internal_init(mod);
 }

 #define Scm_Init_sha1 internal_init
"

(define-type <sha1> "ScmSha1*")

(define-cproc %sha1-update (sha1::<sha1> data::<string>)
  "  SHAUpdate(&sha1->ctx, Scm_GetString(data), SCM_STRING_SIZE(data));
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc %sha1-final (sha1::<sha1>)
  "  unsigned char digest[20];
  SHAFinal(digest, &sha1->ctx);
  SCM_RETURN(Scm_MakeString(digest, 20, 20, SCM_MAKSTR_INCOMPLETE|SCM_MAKSTR_COPYING));")

;; Local variables:
;; mode: scheme
;; end:
