;;;
;;; md5.stub - MD5 message-digest
;;;
;;;   Copyright (c) 2002-2003 Kimura Fuyuki, All rights reserved.
;;;
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;
;;;  $Id: md5.stub,v 1.11 2006-11-30 23:55:00 shirok Exp $
;;;

"
 #include <gauche/extend.h>
 #include <gauche/class.h>
 #include <gauche/uvector.h>
 #include \"md5.h\"

 typedef struct ScmMd5Rec {
   SCM_HEADER;
   MD5_CTX ctx;
 } ScmMd5;

 SCM_CLASS_DECL(Scm_Md5Class);
 static ScmObj md5_allocate(ScmClass *, ScmObj);
 SCM_DEFINE_BUILTIN_CLASS(Scm_Md5Class,
                          NULL, NULL, NULL, md5_allocate,
                          NULL);

 #define SCM_CLASS_MD5      (&Scm_Md5Class)
 #define SCM_MD5(obj)       ((ScmMd5*)obj)
 #define SCM_MD5P(obj)      SCM_XTYPEP(obj, SCM_CLASS_MD5)

 static ScmObj md5_allocate(ScmClass *klass, ScmObj initargs)
 {
   ScmMd5 *md5 = SCM_ALLOCATE(ScmMd5, klass);
   SCM_SET_CLASS(md5, klass);
   MD5Init(&md5->ctx);
   return SCM_OBJ(md5);
 }

 /* Hack for initialization stub */
 static void Scm_md5_internal_init(ScmModule*);
 void Scm_Init_md5(void)
 {
   ScmModule *mod = SCM_FIND_MODULE(\"rfc.md5\", SCM_FIND_MODULE_CREATE);
   SCM_INIT_EXTENSION(md5);
   Scm_InitStaticClass(&Scm_Md5Class, \"<md5-context>\", mod, NULL, 0);
   Scm_md5_internal_init(mod);
 }

 #define Scm_Init_md5 Scm_md5_internal_init
"

(define-type <md5> "ScmMd5*")

(define-cproc %md5-update (md5::<md5> data)
  "
  if (SCM_U8VECTORP(data)){
    MD5Update(&md5->ctx, SCM_UVECTOR_ELEMENTS(SCM_U8VECTOR(data)), SCM_U8VECTOR_SIZE(SCM_U8VECTOR(data)));
  } else if (SCM_STRINGP(data)) {
    const ScmStringBody *b = SCM_STRING_BODY(data);
    MD5Update(&md5->ctx, 
              (const unsigned char*)SCM_STRING_BODY_START(b), 
              SCM_STRING_BODY_SIZE(b));
  } else {
    Scm_Error(\"u8vector or string required, but got: %S\", data);
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc %md5-final (md5::<md5>)
  "  unsigned char digest[16];
  MD5Final(digest, &md5->ctx);
  SCM_RETURN(Scm_MakeString((char *)digest, 16, 16, SCM_STRING_INCOMPLETE|SCM_STRING_COPYING));")

;; Local variables:
;; mode: scheme
;; end:
