CC = @CC@
OPTFLAGS = @OPTFLAGS@
CFLAGS = @CFLAGS@ @DEFS@ $(OPTFLAGS)
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
GOSH = @GOSH@
GAUCHE_CONFIG = @GAUCHE_CONFIG@
GAUCHE_TOP = @GAUCHE_TOP@
INSTALL = @LIBTOOL@ --mode=install @INSTALL@
LIBTOOL = @LIBTOOL@
top_builddir = $(GAUCHE_TOP)

ARCHFILES = md5.la sha1.la
SCMFILES = md5.scm sha1.scm
HEADERS =

MD5_TARGET = md5.la
MD5_OBJS = md5_head.lo md5.lo md5_tail.lo md5c.lo
SHA1_TARGET = sha1.la
SHA1_OBJS = sha1_head.lo sha1.lo sha1_tail.lo sha.lo

TARGET = $(MD5_TARGET) $(SHA1_TARGET)
OBJS   = $(MD5_OBJS) $(SHA1_OBJS)

CONFIG_GENERATED = Makefile config.cache config.log config.status \
		   autom4te*.cache libtool md5_head.c md5_tail.c \
                   sha1_head.c sha1_tail.c
GENERATED = md5.c sha1.c

INSTALL_TYPE = @INSTALL_TYPE@
HEADER_INSTALL_DIR  = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)incdir`
SCM_INSTALL_DIR     = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)libdir`/rfc
ARCH_INSTALL_DIR    = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)archdir`

.SUFFIXES: .lo

.c.lo:
	$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -c $< -o $@

all : $(TARGET)

md5.la : $(MD5_OBJS)
	$(LIBTOOL) --mode=link $(CC) -module -avoid-version -rpath $(ARCH_INSTALL_DIR) $(LDFLAGS) md5.la $(MD5_OBJS) $(LIBS)

md5.c : md5.stub
	$(GOSH) genstub md5.stub

sha1.la : $(SHA1_OBJS)
	$(LIBTOOL) --mode=link $(CC) -module -avoid-version -rpath $(ARCH_INSTALL_DIR) $(LDFLAGS) sha1.la $(SHA1_OBJS) $(LIBS)

sha1.c : sha1.stub
	$(GOSH) genstub sha1.stub

check : test

test : all
	@rm -f test.log
	$(GOSH) -I. test-md5.scm  >> test.log
	$(GOSH) -I. test-sha1.scm >> test.log
	$(GOSH) -I. test-hmac.scm >> test.log

install : all
	@for f in $(HEADERS) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(HEADER_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(SCMFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(SCM_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(ARCHFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 555 $$f $(ARCH_INSTALL_DIR); \
	  fi; \
	done

clean :
	rm -rf core $(TARGET) $(GENERATED) $(OBJS) $(OBJS:.lo=.o) *~ test.log so_locations
	rm -rf .libs _libs

distclean : clean
	rm -rf $(CONFIG_GENERATED)

maintainer-clean : realclean

realclean : clean
	rm -rf $(CONFIG_GENERATED) configure

# 'link' creates symlinks from source tree to extension modules, so that
# it can be tested within the source tree.  'unlink' removes them.
# these are only for developer's.

link : $(TARGET) $(SCMFILES)
	$(GOSH) ../xlink -d rfc -l $(TARGET) $(SCMFILES)

unlink :
	$(GOSH) ../xlink -d rfc -u $(TARGET) $(SCMFILES)

