CC = @CC@
OPTFLAGS = @OPTFLAGS@
CFLAGS = @CFLAGS@ $(OPTFLAGS)
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
GOSH = @GOSH@
GAUCHE_CONFIG = @GAUCHE_CONFIG@
GAUCHE_TOP = @GAUCHE_TOP@
INSTALL = @LIBTOOL@ --mode=install @INSTALL@
LIBTOOL = @LIBTOOL@
top_builddir = $(GAUCHE_TOP)

ARCHFILES = termios.la
SCMFILES = termios.scm
HEADERS = termios.h termconfig.h

TARGET = termios.la
OBJS = termios_head.lo termios.lo termiolib.lo termios_tail.lo
CONFIG_GENERATED = Makefile config.cache config.log config.status termiolib.c \
		   autom4te*.cache libtool \
		   termios_head.c termios_tail.c termconfig.h

INSTALL_TYPE = @INSTALL_TYPE@
HEADER_INSTALL_DIR  = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)incdir`/gauche
SCM_INSTALL_DIR     = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)libdir`/gauche
ARCH_INSTALL_DIR    = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)archdir`

.SUFFIXES: .lo

.c.lo:
	$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -c $< -o $@

all : $(TARGET)

termios.la : $(OBJS)
	$(LIBTOOL) --mode=link $(CC) -module -avoid-version -rpath $(ARCH_INSTALL_DIR) $(LDFLAGS) termios.la $(OBJS) $(LIBS)

termiolib.c : termiolib.stub
	$(GOSH) genstub termiolib.stub

check : test

test : all
	@rm -f test.log
	$(GOSH) -I. test.scm > test.log

install : all
	@for f in $(HEADERS) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(HEADER_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(SCMFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(SCM_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(ARCHFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 555 $$f $(ARCH_INSTALL_DIR); \
	  fi; \
	done

clean :
	rm -rf core $(TARGET) $(OBJS) $(OBJS:.lo=.o) *~ test.log so_locations
	rm -rf .libs _libs

distclean : clean
	rm -rf $(CONFIG_GENERATED)

maintainer-clean : realclean

realclean : clean
	rm -rf $(CONFIG_GENERATED) configure

# 'link' creates symlinks from source tree to extension modules, so that
# it can be tested within the source tree.  'unlink' removes them.
# these are only for developer's.

link : $(TARGET) $(SCMFILES)
	$(GOSH) ../xlink -d gauche -l $(TARGET) $(SCMFILES)

unlink :
	-$(GOSH) ../xlink -d gauche -u $(TARGET) $(SCMFILES)
