;;;
;;; termiolib.stub - termios interface
;;;  
;;;   Copyright (c) 2000-2005 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: termiolib.stub,v 1.13 2005-08-01 12:23:33 shirok Exp $
;;;

"#include \"gauche/termios.h\""

;;---------------------------------------------------------------------
;; termios.h

(define-type <sys-termios> "ScmSysTermios*")

(if "!defined(__MINGW32__)" (begin

(define-enum TCSANOW)
(define-enum TCSADRAIN)
(define-enum TCSAFLUSH)
(define-enum TCIFLUSH)
(define-enum TCOFLUSH)
(define-enum TCIOFLUSH)
(define-enum TCOOFF)
(define-enum TCOON)
(define-enum TCIOFF)
(define-enum TCION)

(define-enum B0)
(define-enum B50)
(define-enum B75)
(define-enum B110)
(define-enum B134)
(define-enum B150)
(define-enum B200)
(define-enum B300)
(define-enum B600)
(define-enum B1200)
(define-enum B1800)
(define-enum B2400)
(define-enum B4800)
(define-enum B9600)
(define-enum B19200)
(define-enum B38400)

(define-cproc sys-tcgetattr (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  ScmSysTermios *term = SCM_SYS_TERMIOS(Scm_MakeSysTermios());
  if (tcgetattr(fd, &term->term) < 0) {
    Scm_SysError(\"tcgetattr failed\");
  }
  SCM_RETURN(SCM_OBJ(term));")

(define-cproc sys-tcsetattr (port-or-fd option::<fixnum> term::<sys-termios>)
  (body <void>
        "int fd = Scm_GetPortFd(port_or_fd, TRUE);"
        "if (tcsetattr(fd, option, &term->term) < 0) {"
        "  Scm_SysError(\"tcsetattr failed\");"
        "}"))

(define-cproc sys-tcsendbreak (port-or-fd duration::<fixnum>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  SCM_RETURN(tcsendbreak(fd, duration) < 0 ? SCM_FALSE : SCM_TRUE);")

(define-cproc sys-tcdrain (port-or-fd)
  (body <void>
        "int fd = Scm_GetPortFd(port_or_fd, TRUE);"
        "if (tcdrain(fd) < 0) Scm_SysError(\"tcdrain failed\");"))

(define-cproc sys-tcflush (port-or-fd queue::<int>)
  (body <void>
        "int fd = Scm_GetPortFd(port_or_fd, TRUE);"
        "if (tcflush(fd, queue) < 0) Scm_SysError(\"tcflush failed\");"))

(define-cproc sys-tcflow (port-or-fd action::<int>)
  (body <void>
        "int fd = Scm_GetPortFd(port_or_fd, TRUE);"
        "if (tcflow(fd, action) < 0) Scm_SysError(\"tcflow failed\");"))

(define-cproc sys-tcgetpgrp (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  pid_t r = tcgetpgrp(fd);
  if (r < 0) { Scm_SysError(\"tcgetpgrp failed\"); }
  SCM_RETURN(Scm_MakeInteger(r));")

(define-cproc sys-tcsetpgrp (port-or-fd pgrp::<int>)
  (body <void>
        "int fd = Scm_GetPortFd(port_or_fd, TRUE);"
        "if (tcsetpgrp(fd, pgrp) < 0) Scm_SysError(\"tcsetpgrp failed\");"))

(define-cproc sys-cfgetispeed (term::<sys-termios>)
  "  speed_t s;
  s = cfgetispeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetispeed (term::<sys-termios> speed::<int>)
  (body <void>
        "if (cfsetispeed(&term->term, speed) < 0) Scm_SysError(\"cfsetispeed\");"))

(define-cproc sys-cfgetospeed (term::<sys-termios>)
  "  speed_t s;
  s = cfgetospeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetospeed (term::<sys-termios> speed::<int>)
  (body <void>
        "if (cfsetospeed(&term->term, speed) < 0) Scm_SysError(\"cfsetispeed\");"))

;; pty interface
(if "defined(HAVE_OPENPTY)"
(define-cproc sys-openpty (&optional term)
  (call "Scm_Openpty"))
)
(if "defined(HAVE_FORKPTY)"
(define-cproc sys-forkpty (&optional term)
  (call "Scm_Forkpty"))
)

)) ;; !defined(__MINGW32__)

;; Local variables:
;; mode: scheme
;; end:
