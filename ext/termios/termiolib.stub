;;;
;;; termiolib.stub - termios interface
;;;
;;;   Copyright (c) 2001-2002 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: termiolib.stub,v 1.8 2003-04-14 10:11:55 shirok Exp $
;;;

"#include \"gauche/termios.h\""

;;---------------------------------------------------------------------
;; termios.h

(define-type <sys-termios> "ScmSysTermios*")

(define-enum TCSANOW)
(define-enum TCSADRAIN)
(define-enum TCSAFLUSH)
(define-enum TCIFLUSH)
(define-enum TCOFLUSH)
(define-enum TCIOFLUSH)
(define-enum TCOOFF)
(define-enum TCOON)
(define-enum TCIOFF)
(define-enum TCION)

(define-enum B0)
(define-enum B50)
(define-enum B75)
(define-enum B110)
(define-enum B134)
(define-enum B150)
(define-enum B200)
(define-enum B300)
(define-enum B600)
(define-enum B1200)
(define-enum B1800)
(define-enum B2400)
(define-enum B4800)
(define-enum B9600)
(define-enum B19200)
(define-enum B38400)

(define-cproc sys-tcgetattr (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  ScmSysTermios *term = SCM_SYS_TERMIOS(Scm_MakeSysTermios());
  if (tcgetattr(fd, &term->term) < 0) {
    Scm_SysError(\"tcgetattr failed\");
  }
  SCM_RETURN(SCM_OBJ(term));")

(define-cproc sys-tcsetattr (port-or-fd option::<fixnum> term::<sys-termios>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcsetattr(fd, option, &term->term) < 0) {
    Scm_SysError(\"tcsetattr failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcsendbreak (port-or-fd duration::<fixnum>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  SCM_RETURN(tcsendbreak(fd, duration) < 0 ? SCM_FALSE : SCM_TRUE);")

(define-cproc sys-tcdrain (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcdrain(fd) < 0) {
    Scm_SysError(\"tcdrain failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcflush (port-or-fd queue::<int>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcflush(fd, queue) < 0) {
    Scm_SysError(\"tcflush failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcflow (port-or-fd action::<int>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcflow(fd, action) < 0) {
    Scm_SysError(\"tcflow failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcgetpgrp (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  pid_t r = tcgetpgrp(fd);
  if (r < 0) { Scm_SysError(\"tcgetpgrp failed\"); }
  SCM_RETURN(Scm_MakeInteger(r));")

(define-cproc sys-tcsetpgrp (port-or-fd pgrp::<int>)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcsetpgrp(fd, pgrp) < 0) {
    Scm_SysError(\"tcsetpgrp failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-cfgetispeed (term::<sys-termios>)
  "  speed_t s = cfgetispeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetispeed (term::<sys-termios> speed::<int>)
  "  if (cfsetispeed(&term->term, speed) < 0) {
     Scm_SysError(\"cfsetispeed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-cfgetospeed (term::<sys-termios>)
  "  speed_t s = cfgetospeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetospeed (term::<sys-termios> speed::<int>)
  "  if (cfsetospeed(&term->term, speed) < 0) {
     Scm_SysError(\"cfsetispeed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

;; pty interface
(if "defined(HAVE_OPENPTY)"
(define-cproc sys-openpty (&optional term)
  "SCM_RETURN(Scm_Openpty(term));")
)
(if "defined(HAVE_FORKPTY)"
(define-cproc sys-forkpty (&optional term)
  "SCM_RETURN(Scm_Forkpty(term));")
)

;; Local variables:
;; mode: scheme
;; end:
