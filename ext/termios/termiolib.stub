;;;
;;; termiolib.stub - termios interface
;;;
;;;   Copyright (c) 2001 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: termiolib.stub,v 1.4 2002-04-29 22:24:36 shirok Exp $
;;;

"#include \"termios.h\""

;;---------------------------------------------------------------------
;; termios.h

(define-type "sys-termios" sys-termios?
  "ScmSysTermios*"  "SCM_SYS_TERMIOS_P" "SCM_SYS_TERMIOS")

(define-symbol |TCSANOW| "termios_tcsanow" "Scm_MakeIntegerFromUI(TCSANOW)")
(define-symbol |TCSADRAIN| "termios_tcsadrain" "Scm_MakeIntegerFromUI(TCSADRAIN)")
(define-symbol |TCSAFLUSH| "termios_tcsaflush" "Scm_MakeIntegerFromUI(TCSAFLUSH)")
(define-symbol |TCIFLUSH| "termios_tciflush" "Scm_MakeIntegerFromUI(TCIFLUSH)")
(define-symbol |TCOFLUSH| "termios_tcoflush" "Scm_MakeIntegerFromUI(TCOFLUSH)")
(define-symbol |TCIOFLUSH| "termios_tcioflush" "Scm_MakeIntegerFromUI(TCIOFLUSH)")
(define-symbol |TCOOFF| "termios_tcooff" "Scm_MakeIntegerFromUI(TCOOFF)")
(define-symbol |TCOON|  "termios_tcoon"  "Scm_MakeIntegerFromUI(TCOON)")
(define-symbol |TCIOFF| "termios_tcioff" "Scm_MakeIntegerFromUI(TCIOFF)")
(define-symbol |TCION|  "termios_tcion"  "Scm_MakeIntegerFromUI(TCION)")

(define-symbol |B0|     "termios_b0"     "Scm_MakeIntegerFromUI(B0)")
(define-symbol |B50|    "termios_b50"    "Scm_MakeIntegerFromUI(B50)")
(define-symbol |B75|    "termios_b75"    "Scm_MakeIntegerFromUI(B75)")
(define-symbol |B110|   "termios_b110"   "Scm_MakeIntegerFromUI(B110)")
(define-symbol |B134|   "termios_b134"   "Scm_MakeIntegerFromUI(B134)")
(define-symbol |B150|   "termios_b150"   "Scm_MakeIntegerFromUI(B150)")
(define-symbol |B200|   "termios_b200"   "Scm_MakeIntegerFromUI(B200)")
(define-symbol |B300|   "termios_b300"   "Scm_MakeIntegerFromUI(B300)")
(define-symbol |B600|   "termios_b600"   "Scm_MakeIntegerFromUI(B600)")
(define-symbol |B1200|  "termios_b1200"  "Scm_MakeIntegerFromUI(B1200)")
(define-symbol |B1800|  "termios_b1800"  "Scm_MakeIntegerFromUI(B1800)")
(define-symbol |B2400|  "termios_b2400"  "Scm_MakeIntegerFromUI(B2400)")
(define-symbol |B4800|  "termios_b4800"  "Scm_MakeIntegerFromUI(B4800)")
(define-symbol |B9600|  "termios_b9600"  "Scm_MakeIntegerFromUI(B9600)")
(define-symbol |B19200| "termios_b19200" "Scm_MakeIntegerFromUI(B19200)")
(define-symbol |B38400| "termios_b38400" "Scm_MakeIntegerFromUI(B38400)")

(define-cproc sys-tcgetattr (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  ScmSysTermios *term = SCM_SYS_TERMIOS(Scm_MakeSysTermios());
  if (tcgetattr(fd, &term->term) < 0) {
    Scm_SysError(\"tcgetattr failed\");
  }
  SCM_RETURN(SCM_OBJ(term));")

(define-cproc sys-tcsetattr (port-or-fd option term)
  (assert (exact? option))
  (assert (sys-termios? term))
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcsetattr(fd, option, &term->term) < 0) {
    Scm_SysError(\"tcsetattr failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcsendbreak (port-or-fd duration)
  (assert (exact? duration))
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  SCM_RETURN(tcsendbreak(fd, duration) < 0 ? SCM_FALSE : SCM_TRUE);")

(define-cproc sys-tcdrain (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcdrain(fd) < 0) {
    Scm_SysError(\"tcdrain failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcflush (port-or-fd queue)
  (assert (exact? queue))
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcflush(fd, queue) < 0) {
    Scm_SysError(\"tcflush failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcflow (port-or-fd action)
  (assert (exact? action))
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcflow(fd, action) < 0) {
    Scm_SysError(\"tcflow failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-tcgetpgrp (port-or-fd)
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  pid_t r = tcgetpgrp(fd);
  if (r < 0) { Scm_SysError(\"tcgetpgrp failed\"); }
  SCM_RETURN(Scm_MakeInteger(r));")

(define-cproc sys-tcsetpgrp (port-or-fd pgrp)
  (assert (exact? pgrp))
  "  int fd = Scm_GetPortFd(port_or_fd, TRUE);
  if (tcsetpgrp(fd, pgrp) < 0) {
    Scm_SysError(\"tcsetpgrp failed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-cfgetispeed (term)
  (assert (sys-termios? term))
  "  speed_t s = cfgetispeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetispeed (term speed)
  (assert (sys-termios? term))
  (assert (exact? speed))
  "  if (cfsetispeed(&term->term, speed) < 0) {
     Scm_SysError(\"cfsetispeed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc sys-cfgetospeed (term)
  (assert (sys-termios? term))
  "  speed_t s = cfgetospeed(&term->term);
  SCM_RETURN(Scm_MakeInteger(s));")

(define-cproc sys-cfsetospeed (term speed)
  (assert (sys-termios? term))
  (assert (exact? speed))
  "  if (cfsetospeed(&term->term, speed) < 0) {
     Scm_SysError(\"cfsetispeed\");
  }
  SCM_RETURN(SCM_UNDEFINED);")

;; pty interface
(if "defined(HAVE_OPENPTY)"
(define-cproc sys-openpty (&optional term)
  "SCM_RETURN(Scm_Openpty(term));")
)

;; Local variables:
;; mode: scheme
;; end:
