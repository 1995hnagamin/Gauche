;;;
;;; convlib.stub - character conversion library
;;;
;;;   Copyright (c) 2000-2001 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: convlib.stub,v 1.9 2002-05-26 01:06:13 shirok Exp $
;;;

"#include \"charconv.h\""

(define-cproc ces-conversion-supported? (from to)
  " const char *cfrom, *cto;
  cfrom = Scm_GetCESName(from, \"from-code\");
  cto   = Scm_GetCESName(to, \"to-code\");
  SCM_RETURN(SCM_MAKE_BOOL(Scm_ConversionSupportedP(cfrom, cto)));")

;; NB: :handler interface is experimental.  Do not use it.
(define-cproc open-input-conversion-port (source from-code
                                          &keyword (to-code #f)
                                                   (buffer-size 0)
                                                   (owner? #f)
                                                   (handler #f))
  (assert (input-port? source))
  (assert (small-integer? buffer-size))
  " const char *fc = Scm_GetCESName(from_code, \"from-code\");
  const char *tc = Scm_GetCESName(to_code, \"to-code\");
  SCM_RETURN(Scm_MakeInputConversionPort(source, fc, tc, handler,
                                         buffer_size, !SCM_FALSEP(ownerP)));")

(define-cproc open-output-conversion-port (sink to-code
                                           &keyword (from-code #f)
                                                    (buffer-size 0)
                                                    (owner? #f))
  (assert (output-port? sink))
  (assert (small-integer? buffer-size))
  " const char *fc = Scm_GetCESName(from_code, \"from-code\");
  const char *tc = Scm_GetCESName(to_code, \"to-code\");
  SCM_RETURN(Scm_MakeOutputConversionPort(sink, tc, fc,
                                          buffer_size, !SCM_FALSEP(ownerP)));")

(define-cproc ces-guess-from-string (string scheme)
  (assert (string? string))
  (assert (string? scheme))
  " const char *guessed = Scm_GuessCES(Scm_GetStringConst(scheme),
                                       SCM_STRING_START(string),
                                       SCM_STRING_SIZE(string));
  if (guessed) SCM_RETURN(SCM_MAKE_STR(guessed));
  else SCM_RETURN(SCM_FALSE);")

;;; Local variables:
;;; mode: scheme
;;; end:

