;;;
;;; convlib.stub - character conversion library
;;;
;;;   Copyright (c) 2000-2001 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: convlib.stub,v 1.5 2001-06-04 20:07:48 shirok Exp $
;;;

"#include \"charconv.h\""

(define-cproc ces-conversion-supported? (from to)
  " const char *cfrom = NULL, *cto = NULL;
  if (SCM_FALSEP(from)) {
    cfrom = Scm_SupportedCharacterEncodings()[0];
  } else if (!SCM_STRINGP(from)) {
    Scm_Error(\"string or #f is required for from-code, but got %S\", from);
  } else {
    cfrom = Scm_GetStringConst(SCM_STRING(from));
  }
  if (SCM_FALSEP(to)) {
    cto = Scm_SupportedCharacterEncodings()[0];
  } else if (!SCM_STRINGP(to)) {
    Scm_Error(\"string or #f is required for to-code, but got %S\", to);
  } else {
    cto = Scm_GetStringConst(SCM_STRING(to));
  }
  SCM_RETURN(SCM_MAKE_BOOL(Scm_ConversionSupportedP(cfrom, cto)));")

(define-cproc open-input-conversion-port (source from-code
                                          &optional to-code (buffer-size 0))
  (assert (input-port? source))
  (assert (string? from-code))
  (assert (small-integer? buffer-size))
  " ScmString *tc;
  if (SCM_UNBOUNDP(to_code) || SCM_FALSEP(to_code)) {
    tc = SCM_STRING(SCM_MAKE_STR_IMMUTABLE(Scm_SupportedCharacterEncodings()[0]));
  } else if (!SCM_STRINGP(to_code)) {
    Scm_Error(\"string required, but got %S\", to_code);
  } else {
    tc = SCM_STRING(to_code);
  } 
  SCM_RETURN(Scm_MakeInputConversionPort(source, from_code,
                                         tc, buffer_size));")

(define-cproc open-output-conversion-port (sink to-code
                                           &optional from-code (buffer-size 0))
  (assert (output-port? sink))
  (assert (string? to-code))
  (assert (small-integer? buffer-size))
  " ScmString *fc;
  if (SCM_UNBOUNDP(from_code) || SCM_FALSEP(from_code)) {
    fc = SCM_STRING(SCM_MAKE_STR_IMMUTABLE(Scm_SupportedCharacterEncodings()[0]));
  } else if (!SCM_STRINGP(from_code)) {
    Scm_Error(\"string required, but got %S\", from_code);
  } else {
    fc = SCM_STRING(from_code);
  } 
  SCM_RETURN(Scm_MakeOutputConversionPort(sink, to_code,
                                          fc, buffer_size));")


;;; Local variables:
;;; mode: scheme
;;; end:

