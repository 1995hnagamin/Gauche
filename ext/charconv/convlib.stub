;;;
;;; convlib.stub - character conversion library
;;;  
;;;   Copyright (c) 2000-2007  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: convlib.stub,v 1.13 2007-03-22 11:20:15 shirok Exp $
;;;

"#include \"charconv.h\""

(define-cproc ces-conversion-supported? (from to)
  (body <boolean>
        "const char *cfrom = Scm_GetCESName(from, \"from-code\");"
        "const char *cto   = Scm_GetCESName(to, \"to-code\");"
        "SCM_RESULT = Scm_ConversionSupportedP(cfrom, cto);"))

;; NB: :handler interface is experimental.  Do not use it.
(define-cproc open-input-conversion-port (source::<input-port>
                                          from-code
                                          &keyword (to-code #f)
                                                   (buffer-size::<fixnum> 0)
                                                   (owner? #f)
                                                   (handler #f))
  (body "const char *fc = Scm_GetCESName(from_code, \"from-code\");"
        "const char *tc = Scm_GetCESName(to_code, \"to-code\");"
        "SCM_RESULT = "
        "  Scm_MakeInputConversionPort(source, fc, tc, handler, buffer_size,"
        "                              !SCM_FALSEP(ownerP));"))

(define-cproc open-output-conversion-port (sink::<output-port> to-code
                                           &keyword (from-code #f)
                                                    (buffer-size::<fixnum> 0)
                                                    (owner? #f))
  (body "const char *fc = Scm_GetCESName(from_code, \"from-code\");"
        "const char *tc = Scm_GetCESName(to_code, \"to-code\");"
        "SCM_RESULT = "
        "  Scm_MakeOutputConversionPort(sink, tc, fc, buffer_size,"
        "                               !SCM_FALSEP(ownerP));"))

(define-cproc ces-guess-from-string (string::<string> scheme::<string>)
  (body "u_int size;"
        "const char *s = Scm_GetStringContent(string, &size, NULL, NULL);"
        "const char *guessed = Scm_GuessCES(Scm_GetStringConst(scheme),"
        "                                   s, size);"
        "if (guessed) SCM_RESULT = SCM_MAKE_STR(guessed);"
        "else SCM_RESULT = SCM_FALSE;"))

;;; Local variables:
;;; mode: scheme
;;; end:

