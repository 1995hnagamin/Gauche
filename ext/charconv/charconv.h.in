/*
 * charconv.h - character code conversion library
 *
 *  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
 *
 *  Permission to use, copy, modify, distribute this software and
 *  accompanying documentation for any purpose is hereby granted,
 *  provided that existing copyright notices are retained in all
 *  copies and that this notice is included verbatim in all
 *  distributions.
 *  This software is provided as is, without express or implied
 *  warranty.  In no circumstances the author(s) shall be liable
 *  for any damages arising out of the use of this software.
 *
 *  $Id: charconv.h.in,v 1.4 2002-06-05 10:40:41 shirok Exp $
 */

#ifndef GAUCHE_CHARCONV_H
#define GAUCHE_CHARCONV_H

#include <gauche.h>

#ifdef HAVE_ICONV_H
#include <@ICONV_NAME@.h>
#else
/* Dummy definitions */
typedef void *iconv_t;
iconv_t iconv_open(const char *tocode, const char *fromcode);
int iconv_close(iconv_t handle);
int iconv(iconv_t handle, char **inbuf, size_t *inroom, char **outbuf, size_t *outroom);
#endif /* !HAVE_ICONV_H */


#ifdef __cplusplus
extern "C" {
#endif

/* Packaging conversion context info.*/
typedef struct ScmConvInfoRec {
    int inconv;                 /* input conversion type */
    int outconv;                /* output conversion type */
    iconv_t handle;             /* iconv handle, if the conversion is
                                   handled by iconv */
    ScmPort *remote;            /* source or drain port */
    int ownerp;                 /* do I own remote port? */
    int bufsiz;                 /* size of conversion buffer */
    char *buf;                  /* internal conversion buffer */
    char *ptr;                  /* current ptr in the internal conv buf */
    const char *fromCode;       /* convert from ... */
    const char *toCode;         /* conver to ... */
} ScmConvInfo;

/* Constants for internal conversion routine */
enum {
    JCONV_NONE,                 /* no conversion needed. */
    JCONV_SJIS,
    JCONV_UTF8,
    JCONV_ISO2022JP,
    JCONV_ISO2022JP_2,
    JCONV_ISO2022JP_3,
    JCONV_ICONV                 /* use iconv */
};

extern ScmObj Scm_MakeInputConversionPort(ScmPort *source,
                                          const char *fromCode,
                                          const char *toCode,
                                          ScmObj handler,
                                          int bufsiz,
                                          int ownerp);
extern ScmObj Scm_MakeOutputConversionPort(ScmPort *sink,
                                           const char *toCode,
                                           const char *fromCode,
                                           int bufsiz,
                                           int ownerp);

typedef const char *(*ScmCodeGuessingProc)(const char *buf,
                                           int bufsiz,
                                           void *data);

extern const char *Scm_GetCESName(ScmObj code, const char *argname);
extern int Scm_ConversionSupportedP(const char *from, const char *to);

extern void Scm_RegisterCodeGuessingProc(const char *code,
                                         ScmCodeGuessingProc proc,
                                         void *data);

extern const char *Scm_GuessCES(const char *code,
                                const char *buf,
                                int buflen);

extern ScmConvInfo *jconv_open(const char *toCode, const char *fromCode);
extern int jconv_close(ScmConvInfo*);
extern int jconv(ScmConvInfo*, const char **inptr, int *inroom,
                 char **outptr, int *outroom);

#ifdef __cplusplus
}
#endif

#endif /*GAUCHE_CHARCONV_H*/

/*
 * Local variables:
 * mode: c
 * end:
 */
