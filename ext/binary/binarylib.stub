;;;
;;; binaryio.stub - primitive binary i/o interface
;;;  
;;;   Copyright (c) 2004-2007 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: binarylib.stub,v 1.5 2007-02-20 01:32:09 shirok Exp $
;;;

"#include \"binary.h\"
"

(define-type <uvector> "ScmUVector*")

(define-cproc read-u8 (&optional
                       (port::<input-port>? #f)
                       (endian::<symbol>? #f))
  (call "Scm_ReadBinaryU8"))
(define-cproc read-u16 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryU16"))
(define-cproc read-u32 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryU32"))
(define-cproc read-u64 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryU64"))

(define-cproc read-s8 (&optional
                       (port::<input-port>? #f)
                       (endian::<symbol>? #f))
  (call "Scm_ReadBinaryS8"))
(define-cproc read-s16 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryS16"))
(define-cproc read-s32 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryS32"))
(define-cproc read-s64 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryS64"))

(define-cproc write-u8 (intval::<integer>
                        &optional
                        (port::<output-port>? #f)
                        (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryU8"))
(define-cproc write-u16 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryU16"))
(define-cproc write-u32 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryU32"))
(define-cproc write-u64 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryU64"))
(define-cproc write-s8 (intval::<integer>
                        &optional
                        (port::<output-port>? #f)
                        (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryS8"))
(define-cproc write-s16 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryS16"))
(define-cproc write-s32 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryS32"))
(define-cproc write-s64 (intval::<integer>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryS64"))

(define-cproc read-f16 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryF16"))
(define-cproc read-f32 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryF32"))
(define-cproc read-f64 (&optional
                        (port::<input-port>? #f)
                        (endian::<symbol>? #f))
  (call "Scm_ReadBinaryF64"))

(define-cproc write-f16 (val::<number>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryF16"))
(define-cproc write-f32 (val::<number>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryF32"))
(define-cproc write-f64 (val::<number>
                         &optional
                         (port::<output-port>? #f)
                         (endian::<symbol>? #f))
  (call <void> "Scm_WriteBinaryF64"))

(define-cproc get-u8 (v::<uvector> off::<uint>
                                   &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryU8"))
(define-cproc get-s8 (v::<uvector> off::<uint>
                                   &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryS8"))
(define-cproc get-u16 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryU16"))
(define-cproc get-s16 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryS16"))
(define-cproc get-u32 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryU32"))
(define-cproc get-s32 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryS32"))
(define-cproc get-u64 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryU64"))
(define-cproc get-s64 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryS64"))
(define-cproc get-f16 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryF16"))
(define-cproc get-f32 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryF32"))
(define-cproc get-f64 (v::<uvector> off::<uint>
                                    &optional (endian::<symbol>? #f))
  (call "Scm_GetBinaryF64"))
(define-cproc put-u8! (val::<integer> v::<uvector> off::<uint> 
                                      &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryU8"))
(define-cproc put-s8! (val::<integer> v::<uvector> off::<uint>
                                      &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryS8"))
(define-cproc put-u16! (val::<integer> v::<uvector> off::<uint>
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryU16"))
(define-cproc put-s16! (val::<integer> v::<uvector> off::<uint>
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryS16"))
(define-cproc put-u32! (val::<integer> v::<uvector> off::<uint>
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryU32"))
(define-cproc put-s32! (val::<integer> v::<uvector> off::<uint> 
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryS32"))
(define-cproc put-u64! (val::<integer> v::<uvector> off::<uint> 
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryU64"))
(define-cproc put-s64! (val::<integer> v::<uvector> off::<uint> 
                                       &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryS64"))
(define-cproc put-f16! (val v::<uvector> off::<uint>
                            &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryF16"))
(define-cproc put-f32! (val v::<uvector> off::<uint>
                            &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryF32"))
(define-cproc put-f64! (val v::<uvector> off::<uint>
                            &optional (endian::<symbol>? #f))
  (call <void> "Scm_PutBinaryF64"))

;; Local variables:
;; mode: scheme
;; end:
