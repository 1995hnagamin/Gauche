dnl
dnl Configure ext/net
dnl This file is included by the toplevel configure.in
dnl
dnl $Id: net.ac,v 1.2 2003-08-08 09:58:09 shirok Exp $

# ext/net -------------------------------------------------

dnl
dnl process --enable-ipv6
dnl
dnl   Even if you specify --enable-ipv6, we'll check if they are
dnl   really available later, and disable the support if not.
dnl
AC_ARG_ENABLE(ipv6,
  AC_HELP_STRING([--enable-ipv6], [enable IPv6 support]),
  [
    case $enableval in
      no) enable_ipv6=no ;;
      *) enable_ipv6=yes ;;
    esac
  ], [enable_ipv6=no])

dnl
dnl Checks availability of ipv6 support
dnl
if test $enable_ipv6 = yes; then
  AC_CACHE_CHECK([for IPv6], ac_cv_ipv6, [
  AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>], [
  socket(AF_INET6, SOCK_STREAM, 0);
  ], ac_cv_ipv6=yes, ac_cv_ipv6=no)])
  if test "$ac_cv_ipv6" = yes; then
    AC_DEFINE(HAVE_IPV6,1,[Define if you have IPv6 support])
  fi
fi

dnl
dnl Checks if sockaddr_in and sockaddr_in6 has *_len field
dnl

AC_CACHE_CHECK(struct sockaddr_in has sin_len, ac_cv_struct_sockaddr_in_len, [
AC_TRY_COMPILE([#include <netinet/in.h>], [
struct sockaddr_in addr;
int z = addr.sin_len;
], ac_cv_struct_sockaddr_in_len=yes, ac_cv_struct_sockaddr_in_len=no)])

if test "$ac_cv_struct_sockaddr_in_len" = yes; then
AC_DEFINE(HAVE_SIN_LEN,1,[Define if struct sockaddr_in has sin_len])
fi

if test "$ac_cv_ipv6" = yes; then
 AC_CACHE_CHECK(struct sockaddr_in6 has sin6_len, ac_cv_struct_sockaddr_in6_len, [
AC_TRY_COMPILE([#include <netinet/in.h>], [
struct sockaddr_in6 addr;
int z = addr.sin6_len;
], ac_cv_struct_sockaddr_in6_len=yes, ac_cv_struct_sockaddr_in6_len=no)])

if test "$ac_cv_struct_sockaddr_in6_len" = yes; then
AC_DEFINE(HAVE_SIN6_LEN,1,[Define if struct sockaddr_in6 has sin6_len])
fi
fi

dnl
dnl Check for some extra libraries
dnl
AC_SEARCH_LIBS(shutdown, socket)
AC_SEARCH_LIBS(inet_aton, resolv)
AC_SEARCH_LIBS(gethostbyname_r, nsl)

dnl Check for reentrant version synopsis of netdb functions.
dnl   The calling synopsis of netdb functions like gethostbyname_r differ
dnl   among platforms.
AC_CHECK_FUNC(gethostbyname_r)
if test $ac_cv_func_gethostbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyname_r,
                 ac_cv_func_gethostbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &err);
      ], ac_cv_func_gethostbyname_r_nargs=5, [
    ac_cv_func_gethostbyname_r=no])])])
fi

if test $ac_cv_func_gethostbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYNAME_R_NUMARGS, $ac_cv_func_gethostbyname_r_nargs, [Define number of args gethostbyname_r takes])
fi

AC_CHECK_FUNC(gethostbyaddr_r)
if test $ac_cv_func_gethostbyaddr_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyaddr_r,
                 ac_cv_func_gethostbyaddr_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=8, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=7, [
    ac_cv_func_gethostbyaddr_r=no])])])
fi

if test $ac_cv_func_gethostbyaddr_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYADDR_R_NUMARGS, $ac_cv_func_gethostbyaddr_r_nargs, [Define number of args gethostbyaddr_r takes])
fi

AC_CHECK_FUNC(getprotobyname_r)
if test $ac_cv_func_getprotobyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobyname_r,
                 ac_cv_func_getprotobyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobyname_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len);
      ], ac_cv_func_getprotobyname_r_nargs=4, [
    ac_cv_func_getprotobyname_r=no])])])
fi

if test $ac_cv_func_getprotobyname_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNAME_R_NUMARGS, $ac_cv_func_getprotobyname_r_nargs, [Define number of args getprotobyname_r takes])
fi

AC_CHECK_FUNC(getprotobynumber_r)
if test $ac_cv_func_getprotobynumber_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobynumber_r,
                 ac_cv_func_getprotobynumber_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobynumber_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len);
      ], ac_cv_func_getprotobynumber_r_nargs=4, [
    ac_cv_func_getprotobynumber_r=no])])])
fi

if test $ac_cv_func_getprotobynumber_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNUMBER_R_NUMARGS, $ac_cv_func_getprotobynumber_r_nargs, [Define number of args getprotobynumber_r takes])
fi

AC_CHECK_FUNC(getservbyname_r)
if test $ac_cv_func_getservbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyname_r,
                 ac_cv_func_getservbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyname_r_nargs=5, [
    ac_cv_func_getservbyname_r=no])])])
fi

if test $ac_cv_func_getservbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYNAME_R_NUMARGS, $ac_cv_func_getservbyname_r_nargs, [Define number of args getservbyname_r takes])
fi

AC_CHECK_FUNC(getservbyport_r)
if test $ac_cv_func_getservbyport_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyport_r,
                 ac_cv_func_getservbyport_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyport_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyport_r_nargs=5, [
    ac_cv_func_getservbyport_r=no])])])
fi

if test $ac_cv_func_getservbyport_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYPORT_R_NUMARGS, $ac_cv_func_getservbyport_r_nargs, [Define number of args getservbyport_r takes])
fi

TYPE_SOCKLEN_T

dnl Local variables:
dnl mode: autoconf
dnl end:
