;;
;; netlib.stub - network interface
;;
;;  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: netlib.stub,v 1.5 2001-06-15 20:10:31 shirok Exp $
;;

"#include \"net.h\"
"

(define-type "socket-address" socket-address?
  "ScmSockAddr*" "Scm_SockAddrP" "SCM_SOCKADDR")

(define-type "socket" socket?
  "ScmSocket*" "SCM_SOCKETP" "SCM_SOCKET")

;;----------------------------------------------------------
;; Socket address methods

(define-cgeneric sockaddr-name "Scm_GenericSockAddrName" :extern? #t)
(define-cgeneric sockaddr-family "Scm_GenericSockAddrFamily" :extern? #t)

(define-cmethod sockaddr-name ((addr "SCM_CLASS_SOCKADDR"))
  "  SCM_RETURN(SCM_MAKE_STR(\"unknown\"));")

(define-cmethod sockaddr-family ((addr "SCM_CLASS_SOCKADDR"))
  "  SCM_RETURN(SCM_MAKE_KEYWORD(\"unknown\"));")

(define-cmethod sockaddr-name ((addr "SCM_CLASS_SOCKADDR_UN"))
  "  SCM_RETURN(SCM_MAKE_STR(((ScmSockAddrUn*)addr)->addr.sun_path));")

(define-cmethod sockaddr-family ((addr "SCM_CLASS_SOCKADDR_UN"))
  "  SCM_RETURN(SCM_MAKE_KEYWORD(\"unix\"));")

(define-cmethod sockaddr-name ((addr "SCM_CLASS_SOCKADDR_IN"))
  "  ScmSockAddrIn *a = (ScmSockAddrIn*)addr;
    ScmPort *out = SCM_PORT(Scm_MakeOutputStringPort());
    uint32_t inaddr = htonl(a->addr.sin_addr.s_addr);

    /* NB: avoid using inet_ntoa(), which uses static buffer */
    Scm_Printf(out, \"%d.%d.%d.%d:%d\",
               ((inaddr>>24)&0xff),
               ((inaddr>>16)&0xff),
               ((inaddr>>8)&0xff),
               ((inaddr>>0)&0xff),
               ntohs(a->addr.sin_port));
    SCM_RETURN(Scm_GetOutputString(out));")

(define-cmethod sockaddr-family ((addr "SCM_CLASS_SOCKADDR_IN"))
  "  SCM_RETURN(SCM_MAKE_KEYWORD(\"inet\"));")

;;----------------------------------------------------------
;; low-level socket routines

(define-cproc make-socket (domain type &optional (protocol 0))
  (assert (small-integer? domain))
  (assert (small-integer? type))
  (assert (small-integer? protocol))
  "  SCM_RETURN(Scm_MakeSocket(domain, type, protocol));")

(define-symbol PF_UNIX "sym_pf_unix" "Scm_MakeInteger(PF_UNIX)")
(define-symbol PF_INET "sym_pf_inet" "Scm_MakeInteger(PF_INET)")

(define-symbol SOCK_STREAM "sym_sock_stream" "Scm_MakeInteger(SOCK_STREAM)")
(define-symbol SOCK_DGRAM  "sym_sock_dgram" "Scm_MakeInteger(SOCK_DGRAM)")
(define-symbol SOCK_RAW    "sym_sock_raw" "Scm_MakeInteger(SOCK_RAW)")

(define-cproc socket-address (sock)
  (assert (socket? sock))
  "  if (sock->address) { SCM_RETURN(SCM_OBJ(sock->address)); }
  else { SCM_RETURN(SCM_FALSE); }")

(define-symbol NONE      "sym_none")
(define-symbol BOUND     "sym_bound")
(define-symbol LISTENING "sym_listening")
(define-symbol CONNECTED "sym_connected")
(define-symbol SHUTDOWN  "sym_shutdown")
(define-symbol CLOSED    "sym_closed")

(define-cproc socket-status (sock)
  (assert (socket? sock))
  "  switch (sock->status) {
  case SCM_SOCKET_STATUS_NONE:      SCM_RETURN(sym_none);
  case SCM_SOCKET_STATUS_BOUND:     SCM_RETURN(sym_bound);
  case SCM_SOCKET_STATUS_LISTENING: SCM_RETURN(sym_listening);
  case SCM_SOCKET_STATUS_CONNECTED: SCM_RETURN(sym_connected);
  case SCM_SOCKET_STATUS_SHUTDOWN:  SCM_RETURN(sym_shutdown);
  case SCM_SOCKET_STATUS_CLOSED:    SCM_RETURN(sym_closed);
  default: Scm_Error(\"invalid state of socket %S: implementation bugs?\",
                     sock);
           SCM_RETURN(SCM_UNDEFINED); /* dummy */
  }")

(define-cproc socket-input-port (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketInputPort(sock));")

(define-cproc socket-output-port (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketOutputPort(sock));")

(define-cproc socket-shutdown (sock &optional (how 2))
  (assert (socket? sock))
  (assert (small-integer? how))
  "  SCM_RETURN(Scm_SocketShutdown(sock, how));")
  
(define-cproc socket-close (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketClose(sock));")

(define-cproc socket-bind (sock addr)
  (assert (socket? sock))
  (assert (socket-address? addr))
  "  SCM_RETURN(Scm_SocketBind(sock, addr));")

(define-cproc socket-listen (sock backlog)
  (assert (socket? sock))
  (assert (small-integer? backlog))
  "  SCM_RETURN(Scm_SocketListen(sock, backlog));")

(define-cproc socket-accept (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketAccept(sock));")

(define-cproc socket-connect (sock addr)
  (assert (socket? sock))
  (assert (socket-address? addr))
  "  SCM_RETURN(Scm_SocketConnect(sock, addr));")

;; socket option interface

(define-cproc socket-setsockopt (sock level option value)
  (assert (socket? sock))
  (assert (small-integer? level))
  (assert (small-integer? option))
  "  SCM_RETURN(Scm_SocketSetOpt(sock, level, option, value));")

(define-cproc socket-getsockopt (sock level option rsize)
  (assert (socket? sock))
  (assert (small-integer? level))
  (assert (small-integer? option))
  (assert (small-integer? rsize))
  "  SCM_RETURN(Scm_SocketGetOpt(sock, level, option, rsize));")

;; Local variables:
;; mode: scheme
;; end:
