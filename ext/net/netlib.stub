;;
;; netlib.stub - network interface
;;
;;  Copyright(C) 2001 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: netlib.stub,v 1.2 2001-06-12 10:20:45 shirok Exp $
;;

"#include \"net.h\"
"

(define-type "socket-address" socket-address?
  "ScmSockAddr*" "Scm_SockAddrP" "SCM_SOCKADDR")

(define-type "socket" socket?
  "ScmSocket*" "SCM_SOCKETP" "SCM_SOCKET")

;;----------------------------------------------------------
;; low-level socket routines

(define-cproc make-socket (domain type &optional (protocol 0))
  (assert (small-integer? domain))
  (assert (small-integer? type))
  (assert (small-integer? protocol))
  "  SCM_RETURN(Scm_MakeSocket(domain, type, protocol));")

(define-symbol PF_UNIX "sym_pf_unix" "Scm_MakeInteger(PF_UNIX)")
(define-symbol PF_INET "sym_pf_inet" "Scm_MakeInteger(PF_INET)")

(define-symbol SOCK_STREAM "sym_sock_stream" "Scm_MakeInteger(SOCK_STREAM)")
(define-symbol SOCK_DGRAM  "sym_sock_dgram" "Scm_MakeInteger(SOCK_DGRAM)")
(define-symbol SOCK_RAW    "sym_sock_raw" "Scm_MakeInteger(SOCK_RAW)")

(define-cproc socket-shutdown (sock &optional (how 2))
  (assert (socket? sock))
  (assert (small-integer? how))
  "  SCM_RETURN(Scm_SocketShutdown(sock, how));")
  
(define-cproc socket-close (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketClose(sock));")

(define-cproc socket-bind (sock addr)
  (assert (socket? sock))
  (assert (socket-address? addr))
  "  SCM_RETURN(Scm_SocketBind(sock, addr));")

(define-cproc socket-listen (sock backlog)
  (assert (socket? sock))
  (assert (small-integer? backlog))
  "  SCM_RETURN(Scm_SocketListen(sock, backlog));")

(define-cproc socket-accept (sock)
  (assert (socket? sock))
  "  SCM_RETURN(Scm_SocketAccept(sock));")

(define-cproc socket-connect (sock addr)
  (assert (socket? sock))
  (assert (socket-address? addr))
  "  SCM_RETURN(Scm_SocketConnect(sock, addr));")

;; Local variables:
;; mode: scheme
;; end:
