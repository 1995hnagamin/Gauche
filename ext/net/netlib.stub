;;
;; netlib.stub - network interface
;;
;;  Copyright(C) 2001-2003 by Shiro Kawai (shiro@acm.org)
;;
;;  Permission to use, copy, modify, distribute this software and
;;  accompanying documentation for any purpose is hereby granted,
;;  provided that existing copyright notices are retained in all
;;  copies and that this notice is included verbatim in all
;;  distributions.
;;  This software is provided as is, without express or implied
;;  warranty.  In no circumstances the author(s) shall be liable
;;  for any damages arising out of the use of this software.
;;
;;  $Id: netlib.stub,v 1.19 2003-02-05 01:44:34 shirok Exp $
;;

"#include \"net.h\"
"

(define-type <socket-address> "ScmSockAddr*" "socket address"
  "Scm_SockAddrP" "SCM_SOCKADDR")

(define-type <socket> "ScmSocket*")

;;----------------------------------------------------------
;; Socket address methods

(define-cgeneric sockaddr-name "Scm_GenericSockAddrName" (extern))
(define-cgeneric sockaddr-family "Scm_GenericSockAddrFamily" (extern))

(define-symbol unix "sym_unix")
(define-symbol inet "sym_inet")
(define-symbol unknown "sym_unknown")

(define-cmethod sockaddr-name ((addr "Scm_SockAddrClass"))
  "  SCM_RETURN(SCM_MAKE_STR(\"unknown\"));")

(define-cmethod sockaddr-family ((addr "Scm_SockAddrClass"))
  "  SCM_RETURN(sym_unknown);")

(define-cmethod sockaddr-name ((addr "Scm_SockAddrUnClass"))
  "  SCM_RETURN(SCM_MAKE_STR(((ScmSockAddrUn*)addr)->addr.sun_path));")

(define-cmethod sockaddr-family ((addr "Scm_SockAddrUnClass"))
  "  SCM_RETURN(sym_unix);")

(define-cmethod sockaddr-name ((addr "Scm_SockAddrInClass"))
  "  ScmSockAddrIn *a = (ScmSockAddrIn*)addr;
    ScmPort *out = SCM_PORT(Scm_MakeOutputStringPort(TRUE));
    unsigned long inaddr = htonl(a->addr.sin_addr.s_addr);

    /* NB: avoid using inet_ntoa(), which uses static buffer */
    Scm_Printf(out, \"%d.%d.%d.%d:%d\",
               ((inaddr>>24)&0xff),
               ((inaddr>>16)&0xff),
               ((inaddr>>8)&0xff),
               ((inaddr>>0)&0xff),
               ntohs(a->addr.sin_port));
    SCM_RETURN(Scm_GetOutputStringUnsafe(out));")

(define-cmethod sockaddr-family ((addr "Scm_SockAddrInClass"))
  "  SCM_RETURN(sym_inet);")

;;----------------------------------------------------------
;; low-level socket routines

(define-cproc make-socket (domain::<fixnum> type::<fixnum>
                                            &optional (protocol::<fixnum> 0))
  (return "Scm_MakeSocket"))

(define-enum PF_UNIX)
(define-enum PF_INET)

(define-enum AF_UNIX)
(define-enum AF_INET)

(define-enum SOCK_STREAM)
(define-enum SOCK_DGRAM)
(define-enum SOCK_RAW)

(define-cproc socket-address (sock::<socket>)
  "  if (sock->address) { SCM_RETURN(SCM_OBJ(sock->address)); }
  else { SCM_RETURN(SCM_FALSE); }")

(define-symbol NONE      "sym_none")
(define-symbol BOUND     "sym_bound")
(define-symbol LISTENING "sym_listening")
(define-symbol CONNECTED "sym_connected")
(define-symbol SHUTDOWN  "sym_shutdown")
(define-symbol CLOSED    "sym_closed")

(define-cproc socket-status (sock::<socket>)
  "  switch (sock->status) {
  case SCM_SOCKET_STATUS_NONE:      SCM_RETURN(sym_none);
  case SCM_SOCKET_STATUS_BOUND:     SCM_RETURN(sym_bound);
  case SCM_SOCKET_STATUS_LISTENING: SCM_RETURN(sym_listening);
  case SCM_SOCKET_STATUS_CONNECTED: SCM_RETURN(sym_connected);
  case SCM_SOCKET_STATUS_SHUTDOWN:  SCM_RETURN(sym_shutdown);
  case SCM_SOCKET_STATUS_CLOSED:    SCM_RETURN(sym_closed);
  default: Scm_Error(\"invalid state of socket %S: implementation bugs?\",
                     sock);
           SCM_RETURN(SCM_UNDEFINED); /* dummy */
  }")

(define-cproc socket-fd (sock::<socket>)
  "  SCM_RETURN(Scm_MakeInteger(sock->fd));")

;; NB: buffered? keyword args in the following two procedures are
;; deprecated; use buffering arg.
(define-cproc socket-input-port (sock::<socket>
                                 &keyword (buffering #f) (buffered? #f))
  " int bufmode;
  if (!SCM_FALSEP(bufferedP)) { /*for backward compatibility */
    bufmode = SCM_PORT_BUFFER_FULL;
  } else {
    bufmode = Scm_BufferingMode(buffering, SCM_PORT_INPUT, SCM_PORT_BUFFER_LINE);
  }
  SCM_RETURN(Scm_SocketInputPort(sock, bufmode));")

(define-cproc socket-output-port (sock::<socket>
                                  &keyword (buffering #f) (buffered? #f))
  " int bufmode;
  if (!SCM_FALSEP(bufferedP)) { /* for backward compatibility */
    bufmode = SCM_PORT_BUFFER_FULL;
  } else {
    bufmode = Scm_BufferingMode(buffering, SCM_PORT_INPUT, SCM_PORT_BUFFER_LINE);
  }
  SCM_RETURN(Scm_SocketOutputPort(sock, bufmode));")

(define-cproc socket-shutdown (sock::<socket> &optional (how::<fixnum> 2))
  (return "Scm_SocketShutdown"))
  
(define-cproc socket-close (sock::<socket>)
  (return "Scm_SocketClose"))

(define-cproc socket-bind (sock::<socket> addr::<socket-address>)
  (return "Scm_SocketBind"))

(define-cproc socket-listen (sock::<socket> backlog::<fixnum>)
  (return "Scm_SocketListen"))

(define-cproc socket-accept (sock::<socket>)
  (return "Scm_SocketAccept"))

(define-cproc socket-connect (sock::<socket> addr::<socket-address>)
  (return "Scm_SocketConnect"))

;; socket option interface

(define-cproc socket-setsockopt (sock::<socket>
                                 level::<fixnum> option::<fixnum> value)
  (return "Scm_SocketSetOpt"))

(define-cproc socket-getsockopt (sock::<socket>
                                 level::<fixnum> option::<fixnum>
                                 rsize::<fixnum>)
  (return "Scm_SocketGetOpt"))

;;----------------------------------------------------------
;; netdb routines

(define-cproc sys-gethostbyname (name::<string>)
  "  SCM_RETURN(Scm_GetHostByName(Scm_GetStringConst(name)));")

(define-cproc sys-gethostbyaddr (addr::<string> type::<fixnum>)
  "  SCM_RETURN(Scm_GetHostByAddr(Scm_GetStringConst(addr), type));")

(define-cproc sys-getprotobyname (name::<string>)
  "  SCM_RETURN(Scm_GetProtoByName(Scm_GetStringConst(name)));")

(define-cproc sys-getprotobynumber (number::<fixnum>)
  "  SCM_RETURN(Scm_GetProtoByNumber(number));")

(define-cproc sys-getservbyname (name::<string> proto::<string>)
  "  SCM_RETURN(Scm_GetServByName(Scm_GetStringConst(name), Scm_GetStringConst(proto)));")

(define-cproc sys-getservbyport (port::<fixnum> proto::<string>)
  "  SCM_RETURN(Scm_GetServByPort(port, Scm_GetStringConst(proto)));")

;; Local variables:
;; mode: scheme
;; end:
