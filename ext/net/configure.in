dnl
dnl Example of configuring Gauche extension
dnl
dnl $Id: configure.in,v 1.5 2001-06-21 07:34:07 shirok Exp $
AC_INIT(net.c)
AC_CONFIG_HEADER(netconfig.h)

dnl Determine if we're configuring inside of Gauche main source tree or not.
if test -f ../../src/gauche.h; then
  GAUCHE_CONFIG="sh ../../src/gauche-config"
  GAUCHE_TOP='../../'
  GAUCHE_INC="-I../../src -I../../gc"
  GOSH="../../src/gosh -I../../src -I../../lib"
else
  GAUCHE_CONFIG=gauche-config
  GAUCHE_TOP=
  GAUCHE_INC=`gauche-config -I`
  GOSH=gosh
fi
AC_SUBST(GAUCHE_CONFIG)
AC_SUBST(GAUCHE_TOP)
AC_SUBST(GAUCHE_INC)
AC_SUBST(GOSH)

dnl A user has a choice to install the module into Gauche system directory
dnl or site local directory, by setting environment variable INSTALL_TYPE
dnl to either 'sys' or 'site'.   The variable can be overridden at make time.
: ${INSTALL_TYPE=site}  dnl This sets the default.
AC_SUBST(INSTALL_TYPE)

dnl Get compiler parameters which Gauche has been compiled with.
CC="`$GAUCHE_CONFIG --cc`"
AC_SUBST(CC)
CFLAGS="$CFLAGS $GAUCHE_INC `$GAUCHE_CONFIG --so-cflags`"

dnl Check for other programs.
AC_PROG_INSTALL

dnl Check if we need -lsocket for socket related libraries
AC_SEARCH_LIBS(shutdown, socket)

dnl Check for reentrant version synopsis of netdb functions.
dnl   The calling synopsis of netdb functions like gethostbyname_r differ
dnl   among platforms.
AC_CACHE_CHECK(number of arguments for gethostbyname_r,
               ac_cv_func_gethostbyname_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
    (void)gethostbyname_r(n, h, buf, len, &r, &err);
    ], ac_cv_func_gethostbyname_r=6, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; struct hostent *h; char buf[4096]; int len=4096; int err;
    (void)gethostbyname_r(n, h, buf, len, &err);
    ], ac_cv_func_gethostbyname_r=5, [
  AC_TRY_COMPILE([#include <netdb.h>],[
    char *n; struct hostent *h; struct hostent_data d;
    (void)gethostbyname_r(n, h, &d);
    ], ac_cv_func_gethostbyname_r=3, [
  ac_cv_func_gethostbyname_r=no])])])])

if test $ac_cv_func_gethostbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYNAME_R_NUMARGS, $ac_cv_func_gethostbyname_r)
fi

AC_CACHE_CHECK(number of arguments for gethostbyaddr_r,
               ac_cv_func_gethostbyaddr_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; int addrlen, type; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
    (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &r, &err);
    ], ac_cv_func_gethostbyaddr_r=8, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; int addrlen, type; struct hostent *h; char buf[4096]; int len=4096; int err;
    (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &err);
    ], ac_cv_func_gethostbyaddr_r=7, [
  ac_cv_func_gethostbyaddr_r=no])])])

if test $ac_cv_func_gethostbyaddr_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYADDR_R_NUMARGS, $ac_cv_func_gethostbyaddr_r)
fi

AC_CACHE_CHECK(number of arguments for getprotobyname_r,
               ac_cv_func_getprotobyname_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; struct protoent *h, *r; char buf[4096]; int len=4096;
    (void)getprotobyname_r(n, h, buf, len, &r);
    ], ac_cv_func_getprotobyname_r=5, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n; struct protoent *h; char buf[4096]; int len=4096;
    (void)getprotobyname_r(n, h, buf, len);
    ], ac_cv_func_getprotobyname_r=4, [
  ac_cv_func_getprotobyname_r=no])])])

if test $ac_cv_func_getprotobyname_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNAME_R_NUMARGS, $ac_cv_func_getprotobyname_r)
fi

AC_CACHE_CHECK(number of arguments for getprotobynumber_r,
               ac_cv_func_getprotobynumber_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    int n; struct protoent *h, *r; char buf[4096]; int len=4096;
    (void)getprotobynumber_r(n, h, buf, len, &r);
    ], ac_cv_func_getprotobynumber_r=5, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    int n; struct protoent *h; char buf[4096]; int len=4096;
    (void)getprotobynumber_r(n, h, buf, len);
    ], ac_cv_func_getprotobynumber_r=4, [
  ac_cv_func_getprotobynumber_r=no])])])

if test $ac_cv_func_getprotobynumber_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNUMBER_R_NUMARGS, $ac_cv_func_getprotobynumber_r)
fi

AC_CACHE_CHECK(number of arguments for getservbyname_r,
               ac_cv_func_getservbyname_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n, *p; struct servent *h, *r; char buf[4096]; int len=4096;
    (void)getservbyname_r(n, p, h, buf, len, &r);
    ], ac_cv_func_getservbyname_r=6, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    char *n, *p; struct servent *h; char buf[4096]; int len=4096;
    (void)getservbyname_r(n, p, h, buf, len);
    ], ac_cv_func_getservbyname_r=5, [
  ac_cv_func_getservbyname_r=no])])])

if test $ac_cv_func_getservbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYNAME_R_NUMARGS, $ac_cv_func_getservbyname_r)
fi

AC_CACHE_CHECK(number of arguments for getservbyport_r,
               ac_cv_func_getservbyport_r, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    int n; char *p; struct servent *h, *r; char buf[4096]; int len=4096;
    (void)getservbyport_r(n, p, h, buf, len, &r);
    ], ac_cv_func_getservbyport_r=6, [
  AC_TRY_COMPILE([#include <netdb.h>], [
    int n; char *p; struct servent *h; char buf[4096]; int len=4096;
    (void)getservbyport_r(n, p, h, buf, len);
    ], ac_cv_func_getservbyport_r=5, [
  ac_cv_func_getservbyport_r=no])])])

if test $ac_cv_func_getservbyport_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYPORT_R_NUMARGS, $ac_cv_func_getservbyport_r)
fi

dnl Set LDFLAGS to generate shared library.
dnl This has to come after all the tests that requre linking, or those test
dnl will fail because they can't generate stand-alone executable.
LDFLAGS="$LDFLAGS `$GAUCHE_CONFIG --so-ldflags`"

dnl Output
AC_OUTPUT(Makefile)
