dnl
dnl Configuring gauche.net extension
dnl  process this file with "autoconf -l ../.." to generate 'configure'.
dnl $Id: configure.in,v 1.16 2002-07-18 10:52:22 shirok Exp $
AC_INIT(net.c)
AC_CONFIG_HEADER(netconfig.h)
AC_CANONICAL_SYSTEM
AC_GAUCHE_INIT_EXT

# Sets the default value of INSTALL_TYPE macro.
AC_GAUCHE_INSTALL_TYPE(sys)

# Get compiler parameters which Gauche has been compiled with.
AC_GAUCHE_CC
AC_GAUCHE_FLAGS
AC_GAUCHE_OPTFLAGS

# Check for other programs.
AC_PROG_INSTALL

# Check for headers
AC_CHECK_HEADERS(rpc/types.h)

# Check if we need -lsocket for socket related libraries
AC_SEARCH_LIBS(shutdown, socket)
AC_SEARCH_LIBS(inet_aton, resolv)
AC_SEARCH_LIBS(gethostbyname_r, nsl)

# Check for reentrant version synopsis of netdb functions.
#   The calling synopsis of netdb functions like gethostbyname_r differ
#   among platforms.
AC_CHECK_FUNC(gethostbyname_r)
if test $ac_cv_func_gethostbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyname_r,
                 ac_cv_func_gethostbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &err);
      ], ac_cv_func_gethostbyname_r_nargs=5, [
    ac_cv_func_gethostbyname_r=no])])])
fi

if test $ac_cv_func_gethostbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYNAME_R_NUMARGS, $ac_cv_func_gethostbyname_r_nargs)
fi

AC_CHECK_FUNC(gethostbyaddr_r)
if test $ac_cv_func_gethostbyaddr_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyaddr_r,
                 ac_cv_func_gethostbyaddr_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=8, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=7, [
    ac_cv_func_gethostbyaddr_r=no])])])
fi

if test $ac_cv_func_gethostbyaddr_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYADDR_R_NUMARGS, $ac_cv_func_gethostbyaddr_r_nargs)
fi

AC_CHECK_FUNC(getprotobyname_r)
if test $ac_cv_func_getprotobyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobyname_r,
                 ac_cv_func_getprotobyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobyname_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len);
      ], ac_cv_func_getprotobyname_r_nargs=4, [
    ac_cv_func_getprotobyname_r=no])])])
fi

if test $ac_cv_func_getprotobyname_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNAME_R_NUMARGS, $ac_cv_func_getprotobyname_r_nargs)
fi

AC_CHECK_FUNC(getprotobynumber_r)
if test $ac_cv_func_getprotobynumber_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobynumber_r,
                 ac_cv_func_getprotobynumber_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobynumber_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len);
      ], ac_cv_func_getprotobynumber_r_nargs=4, [
    ac_cv_func_getprotobynumber_r=no])])])
fi

if test $ac_cv_func_getprotobynumber_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNUMBER_R_NUMARGS, $ac_cv_func_getprotobynumber_r_nargs)
fi

AC_CHECK_FUNC(getservbyname_r)
if test $ac_cv_func_getservbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyname_r,
                 ac_cv_func_getservbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyname_r_nargs=5, [
    ac_cv_func_getservbyname_r=no])])])
fi

if test $ac_cv_func_getservbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYNAME_R_NUMARGS, $ac_cv_func_getservbyname_r_nargs)
fi

AC_CHECK_FUNC(getservbyport_r)
if test $ac_cv_func_getservbyport_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyport_r,
                 ac_cv_func_getservbyport_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyport_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyport_r_nargs=5, [
    ac_cv_func_getservbyport_r=no])])])
fi

if test $ac_cv_func_getservbyport_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYPORT_R_NUMARGS, $ac_cv_func_getservbyport_r_nargs)
fi

# Set LDFLAGS to generate shared library.
AC_GAUCHE_FIX_LIBS

# Output
AC_GAUCHE_EXT_FIXUP(net)
AC_OUTPUT(Makefile)
