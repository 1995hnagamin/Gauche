;;;
;;; thrlib.stub - thread interface functions
;;;  
;;;   Copyright (c) 2000-2005 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: thrlib.stub,v 1.9 2005-08-01 12:23:34 shirok Exp $
;;;

"
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/exception.h>
#include \"threads.h\"
"

;;===============================================================
;; System query
;;

(define-symbol pthread "sym_pthread")
(define-symbol none    "sym_none")

(define-cproc gauche-thread-type ()
  "#ifdef GAUCHE_USE_PTHREADS
  SCM_RETURN(sym_pthread);
#else
  SCM_RETURN(sym_none);
#endif")

;;===============================================================
;; Basic thread interface
;;

(define-cproc thread? (obj) (call <boolean> "SCM_VMP"))

(define-cproc thread-name (vm::<thread>)
  (expr "vm->name"))

(define-cproc thread-specific (vm::<thread>)
  (expr "vm->specific"))

(define-cproc thread-specific-set! (vm::<thread> obj)
  (body <void> "vm->specific = obj;"))

(define-cproc make-thread (thunk::<procedure> &optional (name #f))
  (call "Scm_MakeThread"))

(define-cproc thread-start! (vm::<thread>)
  (call "Scm_ThreadStart"))

(define-cproc thread-yield! ()
  (call "Scm_ThreadYield"))

(define-cproc thread-sleep! (timeout)
  (call "Scm_ThreadSleep"))

(define-cproc thread-join! (vm::<thread> &optional (timeout #f) timeout-val)
  (call "Scm_ThreadJoin"))

(define-cproc thread-terminate! (vm::<thread>)
  (call "Scm_ThreadTerminate"))

;;===============================================================
;; Mutex
;;

(define-cproc make-mutex (&optional (name #f))
  (call "Scm_MakeMutex"))

(define-cproc mutex? (obj)
  (call <boolean> "SCM_MUTEXP"))

(define-symbol not-owned "sym_not_owned")
(define-symbol abandoned "sym_abandoned")
(define-symbol not-abandoned "sym_not_abandoned")

(define-cproc mutex-state (mutex::<mutex>)
  "ScmObj r;
  (void)SCM_INTERNAL_MUTEX_LOCK(mutex->mutex);
  if (mutex->locked) {
    if (mutex->owner) {
      if (mutex->owner->state == SCM_VM_TERMINATED) r = sym_abandoned;
      else r = SCM_OBJ(mutex->owner);
    } else {
      r = sym_not_owned;
    }
  } else {
    r = sym_not_abandoned;
  }
  (void)SCM_INTERNAL_MUTEX_UNLOCK(mutex->mutex);
  SCM_RETURN(r);")

(define-cproc mutex-lock! (mutex::<mutex> &optional (timeout #f) thread)
  "ScmVM *owner = NULL;
  if (SCM_VMP(thread)) owner = SCM_VM(thread);
  else if (SCM_UNBOUNDP(thread)) owner = Scm_VM();
  else if (!SCM_FALSEP(thread)) Scm_Error(\"thread or #f required, but got %S\", thread);
  SCM_RETURN(Scm_MutexLock(mutex, timeout, owner));")
  
(define-cproc mutex-unlock! (mutex::<mutex> &optional (cv #f) (timeout #f))
  "ScmConditionVariable *cond = NULL;
  if (SCM_CONDITION_VARIABLE_P(cv)) cond = SCM_CONDITION_VARIABLE(cv);
  else if (!SCM_FALSEP(cv)) Scm_Error(\"condition variable or #f required, but got %S\", cv);
  SCM_RETURN(Scm_MutexUnlock(mutex, cond, timeout));")

(define-cproc mutex-specific (mutex::<mutex>)
  (expr "mutex->specific"))

(define-cproc mutex-specific-set! (mutex::<mutex> obj)
  (body <void> "mutex->specific = obj;"))

(define-cproc mutex-name (mutex::<mutex>)
  (expr "mutex->name"))

;;===============================================================
;; Condition variable
;;

(define-cproc make-condition-variable (&optional (name #f))
  (call "Scm_MakeConditionVariable"))

(define-cproc condition-variable? (obj)
  (call <boolean> "SCM_CONDITION_VARIABLE_P"))

(define-cproc condition-variable-name (cv::<condition-variable>)
  (expr "cv->name"))

(define-cproc condition-variable-specific (cv::<condition-variable>)
  (expr "cv->specific"))

(define-cproc condition-variable-specific-set! (cv::<condition-variable> obj)
  (body <void> "cv->specific = obj;"))

(define-cproc condition-variable-signal! (cv::<condition-variable>)
  (call "Scm_ConditionVariableSignal"))

(define-cproc condition-variable-broadcast! (cv::<condition-variable>)
  (call "Scm_ConditionVariableBroadcast"))

;;===============================================================
;; Thread exceptions
;;

"static ScmObj thread_exception_allocate(ScmClass *klass, ScmObj initargs)
 {
    ScmThreadException *e = SCM_ALLOCATE(ScmThreadException, klass);
    SCM_SET_CLASS(e, klass);
    e->thread = NULL;
    e->data = SCM_UNDEFINED;
    return SCM_OBJ(e);
 }"

"static void thread_exception_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmClass *k = SCM_CLASS_OF(obj);
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   if (SCM_UNDEFINEDP(exc->data)) {
     Scm_Printf(port, \"#<%A %S>\", Scm__InternalClassName(k), SCM_OBJ_SAFE(exc->thread));
   } else {
     Scm_Printf(port, \"#<%A %S %S>\", Scm__InternalClassName(k), SCM_OBJ_SAFE(exc->thread), exc->data);
   }
 }"

"static void uncaught_exception_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   Scm_Printf(port, \"#<uncaught-exception in thread %S: %S>\", SCM_OBJ_SAFE(exc->thread), exc->data);
 }"

"static void terminated_thread_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   Scm_Printf(port, \"#<terminated-thread-exception: %S terminated by %S>\", SCM_OBJ_SAFE(exc->thread), exc->data);
 }"

"static ScmClass *thread_exception_cpa[] = {
   SCM_CLASS_STATIC_PTR(Scm_ThreadExceptionClass),
   SCM_CLASS_STATIC_PTR(Scm_ConditionClass),
   SCM_CLASS_STATIC_PTR(Scm_TopClass),
   NULL
 };"

(define-cclass <thread-exception>
  "ScmThreadException*" "Scm_ThreadExceptionClass"
  ("Scm_ConditionClass")
  ((thread :type <thread>))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <join-timeout-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <join-timeout-exception>
  "ScmThreadException*" "Scm_JoinTimeoutExceptionClass"
  (c "thread_exception_cpa")
  ()
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <abandoned-mutex-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <abandoned-mutex-exception>
  "ScmThreadException*" "Scm_AbandonedMutexExceptionClass"
  (c "thread_exception_cpa")
  ((mutex  :c-name "data"))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <terminated-thread-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <terminated-thread-exception>
  "ScmThreadException*" "Scm_TerminatedThreadExceptionClass"
  (c "thread_exception_cpa")
  ((terminator :c-name "data"))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "terminated_thread_print")))

(define-type <uncaught-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <uncaught-exception>
  "ScmThreadException*" "Scm_UncaughtExceptionClass"
  (c "thread_exception_cpa")
  ((reason :c-name data))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "uncaught_exception_print")))

;; Local variables:
;; mode: scheme
;; end:
