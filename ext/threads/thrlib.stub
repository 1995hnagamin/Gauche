;;;
;;; thrlib.stub - thread interface functions
;;;  
;;;   Copyright (c) 2000-2009  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: thrlib.stub,v 1.12 2008-05-10 13:35:45 shirok Exp $
;;;

"
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/exception.h>
#include \"threads.h\"
"

;;===============================================================
;; System query
;;

(define-cproc gauche-thread-type ()
  (|#if| "defined(GAUCHE_USE_PTHREADS)"
         (result 'pthread)
         (result 'none)))

;;===============================================================
;; Basic thread interface
;;

(define-cproc thread? (obj) ::<boolean> SCM_VMP)

(define-cproc thread-state (vm::<thread>)
  (case (-> vm state)
    [(SCM_VM_NEW)       (result 'new)]
    [(SCM_VM_RUNNABLE)  (result 'runnable)]
    [(SCM_VM_STOPPED)   (result 'stopped)]
    [(SCM_VM_TERMINATED)(result 'terminated)]
    [else (Scm_Error "[internal] thread state has invalid value: %d"
                     (-> vm state))]))

(define-cproc thread-name (vm::<thread>) (result (-> vm name)))

(define-cproc thread-specific (vm::<thread>) (result (-> vm specific)))

(define-cproc thread-specific-set! (vm::<thread> obj) ::<void>
  (set! (-> vm specific) obj))

(define-cproc make-thread (thunk::<procedure> :optional (name #f))
  Scm_MakeThread)

(define-cproc thread-start! (vm::<thread>) Scm_ThreadStart)

(define-cproc thread-yield! () ::<void> Scm_YieldCPU)

(define-cproc thread-sleep! (timeout) Scm_ThreadSleep)

(define-cproc thread-join! (vm::<thread> :optional (timeout #f) timeout-val)
  Scm_ThreadJoin)

(define-cproc thread-terminate! (vm::<thread>) Scm_ThreadTerminate)

(define-cproc thread-stop! (target::<thread>
                            :optional (timeout #f) (timeout-val #f))
  Scm_ThreadStop)

(define-cproc thread-cont! (target::<thread>) Scm_ThreadCont)

;;===============================================================
;; Mutex
;;

(define-cproc make-mutex (:optional (name #f)) Scm_MakeMutex)

(define-cproc mutex? (obj) ::<boolean> SCM_MUTEXP)

(define-cise-stmt with-mutex
  [(_ mutex . form)
   `(begin
      (cast void (SCM_INTERNAL_MUTEX_LOCK ,mutex))
      ,@form
      (cast void (SCM_INTERNAL_MUTEX_UNLOCK ,mutex)))])

(define-cproc mutex-state (mutex::<mutex>)
  (let* ([r])
    (with-mutex
     (-> mutex mutex)
     (if (-> mutex locked)
       (if (-> mutex owner)
         (if (== (-> mutex owner state) SCM_VM_TERMINATED)
           (set! r 'abandoned)
           (set! r (SCM_OBJ (-> mutex owner))))
         (set! r 'not-owned))
       (set! r 'not-abandoned)))
    (result r)))

(define-cproc mutex-lock! (mutex::<mutex> :optional (timeout #f) thread)
  (let* ([owner::ScmVM* NULL])
    (cond [(SCM_VMP thread) (set! owner (SCM_VM thread))]
          [(SCM_UNBOUNDP thread) (set! owner (Scm_VM))]
          [(not (SCM_FALSEP thread)) (SCM_TYPE_ERROR thread "thread or #f")])
    (result (Scm_MutexLock mutex timeout owner))))
  
(define-cproc mutex-unlock! (mutex::<mutex> :optional (cv #f) (timeout #f))
  (let* ([cond::ScmConditionVariable* NULL])
    (cond [(SCM_CONDITION_VARIABLE_P cv) (set! cond (SCM_CONDITION_VARIABLE cv))]
          [(not (SCM_FALSEP cv)) (SCM_TYPE_ERROR cv "condition variale or #f")])
    (result (Scm_MutexUnlock mutex cond timeout))))

(define-cproc mutex-specific (mutex::<mutex>) (result (-> mutex specific)))

(define-cproc mutex-specific-set! (mutex::<mutex> obj) ::<void>
  (set! (-> mutex specific) obj))

(define-cproc mutex-name (mutex::<mutex>) (result (-> mutex name)))

;;===============================================================
;; Condition variable
;;

(define-cproc make-condition-variable (:optional (name #f))
  Scm_MakeConditionVariable)

(define-cproc condition-variable? (obj) ::<boolean>
  SCM_CONDITION_VARIABLE_P)

(define-cproc condition-variable-name (cv::<condition-variable>)
  (result (-> cv name)))

(define-cproc condition-variable-specific (cv::<condition-variable>)
  (result (-> cv specific)))

(define-cproc condition-variable-specific-set! (cv::<condition-variable> obj)
  ::<void> (set! (-> cv specific) obj))

(define-cproc condition-variable-signal! (cv::<condition-variable>)
  Scm_ConditionVariableSignal)

(define-cproc condition-variable-broadcast! (cv::<condition-variable>)
  Scm_ConditionVariableBroadcast)

;; Local variables:
;; mode: scheme
;; end:
