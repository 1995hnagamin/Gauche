;;;
;;; thrlib.stub - thread interface functions
;;;
;;;   Copyright (c) 2002 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: thrlib.stub,v 1.4 2002-07-24 15:38:50 shirok Exp $
;;;

"
#include <gauche.h>
#include <gauche/class.h>
#include <gauche/exception.h>
#include \"threads.h\"
"

;;===============================================================
;; System query
;;

(define-symbol pthread "sym_pthread")
(define-symbol none    "sym_none")

(define-cproc gauche-thread-type ()
  "#ifdef GAUCHE_USE_PTHREADS
  SCM_RETURN(sym_pthread);
#else
  SCM_RETURN(sym_none);
#endif")

;;===============================================================
;; Basic thread interface
;;

(define-cproc current-thread ()
  "SCM_RETURN(SCM_OBJ(Scm_VM()));")

(define-cproc thread? (obj) (return <boolean> "SCM_VMP"))

(define-cproc thread-name (vm::<thread>)
  "SCM_RETURN(vm->name);")

(define-cproc thread-specific (vm::<thread>)
  "SCM_RETURN(vm->specific);")

(define-cproc thread-specific-set! (vm::<thread> obj)
  "vm->specific = obj; SCM_RETURN(SCM_UNDEFINED);")

(define-cproc make-thread (thunk::<procedure> &optional (name #f))
  (return "Scm_MakeThread"))

(define-cproc thread-start! (vm::<thread>)
  (return "Scm_ThreadStart"))

(define-cproc thread-yield! ()
  (return "Scm_ThreadYield"))

(define-cproc thread-sleep! (timeout)
  (return "Scm_ThreadSleep"))

(define-cproc thread-join! (vm::<thread> &optional (timeout #f) timeout-val)
  (return "Scm_ThreadJoin"))

(define-cproc thread-terminate! (vm::<thread>)
  (return "Scm_ThreadTerminate"))

;;===============================================================
;; Mutex
;;

(define-cproc make-mutex (&optional (name #f))
  (return "Scm_MakeMutex"))

(define-cproc mutex? (obj)
  (return <boolean> "SCM_MUTEXP"))

(define-symbol not-owned "sym_not_owned")
(define-symbol abandoned "sym_abandoned")
(define-symbol not-abandoned "sym_not_abandoned")

(define-cproc mutex-state (mutex::<mutex>)
  "ScmObj r;
  (void)SCM_INTERNAL_MUTEX_LOCK(mutex->mutex);
  if (mutex->locked) {
    if (mutex->owner) {
      if (mutex->owner->state == SCM_VM_TERMINATED) r = sym_abandoned;
      else r = SCM_OBJ(mutex->owner);
    } else {
      r = sym_not_owned;
    }
  } else {
    r = sym_not_abandoned;
  }
  (void)SCM_INTERNAL_MUTEX_UNLOCK(mutex->mutex);
  SCM_RETURN(r);")

(define-cproc mutex-lock! (mutex::<mutex> &optional (timeout #f) thread)
  "ScmVM *owner = NULL;
  if (SCM_VMP(thread)) owner = SCM_VM(thread);
  else if (SCM_UNBOUNDP(thread)) owner = Scm_VM();
  else if (!SCM_FALSEP(thread)) Scm_Error(\"thread or #f required, but got %S\", thread);
  SCM_RETURN(Scm_MutexLock(mutex, timeout, owner));")
  
(define-cproc mutex-unlock! (mutex::<mutex> &optional (cv #f) (timeout #f))
  "ScmConditionVariable *cond = NULL;
  if (SCM_CONDITION_VARIABLE_P(cv)) cond = SCM_CONDITION_VARIABLE(cv);
  else if (!SCM_FALSEP(cv)) Scm_Error(\"condition variable or #f required, but got %S\", cv);
  SCM_RETURN(Scm_MutexUnlock(mutex, cond, timeout));")

(define-cproc mutex-specific (mutex::<mutex>)
  "SCM_RETURN(mutex->specific);")

(define-cproc mutex-specific-set! (mutex::<mutex> obj)
  "mutex->specific = obj; SCM_RETURN(SCM_UNDEFINED);")

(define-cproc mutex-name (mutex::<mutex>)
  "SCM_RETURN(mutex->name);")

;;===============================================================
;; Condition variable
;;

(define-cproc make-condition-variable (&optional (name #f))
  (return "Scm_MakeConditionVariable"))

(define-cproc condition-variable? (obj)
  (return <boolean> "SCM_CONDITION_VARIABLE_P"))

(define-cproc condition-variable-name (cv::<condition-variable>)
  "SCM_RETURN(cv->name);")

(define-cproc condition-variable-specific (cv::<condition-variable>)
  "SCM_RETURN(cv->specific);")

(define-cproc condition-variable-specific-set! (cv::<condition-variable> obj)
  "cv->specific = obj; SCM_RETURN(SCM_UNDEFINED);")

(define-cproc condition-variable-signal! (cv::<condition-variable>)
  (return "Scm_ConditionVariableSignal"))

(define-cproc condition-variable-broadcast! (cv::<condition-variable>)
  (return "Scm_ConditionVariableBroadcast"))

;;===============================================================
;; Thread exceptions
;;

"static ScmObj thread_exception_allocate(ScmClass *klass, ScmObj initargs)
 {
    ScmThreadException *e = SCM_ALLOCATE(ScmThreadException, klass);
    SCM_SET_CLASS(e, klass);
    e->thread = NULL;
    e->data = SCM_UNDEFINED;
    return SCM_OBJ(e);
 }"

"static void thread_exception_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmClass *k = SCM_CLASS_OF(obj);
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   if (SCM_UNDEFINEDP(exc->data)) {
     Scm_Printf(port, \"#<%A %S>\", Scm__InternalClassName(k), SCM_OBJ_SAFE(exc->thread));
   } else {
     Scm_Printf(port, \"#<%A %S %S>\", Scm__InternalClassName(k), SCM_OBJ_SAFE(exc->thread), exc->data);
   }
 }"

"static void uncaught_exception_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   Scm_Printf(port, \"#<uncaught-exception in thread %S: %S>\", SCM_OBJ_SAFE(exc->thread), exc->data);
 }"

"static void terminated_thread_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
   ScmThreadException *exc = SCM_THREAD_EXCEPTION(obj);
   Scm_Printf(port, \"#<terminated-thread-exception: %S terminated by %S>\", SCM_OBJ_SAFE(exc->thread), exc->data);
 }"

"static ScmClass *thread_exception_cpa[] = {
   SCM_CLASS_STATIC_PTR(Scm_ThreadExceptionClass),
   SCM_CLASS_STATIC_PTR(Scm_ExceptionClass),
   SCM_CLASS_STATIC_PTR(Scm_TopClass),
   NULL
 };"

(define-cclass <thread-exception>
  "ScmThreadException*" "Scm_ThreadExceptionClass"
  ("Scm_ExceptionClass")
  ((thread :type <thread>))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <join-timeout-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <join-timeout-exception>
  "ScmThreadException*" "Scm_JoinTimeoutExceptionClass"
  (c "thread_exception_cpa")
  ((thread :type <thread>
           :getter (c "Scm_ThreadExceptionClass_thread_GET")
           :setter (c "Scm_ThreadExceptionClass_thread_SET"))
   )
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <abandoned-mutex-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <abandoned-mutex-exception>
  "ScmThreadException*" "Scm_AbandonedMutexExceptionClass"
  (c "thread_exception_cpa")
  ((thread :type <thread>
           :getter (c "Scm_ThreadExceptionClass_thread_GET")
           :setter (c "Scm_ThreadExceptionClass_thread_SET"))
   (mutex  :c-name "data"))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "thread_exception_print")))

(define-type <terminated-thread-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <terminated-thread-exception>
  "ScmThreadException*" "Scm_TerminatedThreadExceptionClass"
  (c "thread_exception_cpa")
  ((thread :type <thread>
           :getter (c "Scm_ThreadExceptionClass_thread_GET")
           :setter (c "Scm_ThreadExceptionClass_thread_SET"))
   (terminator :c-name "data"))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "terminated_thread_print")))

(define-type <uncaught-exception> "ScmThreadException*" #f
  "SCM_THREAD_EXCEPTION_P" "SCM_THREAD_EXCEPTION")

(define-cclass <uncaught-exception>
  "ScmThreadException*" "Scm_UncaughtExceptionClass"
  (c "thread_exception_cpa")
  ((thread :type <thread>
           :getter (c "Scm_ThreadExceptionClass_thread_GET")
           :setter (c "Scm_ThreadExceptionClass_thread_SET"))
   (reason :c-name data))
  (allocator (c "thread_exception_allocate"))
  (printer   (c "uncaught_exception_print")))

;; Local variables:
;; mode: scheme
;; end:
