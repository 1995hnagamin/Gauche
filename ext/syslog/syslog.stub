;;;
;;; syslog.stub - syslog interface
;;;  
;;;   Copyright (c) 2000-2007  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: syslog.stub,v 1.9 2007-03-22 11:20:23 shirok Exp $
;;;

"
#include <gauche/extend.h>
#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif

/* Hack for initialization stub */
static void internal_init(ScmModule*);

void Scm_Init_syslog(void)
 {
   SCM_INIT_EXTENSION(syslog);
   internal_init(SCM_FIND_MODULE(\"gauche.syslog\", SCM_FIND_MODULE_CREATE));
 }

#define Scm_Init_syslog internal_init
"

(when "defined(HAVE_SYSLOG)"
  (define-cproc sys-openlog (ident::<const-cstring> option::<fixnum>
                                                    facility::<fixnum>)
    (call <void> "openlog"))
  (define-cproc sys-syslog (prio::<fixnum> message::<const-cstring>)
    (body <void> "syslog(prio, \"%s\", message);"))
  (define-cproc sys-closelog ()
    (call <void> "closelog"))
  (initcode "Scm_AddFeature(\"gauche.sys.syslog\", NULL);"))

(when "defined(HAVE_SETLOGMASK)"
  (define-cproc sys-logmask (prio::<fixnum>)
    (call <fixnum> "LOG_MASK"))
  (define-cproc sys-setlogmask (mask::<fixnum>)
    (call <fixnum> "setlogmask"))
  (initcode "Scm_AddFeature(\"gauche.sys.setlogmask\", NULL);"))

;; openlog options
(define-enum-conditionally LOG_CONS)
(define-enum-conditionally LOG_NDELAY)
(define-enum-conditionally LOG_NOWAIT)
(define-enum-conditionally LOG_ODELAY)
(define-enum-conditionally LOG_PERROR)
(define-enum-conditionally LOG_PID)

;; facility
(define-enum-conditionally LOG_AUTH)
(define-enum-conditionally LOG_AUTHPRIV)
(define-enum-conditionally LOG_CRON)
(define-enum-conditionally LOG_DAEMON)
(define-enum-conditionally LOG_FTP)
(define-enum-conditionally LOG_KERN)
(define-enum-conditionally LOG_LOCAL0)
(define-enum-conditionally LOG_LOCAL1)
(define-enum-conditionally LOG_LOCAL2)
(define-enum-conditionally LOG_LOCAL3)
(define-enum-conditionally LOG_LOCAL4)
(define-enum-conditionally LOG_LOCAL5)
(define-enum-conditionally LOG_LOCAL6)
(define-enum-conditionally LOG_LOCAL7)
(define-enum-conditionally LOG_LPR)
(define-enum-conditionally LOG_MAIL)
(define-enum-conditionally LOG_NEWS)
(define-enum-conditionally LOG_SYSLOG)
(define-enum-conditionally LOG_USER)
(define-enum-conditionally LOG_UUCP)

;; level
(define-enum-conditionally LOG_EMERG)
(define-enum-conditionally LOG_ALERT)
(define-enum-conditionally LOG_CRIT)
(define-enum-conditionally LOG_ERR)
(define-enum-conditionally LOG_WARNING)
(define-enum-conditionally LOG_NOTICE)
(define-enum-conditionally LOG_INFO)
(define-enum-conditionally LOG_DEBUG)

;; Local variables:
;; mode: scheme
;; end:
