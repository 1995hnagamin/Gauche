;;;
;;; syslog.stub - syslog interface
;;;  
;;;   Copyright (c) 2000-2005 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: syslog.stub,v 1.5 2005-08-01 12:23:33 shirok Exp $
;;;

"
#include <gauche/extend.h>
#ifdef HAVE_SYSLOG_H
#include <syslog.h>
#endif

/* Hack for initialization stub */
static void internal_init(ScmModule*);

void Scm_Init_syslog(void)
 {
   SCM_INIT_EXTENSION(syslog);
   internal_init(SCM_FIND_MODULE(\"gauche.syslog\", SCM_FIND_MODULE_CREATE));
 }

#define Scm_Init_syslog internal_init
"

(if "defined(HAVE_SYSLOG)"
    (begin
      (define-cproc sys-openlog (ident::<string> option::<fixnum>
                                 facility::<fixnum>)
        (body <void> "openlog(Scm_GetStringConst(ident), option, facility);"))
      (define-cproc sys-syslog (prio::<fixnum> message::<string>)
        (body <void> "syslog(prio, \"%s\", Scm_GetStringConst(message));"))
      (define-cproc sys-closelog ()
        (call <void> "closelog"))
      ))

(if "defined(HAVE_SETLOGMASK)"
    (begin
      (define-cproc sys-logmask (prio::<fixnum>)
        (call <fixnum> "LOG_MASK"))
      (define-cproc sys-setlogmask (mask::<fixnum>)
        (call <fixnum> "setlogmask"))))

;; openlog options
(if "defined(LOG_CONS)"   (define-enum LOG_CONS))
(if "defined(LOG_NDELAY)" (define-enum LOG_NDELAY))
(if "defined(LOG_NOWAIT)" (define-enum LOG_NOWAIT))
(if "defined(LOG_ODELAY)" (define-enum LOG_ODELAY))
(if "defined(LOG_PERROR)" (define-enum LOG_PERROR))
(if "defined(LOG_PID)"    (define-enum LOG_PID))

;; facility
(if "defined(LOG_AUTH)"   (define-enum LOG_AUTH))
(if "defined(LOG_AUTHPRIV)" (define-enum LOG_AUTHPRIV))
(if "defined(LOG_CRON)"   (define-enum LOG_CRON))
(if "defined(LOG_DAEMON)" (define-enum LOG_DAEMON))
(if "defined(LOG_FTP)"    (define-enum LOG_FTP))
(if "defined(LOG_KERN)"   (define-enum LOG_KERN))
(if "defined(LOG_LOCAL0)" (define-enum LOG_LOCAL0))
(if "defined(LOG_LOCAL1)" (define-enum LOG_LOCAL1))
(if "defined(LOG_LOCAL2)" (define-enum LOG_LOCAL2))
(if "defined(LOG_LOCAL3)" (define-enum LOG_LOCAL3))
(if "defined(LOG_LOCAL4)" (define-enum LOG_LOCAL4))
(if "defined(LOG_LOCAL5)" (define-enum LOG_LOCAL5))
(if "defined(LOG_LOCAL6)" (define-enum LOG_LOCAL6))
(if "defined(LOG_LOCAL7)" (define-enum LOG_LOCAL7))
(if "defined(LOG_LPR)"    (define-enum LOG_LPR))
(if "defined(LOG_MAIL)"   (define-enum LOG_MAIL))
(if "defined(LOG_NEWS)"   (define-enum LOG_NEWS))
(if "defined(LOG_SYSLOG)" (define-enum LOG_SYSLOG))
(if "defined(LOG_USER)"   (define-enum LOG_USER))
(if "defined(LOG_UUCP)"   (define-enum LOG_UUCP))

;; level
(if "defined(LOG_EMERG)"  (define-enum LOG_EMERG))
(if "defined(LOG_ALERT)"  (define-enum LOG_ALERT))
(if "defined(LOG_CRIT)"   (define-enum LOG_CRIT))
(if "defined(LOG_ERR)"    (define-enum LOG_ERR))
(if "defined(LOG_WARNING)" (define-enum LOG_WARNING))
(if "defined(LOG_NOTICE)" (define-enum LOG_NOTICE))
(if "defined(LOG_INFO)"   (define-enum LOG_INFO))
(if "defined(LOG_DEBUG)"  (define-enum LOG_DEBUG))

;; Local variables:
;; mode: scheme
;; end:
