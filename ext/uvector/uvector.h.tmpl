///; Process this file with uvgen.scm to generate uvect.c
///; Lines beginning with '///' are directives for ugven.scm.

///;; Header ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
///(define *tmpl-prologue* '(
/*
 * uvector - uniform (homogeneous) numeric vector types (SRFI-4)
 *
 *   Copyright (c) 1999-2004 Shiro Kawai, All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 * 
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *   3. Neither the name of the authors nor the names of its contributors
 *      may be used to endorse or promote products derived from this
 *      software without specific prior written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  This file is automatically generated.  DO NOT EDIT.
 *  $Id: uvector.h.tmpl,v 1.1 2004-11-05 10:34:25 shirok Exp $
 */

#ifndef GAUCHE_UVECT_H
#define GAUCHE_UVECT_H

#include <gauche.h>

/*
 * This header file is for other extension modules which need
 * to access uniform vectors in C level.
 */

/*
 * Common structure for generic uvector operation
 */
typedef struct ScmUVectorRec {
    SCM_HEADER;
    unsigned int immutable : 1;
    int size : (SIZEOF_INT*CHAR_BIT-1);
    void *owner;
    void *elements;
} ScmUVector;

SCM_CLASS_DECL(Scm_UVectorClass);
#define SCM_CLASS_UVECTOR         (&Scm_UVectorClass)
#define SCM_UVECTOR(obj)          ((ScmUVector*)(obj))
#define SCM_UVECTORP(obj)         Scm_TypeP(obj, SCM_CLASS_UVECTOR)
#define SCM_UVECTOR_SIZE(obj)     (SCM_UVECTOR(obj)->size)
#define SCM_UVECTOR_IMMUTABLE_P(obj) (SCM_UVECTOR(obj)->immutable)
#define SCM_UVECTOR_OWNER(obj)    (SCM_UVECTOR(obj)->owner)
#define SCM_UVECTOR_ELEMENTS(obj) (SCM_UVECTOR(obj)->elements)

#define SCM_UVECTOR_CHECK_MUTABLE(obj)                 \
  do { if (SCM_UVECTOR_IMMUTABLE_P(obj)) {             \
    Scm_Error("uniform vector is immutable: %S", obj); \
  }} while (0)

extern int Scm_UVectorElementSize(ScmClass *klass);
extern ScmObj Scm_MakeUVector(ScmClass *klass, int size, void *init);
extern ScmObj Scm_MakeUVectorFull(ScmClass *klass, int size, void *init,
                                  int immutablep, void *owner);

extern ScmObj Scm_UVectorAlias(ScmClass *klass, ScmUVector *v,
                               int start, int end);

///)) ;; tmpl-prologue

///(define *tmpl-body* '(
/* ${T}Vector */

typedef struct Scm${T}VectorRec {
    SCM_HEADER;
    unsigned int immutable : 1;
    int size : (SIZEOF_INT*CHAR_BIT-1);
    void *owner;
    ${etype} *elements;
} Scm${T}Vector;

SCM_CLASS_DECL(Scm_${T}VectorClass);
#define SCM_CLASS_${T}VECTOR  (&Scm_${T}VectorClass)

#define SCM_${T}VECTOR(obj)        ((Scm${T}Vector*)(obj))
#define SCM_${T}VECTORP(obj)       SCM_XTYPEP(obj, SCM_CLASS_${T}VECTOR)
#define SCM_${T}VECTOR_SIZE(obj)   (SCM_${T}VECTOR(obj)->size)
#define SCM_${T}VECTOR_ELEMENTS(obj) (SCM_${T}VECTOR(obj)->elements)

extern ScmObj Scm_Make${T}Vector(int size, ${etype} fill);
extern ScmObj Scm_Make${T}VectorFromArray(int size, const ${etype} array[]);
extern ScmObj Scm_Make${T}VectorFromArrayShared(int size, ${etype} array[]);
extern ScmObj Scm_${T}VectorFill(Scm${T}Vector *vec, ${etype} fill, int, int);
extern ScmObj Scm_${T}VectorRef(Scm${T}Vector *vec, int index, ScmObj fallback);
extern ScmObj Scm_${T}VectorSet(Scm${T}Vector *vec, int index, ScmObj val, int clamp);
extern ScmObj Scm_${T}VectorToList(Scm${T}Vector *vec, int start, int end);
extern ScmObj Scm_ListTo${T}Vector(ScmObj list, int clamp);
extern ScmObj Scm_${T}VectorCopy(Scm${T}Vector *vec, int start, int end);
extern ScmObj Scm_${T}VectorCopyX(Scm${T}Vector *dst, Scm${T}Vector *src);
extern ScmObj Scm_${T}VectorToVector(Scm${T}Vector *vec, int start, int end);
extern ScmObj Scm_VectorTo${T}Vector(ScmVector *vec, int start, int end, int clamp);

/* arithmetics */
extern ScmObj Scm_${T}VectorAdd(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorAddX(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorSub(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorSubX(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorMul(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorMulX(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorDiv(Scm${T}Vector *s0, ScmObj s1, int clamp);
extern ScmObj Scm_${T}VectorDivX(Scm${T}Vector *s0, ScmObj s1, int clamp);

extern ScmObj Scm_${T}VectorAnd(Scm${T}Vector *s0, ScmObj s1);
extern ScmObj Scm_${T}VectorAndX(Scm${T}Vector *s0, ScmObj s1);
extern ScmObj Scm_${T}VectorIor(Scm${T}Vector *s0, ScmObj s1);
extern ScmObj Scm_${T}VectorIorX(Scm${T}Vector *s0, ScmObj s1);
extern ScmObj Scm_${T}VectorXor(Scm${T}Vector *s0, ScmObj s1);
extern ScmObj Scm_${T}VectorXorX(Scm${T}Vector *s0, ScmObj s1);

extern ScmObj Scm_${T}VectorDotProd(Scm${T}Vector *v0, ScmObj v1);
extern ScmObj Scm_${T}VectorRangeCheck(Scm${T}Vector *v0, ScmObj min, ScmObj max);
extern ScmObj Scm_${T}VectorClamp(Scm${T}Vector *v0, ScmObj min, ScmObj max);
extern ScmObj Scm_${T}VectorClampX(Scm${T}Vector *v0, ScmObj min, ScmObj max);

///)) ;; tmpl-body

///(define *tmpl-epilogue* '(

#endif /* GAUCHE_UVECT_H */

///)) ;; tmpl-epilogue


///; Local variables:
///; mode: c
///; end:
