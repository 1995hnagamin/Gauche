CC = @CC@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
GOSH = @GOSH@
GAUCHE_CONFIG = @GAUCHE_CONFIG@
GAUCHE_TOP = @GAUCHE_TOP@
INSTALL = @INSTALL@

ARCHFILES = libuvector.so
SCMFILES  = srfi-4.scm
HEADERS   = uvector.h

TARGET    = libuvector.so
OBJS      = uvector_head.o uvector.o uvutil.o uvlib.o uvector_tail.o
CONFIG_GENERATED = Makefile config.cache config.log config.status \
		   autom4te.cache uvector_head.c uvector_tail.c
GENERATED = gauche/uvector.h uvector.c uvutil.c uvlib.c uvlib.stub

INSTALL_TYPE = @INSTALL_TYPE@
HEADER_INSTALL_DIR  = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)incdir`/gauche
SCM_INSTALL_DIR     = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)libdir`
ARCH_INSTALL_DIR    = `$(GAUCHE_CONFIG) --$(INSTALL_TYPE)archdir`

all : $(TARGET)

libuvector.so : $(OBJS)
	$(CC) $(LDFLAGS) libuvector.so $(OBJS) $(LIBS)

$(OBJS) : gauche/uvector.h uvectorP.h

gauche/uvector.h : uvector.h.sh
	if test ! -d gauche; then mkdir gauche; fi
	rm -rf gauche/uvector.h
	sh ./uvector.h.sh > gauche/uvector.h

uvector.c : uvector.c.sh
	rm -rf uvector.c
	sh ./uvector.c.sh > uvector.c

uvutil.c : uvutil.c.scm
	rm -rf uvutil.c
	$(GOSH) uvutil.c.scm > uvutil.c

uvlib.c : uvlib.stub
	$(GOSH) genstub uvlib.stub

uvlib.stub : uvlib.stub.sh
	rm -rf uvlib.stub
	sh ./uvlib.stub.sh > uvlib.stub

test : all
	@rm -f test.log
	$(GOSH) -I. test.scm > test.log

install : all
	@for f in gauche/$(HEADERS) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(HEADER_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(SCMFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 444 $$f $(SCM_INSTALL_DIR); \
	  fi; \
	done
	@for f in $(ARCHFILES) _end; do \
	  if test $$f != _end; then \
	    $(INSTALL) -m 555 $$f $(ARCH_INSTALL_DIR); \
	  fi; \
	done

clean :
	rm -rf core $(TARGET) $(OBJS) *~ test.log so_locations

distclean : clean
	rm -rf $(CONFIG_GENERATED) gauche

realclean : clean
	rm -rf $(CONFIG_GENERATED) $(GENERATED) gauche configure

# 'link' creates symlinks from source tree to extension modules, so that
# it can be tested within the source tree.  'unlink' removes them.
# these are only for developer's.

link : $(TARGET) $(SCMFILES)
	$(GOSH) ../xlink -l $(TARGET) $(SCMFILES)

unlink :
	-$(GOSH) ../xlink -u $(TARGET) $(SCMFILES)
