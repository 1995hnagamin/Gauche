;;;
;;; genstub - simple stub generator
;;;
;;;  Copyright(C) 2000-2001 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;
;;;  $Id: genstub,v 1.47 2001-09-29 22:35:40 shirok Exp $
;;;

(use srfi-1)
(use srfi-13)
(use gauche.regexp)

(define *file-prefix* "")
(define *insert-sharp-line* #t)         ;if #t, output #line directive
(define *unbound* (cons #f #f))         ;placeholder for unbound value

(define (print fmt . args)
  (if (null? args) (display fmt) (apply format #t fmt args)))

(define (println fmt . args)
  (if (null? args) (display fmt) (apply format #t fmt args))
  (newline))

(define (ensure-string stuff)
  (cond ((string? stuff) stuff)
        ((symbol? stuff) (symbol->string stuff))
        (else (with-output-to-string (lambda () (write stuff))))))

;;===================================================================
;; Get configuration parameters
;;

(define *cpp-defines* '())

;; parses config.h file and add defined symbols to *cpp-defines*.
;; this is not intended to parse generic CPP syntax.
(define (read-config.h config.h)
  (with-input-from-file config.h
    (lambda ()
      (let loop ((line (read-line)))
        (rxmatch-cond
          (test (eof-object? line))
          ((rxmatch #/^#define\s+([\w_]+)(.*)$/ line)
           (#f symbol rest)
           (set! *cpp-defines*
                 (acons symbol (string-trim-both rest) *cpp-defines*))
           (loop (read-line)))
          (else (loop (read-line))))))
    ))

;; find config.h's
(define (init-config.h)
  (for-each (lambda (dir)
              (let ((f (string-append dir "/gauche/config.h")))
                (when (file-exists? f)
                  (read-config.h f))))
            *load-path*))
                    
;;===================================================================
;; Type handling
;;

;; (define-type name assert-predicate c-type c-predicate unboxer)

(define-class <type> ()
  ((name        :init-keyword :name        :accessor name-of)
   (predicate   :init-keyword :predicate   :accessor predicate-of)
   (c-type      :init-keyword :c-type      :accessor c-type-of)
   (c-predicate :init-keyword :c-predicate :accessor c-predicate-of)
   (unboxer     :init-keyword :unboxer     :accessor unboxer-of)
   (all-types   :allocation :class :initform '())
   ))

(define-method initialize ((self <type>) initargs)
  (next-method)
  (slot-set! self 'all-types
             (cons self (slot-ref self 'all-types))))

(define (make-type name predicate c-type c-predicate unboxer)
  (make <type> :name name :predicate predicate
        :c-type c-type :c-predicate c-predicate :unboxer unboxer))

;; predefined types

(make-type "pair"    'pair?        "ScmObj"       "SCM_PAIRP"   #f)
(make-type "list"    'list?        "ScmObj"       "SCM_LISTP"   #f)
(make-type "vector"  'vector?      "ScmVector*"   "SCM_VECTORP" "SCM_VECTOR")
(make-type "string"  'string?      "ScmString*"   "SCM_STRINGP" "SCM_STRING")
(make-type "symbol"  'symbol?      "ScmSymbol*"   "SCM_SYMBOLP" "SCM_SYMBOL")
(make-type "keyword" 'keyword?     "ScmKeyword*"  "SCM_KEYWORDP" "SCM_KEYWORD")
(make-type "identifier" 'identifier? "ScmIdentifier*" "SCM_IDENTIFIERP" "SCM_IDENTIFIER")
(make-type "boolean" 'boolean?     "int"          "SCM_BOOLP"   "!SCM_FALSEP")
(make-type "small integer" 'small-integer? "int" "SCM_INTP"    "SCM_INT_VALUE")
;; TODO: bignum!
(make-type "exact integer" 'exact? "int"          "SCM_EXACTP"  "Scm_GetInteger")
(make-type "real"      'real?      "double"       "SCM_REALP"   "Scm_GetDouble")
(make-type "number"    'number?    "ScmObj"       "SCM_NUMBERP" #f)
(make-type "character" 'char?      "ScmChar"      "SCM_CHARP" "SCM_CHAR_VALUE")
(make-type "char-set"  'char-set?  "ScmCharSet*"  "SCM_CHARSETP" "SCM_CHARSET")
(make-type "port"        'port?        "ScmPort*" "SCM_PORTP"  "SCM_PORT")
(make-type "input port"  'input-port?  "ScmPort*" "SCM_IPORTP" "SCM_PORT")
(make-type "output port" 'output-port? "ScmPort*" "SCM_OPORTP" "SCM_PORT")

(make-type "procedure" 'procedure? "ScmProcedure*" "SCM_PROCEDUREP" "SCM_PROCEDURE")
(make-type "closure"   'closure?   "ScmClosure*"   "SCM_CLOSUREP"   "SCM_CLOSURE")
(make-type "hash table" 'hash-table? "ScmHashTable*" "SCM_HASHTABLEP" "SCM_HASHTABLE")
(make-type "class"     'class?     "ScmClass*"     "SCM_CLASSP" "SCM_CLASS")
(make-type "module"    'module?    "ScmModule*"    "SCM_MODULEP" "SCM_MODULE")

;; default
(define *scm-type*
  (make-type "scheme object" #f     "ScmObj"       #f           #f))

(define (predicate->type pred)
  (let loop ((types (class-slot-ref <type> 'all-types)))
    (cond ((null? types) (error "unknown predicate to assert:" pred))
          ((eq? (predicate-of (car types)) pred) (car types))
          (else (loop (cdr types))))))

;; process type definition in stub file
(define (process-define-type form)
  (unless (= (length form) 6)
    (error "malformed define-type:" form))
  (apply make-type (cdr form)))

;;===================================================================
;; Stub
;;
;;   - Each declaration makes a stub.
;;   - Stub is used to generate three things: immediate definition,
;;     initialization, and (optionally) declaration.

(define-class <stub> ()
  ((scheme-name     :init-keyword :scheme-name :accessor scheme-name-of)
   (c-name          :init-keyword :c-name      :accessor c-name-of)
   (cpp-condition   :init-keyword :cpp-condition :initform #f
                    :accessor cpp-condition-of)
   (all-stubs       :allocation :class :initform '())
   ))

(define-method initialize ((self <stub>) initargs)
  (next-method)
  (slot-set! self 'all-stubs (cons self (slot-ref self 'all-stubs))))

(define (get-stubs class)
  (reverse (filter (lambda (s) (is-a? s class))
                   (class-slot-ref <stub> 'all-stubs))))

;;--------------------------------------------------------------------
;; Symbol and keyword definition
;;

;; (define-symbol scheme-name c-name [init])

(define-class <csymbol> (<stub>)
  ((initializer    :init-keyword :initializer :accessor initializer-of)
   ))

(define-method emit-definition ((self <csymbol>))
  (let* ((scheme-name (scheme-name-of self))
         (c-name (c-name-of self))
         (scheme-name-len (string-length (symbol->string scheme-name))))
    (println "static SCM_DEFINE_STRING_CONST(~a_NAME, \"~a\", ~a, ~a);"
             c-name scheme-name scheme-name-len scheme-name-len)
    (println "static ScmObj ~a;" c-name)
    (newline)))

(define-method emit-initializer ((self <csymbol>))
  (println "  ~a = Scm_Intern(&~a_NAME);"
           (c-name-of self) (c-name-of self))
  (when (initializer-of self)
    (println "  Scm_Define(module, SCM_SYMBOL(~a), SCM_OBJ(~a));"
             (c-name-of self) (initializer-of self))))

(define (process-define-symbol form)
  (unless (and (<= 3 (length form) 4)
               (symbol? (cadr form))
               (string? (caddr form)))
    (error "malformed define-symbol:" form))
  (let ((symbol (make <csymbol>
                  :scheme-name (cadr form) :c-name (caddr form)
                  :initializer (if (pair? (cdddr form)) (cadddr form) #f))))
    (emit-definition symbol)
    ))

;; (define-keyword scheme-name c-name)

(define-class <ckeyword> (<stub>)
  ()
  )

(define-method emit-definition ((self <ckeyword>))
  (let* ((scheme-name (scheme-name-of self))
         (c-name (c-name-of self))
         (scheme-name-len (string-length (symbol->string scheme-name))))
    (println "static SCM_DEFINE_STRING_CONST(~a_NAME, \"~a\", ~a, ~a);"
             c-name scheme-name scheme-name-len scheme-name-len)
    (println "static ScmObj ~a;" c-name)
    (newline)))

(define-method emit-initializer ((self <ckeyword>))
  (println "  ~a = Scm_MakeKeyword(&~a_NAME);"
           (c-name-of self) (c-name-of self)))

(define (process-define-keyword form)
  (unless (and (= (length form) 3)
               (symbol? (cadr form))
               (string? (caddr form)))
    (error "malformed define-keyword:" form))
  (let ((keyword (make <ckeyword>
                   :scheme-name (cadr form) :c-name (caddr form))))
    (emit-definition keyword)
    ))

;;-----------------------------------------------------------------
;; Procedure
;;

;; Common stuff for cproc and cmethod

(define-class <setter-mixin> ()
  ((setter          :initform #f  :accessor setter-of)
   (setter-c-name   :initform #f  :accessor setter-c-name-of)
   ))

(define-class <procstub> (<setter-mixin> <stub>)
  ((args            :initform '() :accessor args-of :init-keyword :args)
   (num-reqargs     :initform 0   :accessor num-reqargs-of :init-keyword :num-reqargs)
   (have-rest-arg?  :initform #f  :accessor have-rest-arg? :init-keyword :have-rest-arg?)
   (decls           :initform '() :accessor decls-of)
   (stmts           :initform '() :accessor stmts-of)
   ))

;; argument
(define-class <arg> ()
  ((name     :init-keyword :name :accessor name-of)
   (c-name   :accessor c-name-of)
   (scm-name :accessor scm-name-of)
   (count    :init-keyword :count :accessor count-of)
   (c-type   :initform *scm-type* :accessor c-type-of)
   (category :init-keyword :category :initform :required :accessor category-of)
   (default  :init-keyword :default :initform *unbound* :accessor default-of)
   ))

(define-method write-object ((self <arg>) out)
  (format out "#<arg ~a ~a>" (name-of self) (category-of self)))

(define-method initialize ((self <arg>) initargs)
  (next-method)
  (set! (c-name-of self) (get-c-name "" (name-of self)))
  (set! (scm-name-of self) (string-append (c-name-of self) "_scm")))

(define (push-arg! cproc arg)
  (let* ((argname   (car arg))
         (argname-c (get-c-name "" argname))
         (argname-s (string-append argname-c "_scm"))
         (argcnt    (length (args-of cproc))))
    (set! (args-of cproc) (cons arg (args-of cproc)))
    (set-cdr! arg (list* :c-name argname-c :s-name argname-s
                         :count argcnt (cdr arg)))))

(define (get-arg cproc arg)
  (find (lambda (x) (eq? arg (name-of x))) (args-of cproc)))

(define (arg-attr-set! cproc arg key val)
  (cond ((get-arg cproc arg)
         => (lambda (arg) (set-cdr! arg (list* key val (cdr arg)))))))

(define (push-stmt! cproc stmt)
  (set! (stmts-of cproc) (cons stmt (stmts-of cproc))))

(define (process-assert cproc form)
  (let* ((op  (car form))
         (arg (get-arg cproc (cadr form))))
    (unless arg (error "assertion for unknown arg:" form))
    (set! (c-type-of arg) (predicate->type op))))

;; (define-cproc scheme-name (argspec)
;;   assertions ...
;;   body)

(define-class <cproc> (<procstub>)
  ((num-optargs     :initform 0   :accessor num-optargs-of
                    :init-keyword :num-optargs)
   (keyword-args    :initform '() :accessor keyword-args-of)
   (inliner         :initform #f  :accessor inliner-of)
   (inline-insn     :initform #f  :accessor inline-insn-of)
   ))

(define (process-define-cproc form)
  (unless (and (>= (length form) 4)
               (symbol? (cadr form))
               (list? (caddr form)))
    (error "malformed define-cproc:" form))
  (receive (args nreqs nopts rest?)
      (process-cproc-args (caddr form))
    (let ((cproc (make <cproc>
                   :scheme-name (cadr form)
                   :c-name (get-c-name *file-prefix* (cadr form))
                   :args args
                   :num-reqargs nreqs
                   :num-optargs nopts
                   :have-rest-arg? rest?)))
      (set! (keyword-args-of cproc)
            (filter (lambda (x) (eqv? (category-of x) :keyword)) args))
      (process-body cproc (cdddr form))
      (emit-definition cproc)
      (emit-inliner cproc)
      (emit-record cproc))))

;; returns a list of args, # of reqargs,  # of optargs, and have-rest-arg?
(define (process-cproc-args argspecs)
  (define (badarg arg) (error "bad argument in argspec:" arg))
  
  (define (required specs args nreqs)
    (cond ((null? specs) (values (reverse args) nreqs 0 #f))
          ((eq? (car specs) '&optional) (optional (cdr specs) args nreqs 0))
          ((eq? (car specs) '&rest)     (rest (cdr specs) args nreqs 0))
          ((eq? (car specs) '&keyword)  (keyword (cdr specs) args nreqs 0))
          ((symbol? (car specs))
           (required (cdr specs)
                     (cons (make <arg> :name (car specs) :count nreqs) args)
                     (+ nreqs 1)))
          (else (badarg (car specs)))))

  (define (optional specs args nreqs nopts)
    (cond ((null? specs) (values (reverse args) nreqs nopts #f))
          ((eq? (car specs) '&optional) (error "extra &optional parameter"))
          ((eq? (car specs) '&keyword)
           (error "&keyword and &optional can't be used together"))
          ((eq? (car specs) '&rest)  (rest (cdr specs) args nreqs nopts))
          ((symbol? (car specs))
           (optional (cdr specs)
                     (cons (make <arg> :name (car specs) :count (+ nreqs nopts)
                                 :category :optional :default *unbound*)
                           args)
                     nreqs
                     (+ nopts 1)))
          ((and (list? (car specs)) (= (length (car specs)) 2))
           (optional (cdr specs)
                     (cons (make <arg> :name (caar specs) :count (+ nreqs nopts)
                                 :category :optional :default (cadar specs))
                           args)
                     nreqs
                     (+ nopts 1)))
          (else (badarg (car specs)))))

  (define (keyword specs args nreqs nopts)
    (cond ((null? specs) (values (reverse args) nreqs nopts #f))
          ((eq? (car specs) '&keyword) (error "extra &keyword parameter"))
          ((eq? (car specs) '&optional)
           (error "&keyword and &optional can't be used together"))
          ((eq? (car specs) '&rest) (rest (cdr specs) args nreqs nopts))
          ((symbol? (car specs))
           (keyword (cdr specs)
                    (cons (make <arg> :name (car specs) :count (+ nreqs nopts)
                                :category :keyword :default *unbound*)
                          args)
                    nreqs
                    (+ nopts 1)))
          ((and (list? (car specs)) (= (length (car specs)) 2))
           (keyword (cdr specs)
                    (cons (make <arg> :name (caar specs) :count (+ nreqs nopts)
                                :category :keyword :default (cadar specs))
                          args)
                    nreqs
                    (+ nopts 1)))
          (else (badarg (car specs)))))

  (define (rest specs args nreqs nopts)
    (cond ((null? specs) (values (reverse args) nreqs nopts #f))
          ((and (null? (cdr specs)) (symbol? (car specs)))
           (values (reverse
                    (cons (make <arg> :name (car specs) :count (+ nreqs nopts)
                                :category :rest)
                          args))
                   nreqs
                   (+ nopts 1)
                   #t))
          (else (badarg (car specs)))))

  (required argspecs '() 0)
  )

(define-method process-body ((cproc <cproc>) body)
  (let loop ((body body))
    (if (null? body)
        (set! (stmts-of cproc) (reverse (stmts-of cproc)))
        (let ((form (car body))
              (next (cdr body)))
          (cond ((string? form) (push-stmt! cproc form) (loop next))
                ((not (pair? form)) (error "bad form in body:" form))
                ((eq? (car form) 'assert)
                 (process-assert cproc (cadr form))
                 (loop next))
                ((eq? (car form) 'inliner)
                 (unless (pair? (cdr form))
                   (error "bad `inliner' spec:" form))
                 (if (and (pair? (cadr form))
                          (eq? (caadr form) 'proc))
                     (if (not (string? (cadadr form)))
                         (error "inliner procedure name must be a string:"
                                form)
                         (set! (inliner-of cproc) (cadadr form)))
                     (set! (inline-insn-of cproc) (cadr form)))
                 (loop next))
                ((eq? (car form) 'setter)
                 (unless (pair? (cdr form))
                   (error "bad 'setter' spec:" form))
                 (process-setter cproc (cdr form))
                 (loop next))
                (else
                 (error "unknown body form:" form)))))))

(define-method process-setter ((cproc <cproc>) decl)
  (cond
   ((symbol? (car decl))
    (set! (setter-of cproc) (car decl))
    (set! (setter-c-name-of cproc) (get-c-name *file-prefix* (car decl))))
   ((< (length decl) 2)
    (error "bad form of anonymous setter:" `(setter ,decl)))
   (else
    (receive (args nreqs nopts rest?)
        (process-cproc-args (car decl))
      (let ((setter (make <cproc>
                      :scheme-name `(setter ,(scheme-name-of cproc))
                      :c-name (string-append (c-name-of cproc) "_SETTER")
                      :args args
                      :num-reqargs nreqs
                      :num-optargs nopts
                      :have-rest-arg? rest?)))
        (set! (setter-of cproc) setter)
        (set! (setter-c-name-of cproc) (c-name-of setter))
        (set! (keyword-args-of setter)
              (filter (lambda (x) (eqv? (category-of x) :keyword)) args))
        (process-body setter (cdr decl))
        (emit-definition setter)
        (emit-inliner setter)
        (emit-record setter)))
    )))

;;; emit code

(define-method emit-definition ((cproc <cproc>))
  (println "static ScmObj ~a(ScmObj *SCM_FP, int SCM_ARGCNT, void *data_)"
           (c-name-of cproc))
  (println "{")
  ;; argument decl
  (for-each emit-arg-decl (args-of cproc))
  (when (> (num-optargs-of cproc) 0)
    (println "  ScmObj SCM_OPTARGS = SCM_ARGREF(SCM_ARGCNT-1);"))
  (println "  SCM_ENTER_SUBR(\"~a\");" (scheme-name-of cproc))
  ;; argument count check (for optargs)
  (when (and (> (num-optargs-of cproc) 0)
             (null? (keyword-args-of cproc))
             (not (have-rest-arg? cproc)))
    (println "  if (Scm_Length(SCM_OPTARGS) > ~a)" (num-optargs-of cproc))
    (println "    Scm_Error(\"too many arguments: up to ~s is expected, %d given.\", Scm_Length(SCM_OPTARGS));"
             (num-optargs-of cproc)))
  ;; argument assertions & unbox op.
  (for-each emit-arg-unbox (args-of cproc))
  ;; body
  (println "  {")
  (for-each println (reverse (stmts-of cproc)))
  (println "  }")
  (println "}")
  (newline)
  )

(define-method emit-initializer ((cproc <cproc>))
  (when (symbol? (scheme-name-of cproc))
    (println "  SCM_DEFINE(module, ~s, SCM_OBJ(&~a_STUB));"
             (symbol->string (scheme-name-of cproc))
             (c-name-of cproc)))
  (next-method)
  )

(define-method emit-initializer ((cproc <setter-mixin>))
  (when (setter-of cproc)
    (println "  Scm_SetterSet(SCM_PROCEDURE(&~a_STUB), SCM_PROCEDURE(&~a_STUB), TRUE);"
             (c-name-of cproc)
             (setter-c-name-of cproc))))

(define (emit-arg-decl arg)
  (println "  ScmObj ~a;" (scm-name-of arg))
  (println "  ~a ~a;" (c-type-of (c-type-of arg)) (c-name-of arg)))

(define (emit-arg-unbox arg)
  (let* ((category (category-of arg))
         (type  (c-type-of arg))
         (cname (c-name-of arg))
         (sname (scm-name-of arg))
         (count (count-of arg))
         (tname (name-of type))
         (pred  (c-predicate-of type))
         (unbox (unboxer-of type)))
    (case category
      ((:required)
       (println "  ~a = SCM_ARGREF(~a);" sname count))
      ((:optional)
       (println "  if (SCM_NULLP(SCM_OPTARGS)) ~a = ~a;"
                sname
                (scheme-constant->c-constant (default-of arg)))
       (println "  else {")
       (println "    ~a = SCM_CAR(SCM_OPTARGS);" sname)
       (println "    SCM_OPTARGS = SCM_CDR(SCM_OPTARGS);")
       (println "  }"))
      ((:keyword)
       (println "  ~a = Scm_GetKeyword(SCM_MAKE_KEYWORD(\"~a\"), SCM_OPTARGS, ~a);"
                sname (name-of arg)
                (scheme-constant->c-constant (default-of arg))))
      ((:rest)
       (println "  ~a = SCM_ARGREF(SCM_ARGCNT-1);" sname)))
    (when pred
      (println "  if (!~a(~a)) Scm_Error(\"~a required, but got %S\", ~a);"
               pred sname tname sname))
    (if unbox
        (println "  ~a = ~a(~a);" cname unbox sname)
        (println "  ~a = ~a;" cname sname))))

(define (emit-inliner cproc)
  (let* ((insn (inline-insn-of cproc)))
    (when insn
      (let ((inliner (string-append (c-name-of cproc) "_inline"))
            (name (scheme-name-of cproc))
            (req  (num-reqargs-of cproc))
            (opt  (num-optargs-of cproc))
            )
        (set! (inliner-of cproc) inliner)
        (emit-inliner-header cproc)
        (cond ((string? insn)
               (println "  SCM_APPEND1(code, tail, ~a);"
                        (if (or (have-rest-arg? cproc) (> opt 0))
                            (format #f "SCM_VM_INSN1(~a, nargs)" insn)
                            (format #f "SCM_VM_INSN(~a)" insn)))
               (println "  return code;"))
              ((and (pair? insn) (eq? (car insn) 'case-nargs))
               (for-each (lambda (clause)
                           (let ((nargs (car clause))
                                 (insn  (cadr clause)))
                             (if (eq? nargs 'else)
                                 (print "else ")
                                 (print "if (nargs == ~a) " nargs))
                             (println "{")
                             (if insn
                                 (println "  SCM_APPEND1(code, tail, SCM_VM_INSN(~a)); return code;" insn)
                                 (println "  return SCM_FALSE;"))
                             (println "}")))
                         (cdr insn))))
        (println "}")
        ))
    ))

(define (emit-inliner-header cproc)
  (let ((inliner (inliner-of cproc))
        (name (scheme-name-of cproc))
        (req  (num-reqargs-of cproc))
        (opt  (num-optargs-of cproc))
        )
    (println "static ScmObj ~a(ScmSubr *subr, ScmObj form, ScmObj env, int ctx)" inliner)
    (println "{")
    (println "  ScmObj cp = SCM_CDR(form);")
    (println "  ScmObj code = SCM_NIL, tail = SCM_NIL;")
    (println "  int nargs = Scm_Length(cp);")
    (cond ((have-rest-arg? cproc)
           (println "  if (nargs < ~a)" req)
           (println "     Scm_Error(\"~s requires at least ~s arg(s)\");" name req)
           )
          ((> opt 0)
           (println "  if (nargs < ~a || nargs > ~a)" req (+ req opt))
           (println "     Scm_Error(\"~s requires at least ~s arg(s), and at most ~s arg(s)\");" name req (+ req opt))
           )
          (else
           (println "  if (nargs != ~a)" req)
           (println "     Scm_Error(\"~s requires exactly ~s arg(s)\");" name req)
           ))
    (println "  SCM_FOR_EACH(cp, cp) {")
    (println "    SCM_APPEND(code, tail, Scm_Compile(SCM_CAR(cp), env, SCM_COMPILE_NORMAL));")
    (println "    if (SCM_PAIRP(SCM_CDR(cp))) {")
    (println "      SCM_APPEND1(code, tail, SCM_VM_INSN(SCM_VM_PUSH));")
    (println "    }")
    (println "  }")
    ))

(define (emit-record cproc)
  (let* ((scm-func-name (ensure-string (scheme-name-of cproc)))
         (c-func-name (c-name-of cproc)))
    (println "static SCM_DEFINE_STRING_CONST(~a_NAME, \"~a\", ~a, ~a);"
             c-func-name
             scm-func-name
             (string-length scm-func-name)
             (string-length scm-func-name))
    (println "static SCM_DEFINE_SUBR(~a_STUB, ~a, ~a, SCM_OBJ(&~a_NAME), ~a, ~a, NULL);"
             c-func-name
             (num-reqargs-of cproc)
             (if (or (have-rest-arg? cproc) (> (num-optargs-of cproc) 0)) 1 0)
             c-func-name
             c-func-name
             (or (inliner-of cproc) "NULL"))
    (newline)))

;;-----------------------------------------------------------------
;; Generic function
;;

;; (define-cgeneric scheme-name c-name
;;    [(extern)]
;;    [(fallback "fallback")]
;;    [(setter setter-desc)])

(define-class <cgeneric> (<setter-mixin> <stub>)
  ((extern?  :initform #f :init-keyword :extern? :accessor extern?)
   (fallback :initform "Scm_NoNextMethod" :init-keyword :fallback
             :accessor fallback-of)
   ))

(define-method emit-definition ((self <cgeneric>))
  (unless (extern? self) (print "static "))
  (println "SCM_DEFINE_GENERIC(~a, ~a, NULL);"
           (c-name-of self) (fallback-of self))
  (newline))

(define-method emit-initializer ((self <cgeneric>))
  (println "  Scm_InitBuiltinGeneric(&~a, ~s, module);"
           (c-name-of self) (symbol->string (scheme-name-of self)))
  (next-method))

(define (process-define-cgeneric form)
  (unless (and (>= (length form) 3)
               (symbol? (cadr form))
               (string? (caddr form)))
    (error "malformed define-cgeneric"))
  (let ((gf (make <cgeneric> :scheme-name (cadr form) :c-name (caddr form))))
    (for-each (lambda (form)
                (cond ((not (pair? form))
                       (error "bad gf form:" form))
                      ((eq? (car form) 'extern)  (set! (extern? gf) #t))
                      ((eq? (car form) 'fallback)
                       (if (and (pair? (cdr form)) (string? (cadr form)))
                           (set! (fallback-of gf) (cadr form))
                           (error "bad fallback form:" form)))
                      ((eq? (car form) 'setter)
                       (unless (pair? (cdr form))
                         (error "bad setter form in" form))
                       (process-setter gf (cdr form)))
                      (else (error "bad gf form:" form))))
              (cdddr form))
    (emit-definition gf)))

(define-method process-setter ((gf <cgeneric>) setter)
  (cond
   ((symbol? (car decl))
    (set! (setter-of cproc) (car decl))
    (set! (setter-c-name-of cproc) (get-c-name *file-prefix* (car decl))))
   (else
    (error "bad form of anonymous setter:" `(setter ,decl)))))

(define (get-c-generic-name name)
  (cond ((find (lambda (x) (eq? (scheme-name-of x) name))
               (get-stubs <cgeneric>))
         => c-name-of)
        (else #f)))

;;-----------------------------------------------------------------
;; Methods
;;

;; (define-cmethod scheme-name (argspec ...)
;;    [ (c-generic-name "CGenericName") ]
;;    assertions ...
;;    body ...)

(define-class <cmethod> (<procstub>)
  ((specializers :init-keyword :specializers :accessor specializers-of)
   (c-generic    :initform #f    :accessor c-generic-of)
   ))

(define (process-define-cmethod form)
  (unless (>= (length form) 4) (error "malformed define-cmetihod:" form))
  (let ((scheme-name (cadr form))
        (arglist     (caddr form))
        (body        (cdddr form)))
    (unless (symbol? scheme-name)
      (error "malformed define-cmethod:" form))
    (receive (args specializers numargs have-optarg?)
        (parse-specialized-args arglist)
      (let ((method (make <cmethod>
                          :scheme-name scheme-name
                          :c-name (get-c-name *file-prefix*
                                              (gensym (symbol->string scheme-name)))
                          :specializers specializers
                          :num-reqargs numargs
                          :args args
                          :have-rest-arg? have-optarg?
                          )))
        (for-each (lambda (stmt)
                    (cond ((string? stmt) (push-stmt! method stmt))
                          ((and (pair? stmt) (eq? (car stmt) 'c-generic-name))
                           (unless (string? (cadr stmt))
                             (error "c-generic-name requires a string:"
                                    (cadr stmt)))
                           (set! (c-generic-of method) (cadr stmt)))
                          (else
                           (error "unrecognized form in body:" stmt))))
                  body)
        (unless (c-generic-of method)
          (set! (c-generic-of method)
                (or (get-c-generic-name scheme-name)
                    (error "method can't find C name of the generic function:" scheme-name))))
        (emit-definition method)))
    ))

(define-method emit-definition ((method <cmethod>))
  (println "static ScmObj ~a(ScmNextMethod *nm_, ScmObj *SCM_FP, int SCM_ARGCNT, void *d_)"
           (c-name-of method))
  (println "{")
  (for-each emit-arg-decl (args-of method))
  (when (have-rest-arg? method)
    (println "  ScmObj SCM_OPTARGS = SCM_ARGREF(SCM_ARGCNT-1);"))
  (for-each emit-arg-unbox (args-of method))
  ;; body
  (println "  {")
  (for-each println (stmts-of method))
  (println "  }")
  (println "}")
  (newline)
  (print "static ScmClass *~a_SPEC[] = { " (c-name-of method))
  (for-each (lambda (spec) (print "~a, " spec))
            (reverse (specializers-of method)))
  (println "};")
  (println "static SCM_DEFINE_METHOD(~a_STUB, &~a, ~a, ~a, ~a_SPEC, ~a, NULL);"
           (c-name-of method) (c-generic-of method)
           (num-reqargs-of method) (if (have-rest-arg? method) "1" "0")
           (c-name-of method) (c-name-of method))
  (newline)
  )

(define-method emit-initializer ((method <cmethod>))
  (println "  Scm_InitBuiltinMethod(&~a_STUB);" (c-name-of method)))

;; returns four values: args, specializers, numreqargs, have-optarg?
(define (parse-specialized-args arglist)
  (define (badlist) (error "malformed arglist:" arglist))
  (let loop ((arglist arglist)
             (args    '())
             (specs   '()))
    (cond ((null? arglist)
           (values args specs (length args) #f))
          ((symbol? arglist)
           (values (cons (make <arg> :name arglist :count (length args)
                               :category :rest)
                         args)
                   (cons "SCM_CLASS_LIST" specs)
                   (length args) #t))
          ((not (pair? arglist)) (badlist))
          ((symbol? (car arglist))
           (loop (cdr arglist)
                 (cons (make <arg> :name (car arglist) :count (length args)
                             :category :required)
                       args)
                 (cons "SCM_CLASS_TOP" specs)))
          ((not (and (pair? (car arglist))
                     (= (length (car arglist)) 2)
                     (symbol? (caar arglist))
                     (string? (cadar arglist))))
           (badlist))
          (else (loop (cdr arglist)
                      (cons (make <arg> :name (caar arglist)
                                  :count (length args)
                                  :category :required)
                            args)
                      (cons (cadar arglist) specs)))
          )))

;;---------------------------------------------------------------
;; Miscellaneous utilities
;;

;; Get C expression that returns Scheme constant value VALUE.
(define (scheme-constant->c-constant value)
  (cond ((boolean? value) (if value "SCM_TRUE" "SCM_FALSE"))
        ((null? value)    "SCM_NIL")
        ((char? value)
         (format #f "SCM_MAKE_CHAR(~a) /* #\\~a */"
                 (char->integer value) value))
        ((integer? value)
         (format #f "Scm_MakeInteger(~a)" value))
        ((string? value)
         (format #f "SCM_MAKE_STR(~s)" value))
        ((keyword? value)
         (format #f "SCM_MAKE_KEYWORD(\"~a\")" value))
        ((eq? value *unbound*)
         "SCM_UNBOUND")
        ((equal? value '(current-input-port))
         (format #f "SCM_OBJ(SCM_CURIN)"))
        ((equal? value '(current-output-port))
         (format #f "SCM_OBJ(SCM_CUROUT)"))
        ((equal? value '(current-error-port))
         (format #f "SCM_OBJ(SCM_CURERR)"))
        ((and (pair? value) (eq? (car value) 'c))
         (format #f "~a" (cadr value)))
        (else
         (errorf "Scheme constant ~s can't be used" value))))

;; Translate Scheme name to C name
(define (get-c-name prefix scheme-name)
  (with-output-to-string
    (lambda ()
      (display (ensure-string prefix))
      (with-input-from-string (ensure-string scheme-name)
        (lambda ()
          (let loop ((c (read-char)))
            (unless (eof-object? c)
              (case c
                ((#\-) (let ((d (read-char)))
                         (cond ((eof-object? d)
                                (display #\_))
                               ((eqv? d #\>)
                                (display "_TO") (loop (read-char)))
                               (else
                                (display #\_) (loop d)))))
                ((#\?) (display #\P) (loop (read-char)))
                ((#\!) (display #\X) (loop (read-char)))
                ((#\<) (display "_LT") (loop (read-char)))
                ((#\>) (display "_GT") (loop (read-char)))
                ((#\* #\> #\@ #\$ #\% #\^ #\& #\* #\+ #\=
                  #\: #\. #\/ #\~)
                 (display #\_)
                 (display (number->string (char->integer c) 16))
                 (loop (read-char)))
                (else (display (char-downcase c)) (loop (read-char)))
                ))))
        )
      )
    )
  )

;;===================================================================
;; Main parser
;;

(define (process-if form)
  (unless (<= 2 (length form) 3)
    (error "malformed if: " form))
  (if (parse-form (cadr form))
      (parse-form (caddr form))
      (when (pair? (cdddr form))
        (parse-form (cadddr form)))))

(define (process-defined? form)
  (unless (= (length form) 2)
    (error "malformed defined?: " form))
  (assoc (cadr form) *cpp-defines*))

(define (process-begin form)
  (let loop ((f (cdr form))
             (r #f))
    (if (null? f)
        r
        (loop (cdr f) (process-form (car f))))))

(define *syntax-table*
  `((define-cproc     . ,process-define-cproc)
    (define-symbol    . ,process-define-symbol)
    (define-keyword   . ,process-define-keyword)
    (define-type      . ,process-define-type)
    (define-cgeneric  . ,process-define-cgeneric)
    (define-cmethod   . ,process-define-cmethod)
    (if               . ,process-if)
    (defined?         . ,process-defined?)
    (begin            . ,process-begin)))

(define (parse-form form)
  (cond ((string? form) (println form))
        ((not (pair? form))
         (error "bad form:" form))
        ((assq (car form) *syntax-table*)
         => (lambda (p) ((cdr p) form)))
        (else (error "bad form:" form))))

;;===================================================================
;; main entry point
;;

(define-method emit-initializer ((name <string>))
  (println "void Scm_Init_~a(ScmModule *module)" name)
  (println "{")
  (for-each emit-initializer (get-stubs <cproc>))
  (for-each emit-initializer (get-stubs <csymbol>))
  (for-each emit-initializer (get-stubs <ckeyword>))
  (for-each emit-initializer (get-stubs <cgeneric>))
  (for-each emit-initializer (get-stubs <cmethod>))
  (println "}")
  )

(define (main argv)
  (unless (and (= (length argv) 1)
               (> (string-length (car argv)) 5))
    (println "Usage: genstub FILE.stub")
    (exit 1))

  (init-config.h)

  (let* ((file (car argv))
         (base (sys-basename file))
         (filelen (string-length file))
         (baselen (string-length base))
         (prefix (substring base 0 (- baselen 5)))
         (outfile (string-append (substring file 0 (- filelen 5)) ".c")))
    (unless (file-exists? file)
      (println "Couldn't open ~a" file)
      (exit 1))
    (set! *file-prefix* (string-append (get-c-name "" prefix) "_"))
    (with-output-to-file outfile
      (lambda ()
        (println "/* Generated by genstub.  Do not edit. */")
        (println "/* source: ~a */" file)
        (println "#include <gauche.h>")
        (newline)
        (with-input-from-file file
          (lambda ()
            (let loop ((form (read)))
              (unless (eof-object? form)
                (parse-form form)
                (loop (read))))))
        (emit-initializer (get-c-name "" prefix))
        )))
  0)

;; Local variables:
;; mode: scheme
;; end:
