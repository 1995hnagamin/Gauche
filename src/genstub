;;;
;;; genstub - simple stub generator for Gauche
;;;  
;;;   Copyright (c) 2000-2008 Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: genstub,v 1.148 2008-05-13 05:44:15 shirok Exp $
;;;


;; Main functionalities of genstub is now in gauche.cgen.stub module.
;; This is just a front-end.

(use gauche.parseopt)
(use gauche.parameter)
(use gauche.cgen)
(use gauche.cgen.stub)
(use file.util)
(use util.match)

(define (main args)
  (let1 predef-syms '()
    (let-args (cdr args)
        ((#f "D=s" => (lambda (sym) (push! predef-syms sym)))
         (else _ (usage))
         . args)
      (match args
        ((file) (do-it file predef-syms))
        (_ (usage)))))
  0)

(define (do-it file predef-syms)
  (let1 prefix
      (cgen-safe-name-friendly (path-sans-extension (sys-basename file)))
    (unless (file-exists? file)
      (format #t "Couldn't open ~a\n" file)
      (exit 1))
    (parameterize ([cgen-current-unit
                    (make <cgen-stub-unit>
                      :name (path-sans-extension file)
                      :c-name-prefix (string-append prefix "_")
                      :preamble
                      '("/* Generated by genstub.  Do not edit. */")
                      :pre-decl
                      (map (cut format "#define ~a" <>) predef-syms)
                      :init-prologue
                      (format "void Scm_Init_~a(ScmModule *mod)\n{\n" prefix)
                      )]
                   )
      (guard (e [(<cgen-stub-error> e) (write (ref e'message)) (exit 1)])
        (with-input-from-file file
          (cut port-fold
               ;; We treat the initial raw strings specially---they will be
               ;; in decl part.  The flag decl-strings? tracks that.
               (lambda (form decl-strings?)
                 (cond [(and decl-strings? (string? form)) (cgen-decl form) #t]
                       [else (cgen-stub-parse-form form) #f]))
               #t read)))
      (cgen-emit-c (cgen-current-unit)))))

(define (usage)
  (print "Usage: genstub [-D symbol] FILE.stub")
  (exit 1))

;; Local variables:
;; mode: scheme
;; end:
