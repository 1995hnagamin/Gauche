;;;
;;; exclib.stub - exceptions
;;;
;;;   Copyright (c) 2002 Shiro Kawai (shiro@acm.org)
;;;
;;;   Permission to use, copy, modify, distribute this software and
;;;   accompanying documentation for any purpose is hereby granted,
;;;   provided that existing copyright notices are retained in all
;;;   copies and that this notice is included verbatim in all
;;;   distributions.
;;;   This software is provided as is, without express or implied
;;;   warranty.  In no circumstances the author(s) shall be liable
;;;   for any damages arising out of the use of this software.
;;;
;;; $Id: exclib.stub,v 1.6 2002-07-23 14:06:13 shirok Exp $
;;;

"
#include <gauche/class.h>
#include <gauche/exception.h>
"

;;
;; Exception procedures
;;

(define-cproc error (reason &rest args)
  (assert (string? reason))
  (return "Scm_SError"))

(define-cproc errorf (fmt &rest args)
  (return "Scm_FError"))

(define-cproc with-error-handler (handler thunk)
  "  if (!SCM_PROCEDURE_TAKE_NARG_P(handler, 1)) {
    Scm_Error(\"error handler must take at least 1 argument, but got %S\",
              handler);
  }
  if (!SCM_PROCEDURE_THUNK_P(thunk)) {
    Scm_Error(\"thunk required, but got %S\", thunk);
  }
  SCM_RETURN(Scm_VMWithErrorHandler(handler, thunk));")

;; srfi-18 primitive exception mechanism
(define-cproc current-exception-handler ()
  "  SCM_RETURN(Scm_VM()->exceptionHandler);")

(define-cproc with-exception-handler (handler thunk)
  "  if (!SCM_PROCEDURE_TAKE_NARG_P(handler, 1)) {
    Scm_Error(\"exception handler must take at least 1 argument, but got %S\",
              handler);
  }
  if (!SCM_PROCEDURE_THUNK_P(thunk)) {
    Scm_Error(\"thunk required, but got %S\", thunk);
  }
  SCM_RETURN(Scm_VMWithExceptionHandler(handler, thunk));")

(define-cproc raise (exception) (return "Scm_VMThrowException"))

;;
;; Exception class hierarchy
;;

(define-cclass <exception> #f "Scm_ExceptionClass"
  ()
  ())

;;
;; Error class hierarchy
;;

"static void error_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
    ScmClass *k = SCM_CLASS_OF(obj);
    Scm_Printf(port, \"#<%A \\\"%30.1A\\\">\",
               Scm__InternalClassName(k), SCM_ERROR_MESSAGE(obj));
 }"

(define-cclass <error> "ScmError" "Scm_ErrorClass"
  ()
  ((message))
  (allocator
   "ScmError *e = SCM_ALLOCATE(ScmError, klass);
    SCM_SET_CLASS(e, klass);
    e->message = SCM_FALSE;
    return SCM_OBJ(e);")
  (printer (c "error_print"))
  )

(define-cclass <system-error> "ScmSystemError" "Scm_SystemErrorClass"
  ("Scm_ErrorClass")
  ((message :c-name "common.message")
   (errno   :c-name "error_number" :type small-positive-integer))
  (allocator
   "ScmSystemError *e = SCM_ALLOCATE(ScmSystemError, klass);
    SCM_SET_CLASS(e, klass);
    e->common.message = SCM_FALSE;
    e->error_number = 0;
    return SCM_OBJ(e);")
  (printer (c "error_print"))
  )

;; Local variables:
;; mode: scheme
;; end:
