;;;
;;; exclib.stub - exceptions
;;;  
;;;   Copyright (c) 2000-2003 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: exclib.stub,v 1.10 2003-12-05 01:11:12 shirok Exp $
;;;

"
#include <gauche/class.h>
#include <gauche/exception.h>
"

;;
;; Exception procedures
;;

(define-cproc error (reason &rest args)
  (return "Scm_SError"))

(define-cproc errorf (fmt &rest args)
  (return "Scm_FError"))

(define-cproc with-error-handler (handler thunk)
  "  if (!SCM_PROCEDURE_TAKE_NARG_P(handler, 1)) {
    Scm_Error(\"error handler must take at least 1 argument, but got %S\",
              handler);
  }
  if (!SCM_PROCEDURE_THUNK_P(thunk)) {
    Scm_Error(\"thunk required, but got %S\", thunk);
  }
  SCM_RETURN(Scm_VMWithErrorHandler(handler, thunk));")

;; srfi-18 primitive exception mechanism
(define-cproc current-exception-handler ()
  "  SCM_RETURN(Scm_VM()->exceptionHandler);")

(define-cproc with-exception-handler (handler thunk)
  "  if (!SCM_PROCEDURE_TAKE_NARG_P(handler, 1)) {
    Scm_Error(\"exception handler must take at least 1 argument, but got %S\",
              handler);
  }
  if (!SCM_PROCEDURE_THUNK_P(thunk)) {
    Scm_Error(\"thunk required, but got %S\", thunk);
  }
  SCM_RETURN(Scm_VMWithExceptionHandler(handler, thunk));")

(define-cproc raise (exception) (return "Scm_VMThrowException"))

(define-cproc report-error (exception)
  (return <void> "Scm_ReportError"))

;;
;; Exception class hierarchy
;;

(define-cclass <exception> #f "Scm_ExceptionClass"
  ()
  ())

;;
;; Error class hierarchy
;;

"static void error_print(ScmObj obj, ScmPort *port, ScmWriteContext *ctx)
 {
    ScmClass *k = SCM_CLASS_OF(obj);
    Scm_Printf(port, \"#<%A \\\"%30.1A\\\">\",
               Scm__InternalClassName(k), SCM_ERROR_MESSAGE(obj));
 }"

(define-cclass <error> "ScmError*" "Scm_ErrorClass"
  ()
  ((message))
  (allocator
   "ScmError *e = SCM_ALLOCATE(ScmError, klass);
    SCM_SET_CLASS(e, klass);
    e->message = SCM_FALSE;
    return SCM_OBJ(e);")
  (printer (c "error_print"))
  )

(define-cclass <system-error> "ScmSystemError*" "Scm_SystemErrorClass"
  ("Scm_ErrorClass")
  ((message :c-name "common.message")
   (errno   :c-name "error_number" :type <uint>))
  (allocator
   "ScmSystemError *e = SCM_ALLOCATE(ScmSystemError, klass);
    SCM_SET_CLASS(e, klass);
    e->common.message = SCM_FALSE;
    e->error_number = 0;
    return SCM_OBJ(e);")
  (printer (c "error_print"))
  )

;; Local variables:
;; mode: scheme
;; end:
