;;;
;;; exclib.stub - exceptions
;;;  
;;;   Copyright (c) 2000-2008  Shiro Kawai  <shiro@acm.org>
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;; $Id: exclib.stub,v 1.23 2008-05-10 13:36:18 shirok Exp $
;;;

"
#include <gauche/class.h>
#include <gauche/exception.h>
"

;;
;; Exception procedures
;;

;; NB: rewind-before keyword arg is EXPERIMENTAL.
(define-cproc with-error-handler (handler thunk
                                          &keyword (rewind-before::<boolean> #f))
  (unless (SCM_PROCEDURE_TAKE_NARG_P handler 1)
    (Scm_Error "error handler must take at least 1 argument, but got %S"
               handler))
  (unless (SCM_PROCEDURE_THUNK_P thunk)
    (Scm_Error "thunk required, but got %S" thunk))
  (if rewind-before
    (result (Scm_VMWithGuardHandler handler thunk))
    (result (Scm_VMWithErrorHandler handler thunk))))

;; srfi-18 primitive exception mechanism
(define-cproc current-exception-handler ()
  (result (-> (Scm_VM) exceptionHandler)))

(define-cproc with-exception-handler (handler thunk)
  (call Scm_VMWithExceptionHandler))

(define-cproc raise (exception) (call Scm_Raise))

(define-cproc report-error (exception) (call <void> Scm_ReportError))

;;
;; Condition procedures (srfi-35)
;;

(define-cproc condition? (obj)
  (call <boolean> SCM_CONDITIONP))

(define-cproc condition-has-type? (c k)
  (call <boolean> Scm_ConditionHasType))

(define-cproc make-compound-condition (&rest conditions)
  (call Scm_MakeCompoundCondition))


;; Local variables:
;; mode: scheme
;; end:
