;;;
;;; libnative.scm - Playing with native code
;;;
;;;   Copyright (c) 2021  Shiro Kawai  <shiro@acm.org>
;;;
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;

;; This is EXPERIMENTAL and UNDER DEVELOPMENT.

;; Nasty stuff.
;; These bindings are available only during the bootstrap process,
;; for we don't want ordinary code to call those internal routines.
;; For now, it is just a stub for more experiment.  Eventually ffi and jit
;; will use those routines.

(select-module gauche.bootstrap)

(inline-stub 
 (.include "gauche/priv/nativeP.h")
 (define-cproc %%call-native (code::<uvector> size::<fixnum> offset::<fixnum>
                              filler rettype)
   (return (Scm__VMCallNative (Scm_VM) code size offset filler rettype)))
 )

(select-module gauche.internal)

;; This part of code is generated by gen-native.scm

;; label    offset
;; entry6:       0
;; entry5:       7
;; entry4:      14
;; entry3:      21
;; entry2:      28
;; entry1:      35
;; entry0:      42
;; func:        48
;; arg0:        56
;; arg1:        64
;; arg2:        72
;; arg3:        80
;; arg4:        88
;; arg5:        96
;; end:        104
(define
 *amd64-call-code*
 '#u8(#x4c #x8b #xd #x59 #x0 #x0 #x0 #x4c #x8b #x5 #x4a #x0 #x0 #x0 #x48
      #x8b #xd #x3b #x0 #x0 #x0 #x48 #x8b #x15 #x2c #x0 #x0 #x0 #x48 #x8b
      #x35 #x1d #x0 #x0 #x0 #x48 #x8b #x3d #xe #x0 #x0 #x0 #xff #x25 #x0
      #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0
      #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0
      #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0
      #x0 #x0 #x0 #x0 #x0 #x0 #x0 #x0))
(define
 call-amd64
 (let
  ((%%call-native
    (global-variable-ref (find-module 'gauche.bootstrap) '%%call-native))
   (entry-offsets '(42 35 28 21 14 7 0))
   (arg-offsets
    '(() (21) (28 36) (35 43 51) (42 50 58 66) (49 57 65 73 81)
      (56 64 72 80 88 96)))
   (func-offsets '(6 13 20 27 34 41 48)))
  (^
   (ptr args rettype)
   (let*
    ((nargs (length args))
     (filler
      (cons `(,(~ func-offsets nargs) p ,ptr)
       (map (^ (offs arg) (cons offs arg)) (~ arg-offsets nargs) args))))
    (%%call-native *amd64-call-code* (- 104 (~ entry-offsets nargs))
     (~ entry-offsets nargs) filler rettype)))))
