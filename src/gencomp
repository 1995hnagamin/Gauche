;;;
;;; gencomp - convert compiled code into static C data
;;;
;;;   Copyright (c) 2004-2009 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: gencomp,v 1.35 2008-05-13 05:44:15 shirok Exp $
;;;

;;;
;;; This is a hack to "compile" the Scheme-written compiler into static
;;; C data structure, so that it can be linked into libgauche.
;;;
;;; Eventually this code will grow to a generic tool to create compiled
;;; executable from Scheme; for the time being, however, we concentrate
;;; on making just a compiler work.  So there are quite a few assumptions
;;; in a way the source is written.
;;;

(use gauche.parseopt)
(use gauche.cgen.precomp)
(use gauche.experimental.app)
(use srfi-1)
(use file.util)
(use util.match)

(define (main args)
  (let1 predef-syms '()
    (let-args (cdr args)
        ([keep-private-macro "keep-private-macro=s" ""]
         [ext-module "ext-module=s" #f]
         [output-base "o|output=s" #f]
         [#f "D=s" => (lambda (sym) (push! predef-syms sym))]
         . args)
      (let1 macros-to-keep ($ map string->symbol
                              $ string-split keep-private-macro #\,)
        (match args
          [() (usage)]
          [(src)
           ($ cgen-with-ext-module ext-module
              (cut cgen-precompile src output-base
                   :ext-initializer ext-module
                   :predef-syms predef-syms
                   :macros-to-keep macros-to-keep))]
          [(srcs ...)
           (when output-base
             (exit 1 "-o|-output option can be used when there's exactly one \
                      input file."))
           ($ cgen-with-ext-module ext-module
              (lambda ()
                (dolist [src srcs]
                  (let* ([ext-init? (equal? (base-sans-ext src)
                                            (base-sans-ext ext-module))]
                         [subinits (if ext-init?
                                     (delete (base-sans-ext src)
                                             (map base-sans-ext args))
                                     '())])
                    (cgen-precompile src #f
                                     :ext-initializer ext-init?
                                     :sub-initializers subinits
                                     :predef-syms predef-syms
                                     :macros-to-keep macros-to-keep)))))]
          ))))
  0)

(define (usage)
  (print "Usage: gosh gencomp [options] <file.scm> ...")
  (print "Options:")
  (print "  --keep-private-macro=NAME,NAME,...")
  (print "  --ext-module=MODULE-NAME")
  (print "  --output=FILE.C"))

(define (base-sans-ext path)
  (and path (path-sans-extension (sys-basename path))))
         
;; Local variables:
;; mode: scheme
;; end:
