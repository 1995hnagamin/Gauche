;;;
;;; gencomp - convert compiled code into static C data
;;;
;;;   Copyright (c) 2004-2008 Shiro Kawai, All rights reserved.
;;;   
;;;   Redistribution and use in source and binary forms, with or without
;;;   modification, are permitted provided that the following conditions
;;;   are met:
;;;   
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;  
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;  
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;  
;;;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;  
;;;  $Id: gencomp,v 1.35 2008-05-13 05:44:15 shirok Exp $
;;;

;;;
;;; This is a hack to "compile" the Scheme-written compiler into static
;;; C data structure, so that it can be linked into libgauche.
;;;
;;; Eventually this code will grow to a generic tool to create compiled
;;; executable from Scheme; for the time being, however, we concentrate
;;; on making just a compiler work.  So there are quite a few assumptions
;;; in a way the source is written.
;;;

(use gauche.cgen.precomp)
(use gauche.parseopt)
(use util.match)

(define (main args)
  (let1 predef-syms '()
    (let-args (cdr args)
        ([keep-private-macro "keep-private-macro=s" ""]
         [ext-module "ext-module=s" #f]
         [output-base "o|output=s" #f]
         [#f "D=s" => (lambda (sym) (push! predef-syms sym))]
         . args)
      (let1 macros-to-keep
          (map string->symbol (string-split keep-private-macro #\,))
        (match args
          [(scmfile)
           (cgen-with-ext-module ext-module
                                 (cut cgen-precompile scmfile output-base
                                      :predef-syms predef-syms
                                      :macros-to-keep macros-to-keep))]
          [else
           (exit 0 "Usage: gosh gencomp [options] <file.scm>\n\
                    Options:\
                    \n  --keep-private-macro=NAME,NAME,...\
                    \n  --ext-module=MODULE-NAME\
                    \n  --output=FILE.C\n")]))))
  0)

;; Local variables:
;; mode: scheme
;; end:
