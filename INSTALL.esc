#? /usr/local/bin/gosh
<? ;; Process this file with escm
(define japanese? (equal? (sys-getenv "LANG") "ja_JP"))
(define (header ja en)
  (format #t "[~a]\n------------------------------------------"
          (if japanese? ja en)))
(define-syntax if-lang
  (syntax-rules (else)
    ((_ "collect-then" then-expr () test)
     (if test (begin . then-expr)))
    ((_ "collect-then" then-expr () test else body ...)
     (if-lang "collect-else" then-expr () test body ...))
    ((_ "collect-then" (then-expr ...) () test body1 body ...)
     (if-lang "collect-then" (then-expr ... body1) () test body ...))
    ((_ "collect-else" then-expr else-expr test)
     (if test (begin . then-expr) (begin . else-expr)))
    ((_ "collect-else" then-expr (else-expr ...) test body1 body ...)
     (if-lang "collect-else" then-expr (else-expr ... body1) test body ...))
    ((_ test body ...)
     (if-lang "collect-then" () () test body ...))))
!>

<? (if-lang japanese? !>
                         Gaucheのコンパイルとインストール
<? else !>
                        Compiling and Installing Gauche
<? ) !>

$Id: INSTALL.esc,v 1.5 2001-10-16 12:00:26 shirok Exp $
<? (if-lang japanese? !>
注: Gaucheは開発中のシステムで、頻繁に更新しています。次のURLで最新の
情報が得られます:<? else !>
Note: The Gauche system is a work in progress and frequently updated.
Check out the latest information on the site:
<? ) !>
  http://www.shiro.dreamhost.com/scheme/gauche/

<? (header "簡単な方法" "Quick Start") !>

   % ./configure
   % make
   % make test
   % make install
<? (if-lang japanese? !>
これで、Gaucheシステムが /usr/local/bin, /usr/local/lib/gauche及び
/usr/local/share/gauche以下にインストールされます。

現在はαバージョンのため、インストールされるバイナリはデバッグ情報を含んでいて、
1MB〜2MBのサイズがあります。stripすれば500KB以下になります。
<? else !>
Things will be installed under /usr/local/bin, /usr/local/lib/gauche,
and /usr/local/share/gauche.

The current status is alpha, and the installed binary contains
debug information and is 1MB-2MB in size.  You can strip it
and it'll be less than 500KB.
<? ) !>

<? (header "文字エンコーディングの選択" "Choosing Character Encoding") !>

<? (if-lang japanese? !>
デフォルトでは、Gaucheは内部文字エンコーディングとしてEUC-JPを使います。
--enable-multibyte=ENCODING というオプションをconfigureに渡すことで、
内部文字エンコーディングを変えることができます。
<? else !>
By default, Gauche is compiled with EUC-JP as a native character encoding.
You can give a --enable-multibyte=ENCODING option to switch the native
encoding.
<? ) !>

  ./configure --enable-encoding=euc-jp  ;; EUC-JP (default)
  ./configure --enable-encoding=utf-8   ;; UTF-8
  ./configure --enable-encoding=sjis    ;; Shift JIS
  ./configure --enable-encoding=no      ;; No multibyte string

<? (if-lang japanese? !>
Gaucheはiconvを利用したキャラクタエンコーディングを変換するモジュールを持っています。
システムによっては、iconvがサポートされていなかったり、サポートされていても
エンコーディングに制限があったりバグがあるかもしれません。--with-iconvオプションで
外部のiconvライブラリを利用することができます。
<? else !>
Gauche has a module to convert various character encodings, using
iconv() function.   Some systems lack iconv, or have the one with
limited capability or bugs, and you may want to use an external
iconv library.  If so, you can specify the location of your external
iconv library by --with-iconv option.
<? ) !>

  ./configure --with-iconv=DIR

<? (if-lang japanese? !>
例えば --with-iconv=/usr/local とすれば、Gaucheはiconv.hを/usr/local/include
から、libiconvを/usr/local/libから探します。もしあなたのiconvライブラリが
libiconv以外の名前 (libmyconvとか) だったとしたら、
--with-iconv-lib=myconv というオプションも指定して下さい。

外部のiconvライブラリとしては、Bruno Haible氏のlibiconvが以下から入手可能です。
http://clisp.cons.org/~haible/packages-libiconv.html
<? else !>
For example, if your say --with-iconv=/usr/local, Gauche looks
for the header iconv.h from /usr/local/include and the library
libiconv from /usr/local/lib.
In case if your iconv library is named other than libiconv, say,
libmyconv, you can also specify --with-iconv-lib=myconv to tell
Gauche to link against the library.

You can obtain Bruno Haible's libiconv library from here:
http://clisp.cons.org/~haible/packages-libiconv.html
<? ) !>

<? (header "SLIBの場所" "Selecting SLIB location") !>

<? (if-lang japanese? !>
SLIBは、ポータブルなSchemeライブラリで、いろいろ便利な機能が
完全にSchemeで書かれています。GaucheはSLIBがインストールされていれば
その機能を利用することができます。
<? else !>
SLIB is a portable Scheme library containing various useful functions,
entirely written in Scheme.  Gauche can use SLIB features if you have
it on your system.
<? ) !>

<? (if-lang japanese? !>
configureスクリプトは、/usr/local/slibなどいくつかの基本的なディレクトリ
からSLIBを自動的に探します。もしあなたのSLIBシステムが標準的ではない場所に
インストールされていたら、次のオプションでその場所を指定してください。
<? else !>
The configure script tries to find where SLIB is installed.  It looks
for some typical directories like /usr/local/slib or /usr/share/slib.
If you installed your SLIB in some non-standard location, you can tell
it to the configure script as follows:
<? ) !>

   ./configure --with-slib=PATH

<? (if-lang japanese? !>
ここで、PATHはSLIBがインストールされたパスです。
<? else !>
where PATH is the path you installed your SLIB.
<? ) !>

<? (if-lang japanese? !>
GauchehはSLIB無しでも動作します。SLIBを使う必要がなければ、このオプションは
気にしなくてよいです。
<? else !>
Gauche works without SLIB, anyway.  If you're not interested, you
don't need to care about this.
<? ) !>


<? (header "実行時のライブラリパス" "Run-time library path") !>

<? (if-lang japanese? !>
しばしば、環境のコントロールができない箇所でGaucheを走らせなければならない
場合があります。例えばCGIスクリプトがそうです。もし、Gaucheが標準的でない
場所にインストールされた共有ライブラリに依存している場合、それが問題となります。

例えば、最新のlibiconv.soを自分でコンパイルして /home/yours/lib に
インストールしたとします。--with-iconv=/home/yours/lib としてconfigure
すれば、Gaucheはあなたのiconvを使うようにコンパイルされます。実行時に適切
な環境変数、例えばLD_LIBRARY_PATHなどを設定しておけば、Gaucheの
インタプリタgoshはlibiconv.soを捜し出すことができます。しかし、
CGIスクリプトはWeb serverによって起動され、Web serverはLD_LIBRARY_PATH
を設定してくれないかもしれません。その場合、goshはlibiconv.soが見つけられずに
起動に失敗するかもしれません。

コンパイラによっては、プログラムが依存している共有ライブラリのパスをプログラム
本体に書き込んでしまえるオプションを持っています。configureの --with-rpath
オプションはそれを利用します。--with-rpath=DIRとすると、実行時にDIRから
共有ライブラリを探すような設定になります。このオプションは今のところgccでしか
動作しません。
<? else !>
In some cases, your have to run Gauche under the environment
you don't have much control.  One of such cases is when your
script is run as a CGI script.  It may become a problem that
your build of Gauche depends on some dynamically loaded libraries
that are installed in non-standard location.

For example, suppose you install a new libiconv.so in /home/yours/lib,
and compile Gauche with --with-iconv=/home/yours/lib.  You have
set up correct environment variables such as LD_LIBRARY_PATH, so
you can invoke Gauche interpreter gosh without a problem.  Now,
you write a CGI script in C.  Unfortunately, the web server
doesn't set LD_LIBRARY_PATH as you desired, and your script never
runs on the server, for the interpreter can't find libiconv.so
in the system default path.

Some compilers have an option that writes exact path of shared
libraries that the binary depends on.  A configure option --with-rpath
utilizes the feature.  When an option --with-rpath=DIR is given,
configure sets up a build process so that the shared libraries
are looked from DIR.   This works only on gcc, however.
<? ) !>


<? (header "インストール先の指定" "Customizing install location") !>

<? (if-lang japanese? !>
次のようにconfigureスクリプトを起動することにより、インストール先の
ディレクトリを指定できます。
<? else !>
Call configure with those parameters to specify where to install.
<? ) !>

   % ./configure --prefix=$PREFIX  --exec-prefix=$EXEC_PREFIX

<? (if-lang japanese? !>
--prefix オプションが指定されなければ、 /usr/local が指定されたものとみなされます。
--exec-prefix オプションが指定されなければ、EXEC_PREFIXはPREFIXと同じものに
なります。
<? else !>
If --prefix option is omitted, /usr/local is assumed as PREFIX.
If --exec-prefix option is omitted, EXEC_PREFIX is set the same as PREFIX.
<? ) !>

<? (if-lang japanese? !>
インストールされるファイルの内訳は以下の通りです。
<? else !>
The files are installed in those locations:
<? ) !>

  $EXEC_PREFIX/bin/*
<? (if-lang japanese? !>
     インタプリタ (gosh) とコンフィグレーションスクリプト (gauche-config)
<? else !>
     The interpreter (gosh) and configuration script (gauche-config).
<? ) !>

  $EXEC_PREFIX/lib/*
<? (if-lang japanese? !>
     ライブラリ (libgauche.a).
<? else !>
     Library (libgauche.a).
<? ) !>

  $PREFIX/share/gauche/VERSION/include/*
<? (if-lang japanese? !>
     libgaucheをリンクするアプリケーションに必要なヘッダーファイル
<? else !>
     Header files required to create applications using libgauche.
<? ) !>

  $PREFIX/share/gauche/VERSION/lib/*
<? (if-lang japanese? !>
     マシンに依存しないSchemeファイル
<? else !>
     Machine-independent Scheme files.
<? ) !>

  $EXEC_PREFIX/lib/gauche/VERSION/ARCHITECTURE/*
<? (if-lang japanese? !>
     マシンに依存するファイル (.so, gosh, gauche-config, libgauche.a)
<? else !>
     Machine-dependent files (.so files, gosh, gauche-config, and libgauche.a)
<? ) !>

  $PREFIX/share/gauche/site/lib/*
  $EXEC_PREFIX/lib/gauche/site/VERSION/ARCHITECTURE/*
<? (if-lang japanese? !>
     ユーザが独自にインストールするマシン非依存／依存ファイルのデフォルトの置き場所。
<? else !>
     These are default locations where user installed machine-indenpedent/
     dependent files will go.
<? ) !>

