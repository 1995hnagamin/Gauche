dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.91 2003-05-13 23:00:01 shirok Exp $
AC_PREREQ(2.54)
AC_INIT(Gauche, 0.7_pre3, shiro@acm.org)
AC_REVISION($Revision: 1.91 $)
AC_CANONICAL_SYSTEM
AC_CONFIG_HEADER(src/gauche/config.h)

dnl ==========================================================
dnl Process args given to configre

dnl --enable-multibyte
AC_ARG_ENABLE(multibyte, [  --enable-multibyte[=ENCODING]:  Enables multibyte string handling.
                          This option is ON by default.  Following encodings
                          are currently recognized:
                             euc-jp     EUC-JP code (default)
                             utf-8      UTF-8
                             sjis       Shift-JIS
                             no         No multibyte support ], [
 case $enable_multibyte in
   euc-jp|eucjp|yes)  AC_DEFINE(GAUCHE_CHAR_ENCODING_EUC_JP,1,[Define if Gauche handles multi-byte character as EUC-JP]);;
   utf-8|utf8)        AC_DEFINE(GAUCHE_CHAR_ENCODING_UTF_8,1,[Define if Gauche handles multi-byte character as UTF-8]);;
   sjis|shift-jis)    AC_DEFINE(GAUCHE_CHAR_ENCODING_SJIS,1,[Define if Gauche handles multi-byte character as Shift JIS]);;
   no|none) ;;
   *) echo "unrecognized encoding option: '$enable_multibyte'; type ./configure --help for available options"
      exit 1;;
 esac], [ AC_DEFINE(GAUCHE_CHAR_ENCODING_EUC_JP,1,[Define if Gauche handles multi-byte character as EUC-JP])])

dnl --with-slib
SLIB_DIR=/usr/local/slib
AC_ARG_WITH(slib, [  --with-slib[=PATH]:     Configure Gauche's slib module to use Aubrey
                          Jaffer's SLIB installed under PATH.  If PATH is
                          not specified, or this option is omitted, Gauche
                          still tries to find your slib installation from
                          some typical places.], [
 case $with_slib in 
   no)  search_slib=no;;
   yes) search_slib=yes;;
   *)   search_slib=no; SLIB_DIR=$with_slib;;
 esac
], [ search_slib=yes ])

if test $search_slib = "yes"; then
  AC_MSG_CHECKING(slib)
  slib_found=no
  for dir in /usr/share/slib /usr/local/slib /usr/local/lib/slib /usr/local/share/slib /usr/src/slib /opt/share/slib; do
    if test -f $dir/require.scm; then
       SLIB_DIR=$dir
       AC_MSG_RESULT($SLIB_DIR)
       slib_found=yes
       break
    fi
  done
  if test $slib_found = "no"; then
    AC_MSG_RESULT([not found, using fallback $SLIB_DIR])
  fi
fi
AC_SUBST(SLIB_DIR)

dnl --with-iconv, --with-iconv-lib
iconv_lib=
ICONV_NAME=iconv
AC_ARG_WITH(iconv, [  --with-iconv[=PATH]:    Use iconv function installed under PATH.
                          Gauche's charconv module uses iconv if it is
                          available.   If your system has iconv function
                          in non-trivial location, specify this option.
                          If you don't want to use iconv for some reason,
                          say --without-iconv. ], [
  case $with_iconv in
    no|yes) iconv_lib="" ;;
    *)   iconv_ipath="-I$with_iconv/include";
         iconv_lpath="$LDFLAGS -L$with_iconv/lib";
         iconv_lib="-liconv";;
  esac], [with_iconv=yes])

AC_ARG_WITH(iconv-lib, [  --with-iconv-lib=LIB:   If your system needs to use external library for
                          iconv and which is not libiconv, specify it.  For
                          example, if you need -lconv to use iconv, say
                            --with-iconv-lib=conv], [
  ICONV_NAME="$with_iconv_lib"; iconv_lib="-l$with_iconv_lib" 
  ])
AC_SUBST(ICONV_NAME)
LIBS="$LIBS $iconv_lib"

dnl --with-local=PATH:...
dnl  
AC_ARG_WITH(local, [  --with-local=PATH:PATH...:  For each PATH, add PATH/include
                          to the include search paths and PATH/lib to the
                          library search paths.  Useful if you have some
                          libraries installed in non-standard places. ], [
  case $with_local in
    yes|no|"") ;;  #no effect
    *) paths=`echo $with_local | tr ':' ' '`
       LOCAL_INC=`for p in $paths; do echo "-I$p/include"; done`
       LOCAL_LIB=`for p in $paths; do echo "-L$p/lib"; done`;;
  esac
])
AC_SUBST(LOCAL_INC)
AC_SUBST(LOCAL_LIB)
dnl need to add here, for it may be used by the tests below.
INCLUDES="$INCLUDES $LOCAL_INC"
CPPFLAGS="$CPPFLAGS $LOCAL_INC"
LDFLAGS="$LDFLAGS $LOCAL_LIB"

dnl --with-rpath=PATH:...
rpath=
AC_ARG_WITH(rpath, [  --with-rpath=PATH:PATH... : Use -rpath option while building dynamically
                          loadable objects (experimental).], [
  case $with_rpath in
    yes|no) ;;
    *) rpath="`echo $with_rpath | sed -e 's/^/-Wl,-rpath /' -e 's/:/ -Wl,-rpath /g'`";;
  esac
])

dnl --enable-thread=TYPE
dnl  
GAUCHE_THREAD_TYPE=none
AC_ARG_ENABLE(threads, [  --enable-threads=TYPE:  Choose thread type.  Currently only 'none' or
                           'pthreads' is supported. ], [
  case $enableval in
    pthreads) 
     GAUCHE_THREAD_TYPE=pthreads
     AC_DEFINE(GAUCHE_USE_PTHREADS,1,[Define if we use pthreads])
    ;;
    no|none)
     GAUCHE_THREAD_TYPE=none
    ;;
    *)
     AC_MSG_ERROR([invalid value $enableval for --enable-threads option (must be either none or pthreads])
    ;;
  esac
], [])

dnl Platform-dependent thread configuration.  This must be in sync
dnl with gc's configure.in.
if test $GAUCHE_THREAD_TYPE = pthreads; then
  THREADLIBS="-lpthread"
  case "$host" in
    *-*-linux*)
      AC_DEFINE(GC_LINUX_THREADS,1,[Define to use Linux threads])
      AC_DEFINE(_REENTRANT,1,[Define to use reentrant libc])
      ;;
    *-*-hpux*)
      AC_MSG_WARN("Only HP/UX 11 threads are supported.")
      AC_DEFINE(GC_HPUX_THREADS,1,[Define to use HP-UX threads])
      AC_DEFINE(_POSIX_C_SOURCE,199506L,[Define POSIX C version])
      THREADLIBS="-lpthread -lrt"
      ;;
    *-*-freebsd*)
      AC_MSG_WARN("FreeBSD does not yet fully support threads with Boehm GC.")
      AC_DEFINE(GC_FREEBSD_THREADS,1,[Define to use FreeBSD threads])
      INCLUDES="$INCLUDES -pthread"
      THREADLIBS=-pthread
      ;;
    *-*-solaris*)
      AC_DEFINE(GC_SOLARIS_THREADS,1,[Define to use Solaris threads])
      AC_DEFINE(GC_SOLARIS_PTHREADS,1,[Define to use Solaris pthreads])
      ;;
    *-*-irix*)
      AC_DEFINE(GC_IRIX_THREADS,1,[Define to use IRIX threads])
      ;;
    *-*-cygwin*)
      AC_DEFINE(GC_WIN32_THREADS,1,[Define to use Win32 threads])
      ;;
    *-*-darwin*)
      AC_DEFINE(GC_DARWIN_THREADS,1,[Define to use Darwin threads])
      AC_DEFINE(GC_PTHREADS,1,[Define to use pthreads])
      INCLUDES="$INCLUDES -I/sw/include"
      ;;
    *)
      AC_MSG_ERROR([pthread is not supported on $host])
      ;;
  esac
fi
LIBS="$LIBS $THREADLIBS"

dnl --enable-ipv6
dnl   Even if you specify --enable-ipv6, we'll check if they are
dnl   really available later, and disable the support if not.
AC_ARG_ENABLE(ipv6, AC_HELP_STRING(--enable-ipv6, [enable IPv6 support]), [
  case $enableval in
    no) enable_ipv6=no ;;
    *) enable_ipv6=yes ;;
  esac
], enable_ipv6=no)

dnl ==========================================================
dnl Checks for programs.
AC_PROG_CC
AC_PROG_CC_STDC
AC_C_CONST
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_CHECK_PROGS(AR, ar gar)
AC_CHECK_PROGS(AS, as gas)
AC_CHECK_PROGS(MAKEINFO, makeinfo)
AC_CHECK_PROGS(GZIP_PROGRAM, gzip)

AC_LIBTOOL_WIN32_DLL
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

dnl Safe default CFLAGS (usually -g -O2 if you're using gcc, empty otherwise).
dnl If the user overrides CFLAGS during configure, which is recorded.
dnl This information is used when configuring extensions.
DEFAULT_CFLAGS="$CFLAGS"
AC_SUBST(DEFAULT_CFLAGS)

dnl ==========================================================
dnl Checks for libraries.
AC_CHECK_LIB(m, sin) dnl needed to check trunc and rint below

dnl ===========================================================
dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(sys/time.h glob.h dlfcn.h stdint.h getopt.h sched.h unistd.h)
AC_CHECK_HEADERS(rpc/types.h)
AC_CHECK_HEADERS(syslog.h)
AC_CHECK_HEADERS(pty.h util.h libutil.h)

if test $with_iconv != no; then
  AC_CHECK_HEADER($ICONV_NAME.h, AC_DEFINE(HAVE_ICONV_H,1,[Define if you have iconv.h and want to use it]))
fi

dnl Checks availability of ipv6 support
if test $enable_ipv6 = yes; then
  AC_CACHE_CHECK([for IPv6], ac_cv_ipv6, [
  AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>], [
  socket(AF_INET6, SOCK_STREAM, 0);
  ], ac_cv_ipv6=yes, ac_cv_ipv6=no)])
  if test "$ac_cv_ipv6" = yes; then
    AC_DEFINE(HAVE_IPV6,1,[Define if you have IPv6 support])
  fi
fi

dnl ===========================================================
dnl Checks processor type, for processor-specific optimization
case $target in
  i?86-*)
    AC_DEFINE(SCM_TARGET_I386,1,[Define if uses i386 optimizations])
esac

dnl ===========================================================
dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_C_BIGENDIAN
AC_STRUCT_TM
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(off_t)
AC_CHECK_TYPES([struct timespec])
dnl Checks non-POSIX members of system structure
AC_CACHE_CHECK(struct group has gr_passwd, ac_cv_struct_gr_passwd, [
AC_TRY_COMPILE([#include <grp.h>], [
struct group g;
const char *p = g.gr_passwd;
], ac_cv_struct_gr_passwd=yes, ac_cv_struct_gr_passwd=no)])

if test "$ac_cv_struct_gr_passwd" = yes; then
AC_DEFINE(HAVE_GR_PASSWD,1,[Define if "struct group" has gr_passwd])
fi

AC_CACHE_CHECK(struct passwd has pw_passwd, ac_cv_struct_pw_passwd, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_passwd;
], ac_cv_struct_pw_passwd=yes, ac_cv_struct_pw_passwd=no)])

if test "$ac_cv_struct_pw_passwd" = yes; then
AC_DEFINE(HAVE_PW_PASSWD,1,[Define if "struct passwd" has pw_passwd])
fi

AC_CACHE_CHECK(struct passwd has pw_gecos, ac_cv_struct_pw_gecos, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_gecos;
], ac_cv_struct_pw_gecos=yes, ac_cv_struct_pw_gecos=no)])

if test "$ac_cv_struct_pw_gecos" = yes; then
AC_DEFINE(HAVE_PW_GECOS,1,[Define if "struct passwd" has pw_gecos])
fi

AC_CACHE_CHECK(struct passwd has pw_class, ac_cv_struct_pw_class, [
AC_TRY_COMPILE([#include <pwd.h>], [
struct passwd pw;
const char *p = pw.pw_class;
], ac_cv_struct_pw_class=yes, ac_cv_struct_pw_class=no)])

if test "$ac_cv_struct_pw_class" = yes; then
AC_DEFINE(HAVE_PW_CLASS,1,[Define if "struct passwd" has pw_class])
fi

dnl checks if time_t is integer or flonum
AC_CACHE_CHECK(time_t is integral, ac_cv_type_time_t_integral, [
AC_TRY_RUN([
#include <time.h>
int main()
{
   time_t t = 3.14;
   return (t == 3.14);
}], ac_cv_type_time_t_integral=yes, ac_cv_type_time_t_integral=no,
ac_cv_type_time_t_integral=yes)])

if test "$ac_cv_type_time_t_integral" = yes; then
AC_DEFINE(INTEGRAL_TIME_T,1,[Define if time_t is typedef'ed to an integral type])
fi

dnl checks if sockaddr_in and sockaddr_in6 has *_len field
AC_CACHE_CHECK(struct sockaddr_in has sin_len, ac_cv_struct_sockaddr_in_len, [
AC_TRY_COMPILE([#include <netinet/in.h>], [
struct sockaddr_in addr;
int z = addr.sin_len;
], ac_cv_struct_sockaddr_in_len=yes, ac_cv_struct_sockaddr_in_len=no)])

if test "$ac_cv_struct_sockaddr_in_len" = yes; then
AC_DEFINE(HAVE_SIN_LEN,1,[Define if struct sockaddr_in has sin_len])
fi

if test "$ac_cv_ipv6" = yes; then
 AC_CACHE_CHECK(struct sockaddr_in6 has sin6_len, ac_cv_struct_sockaddr_in6_len, [
AC_TRY_COMPILE([#include <netinet/in.h>], [
struct sockaddr_in6 addr;
int z = addr.sin6_len;
], ac_cv_struct_sockaddr_in6_len=yes, ac_cv_struct_sockaddr_in6_len=no)])

if test "$ac_cv_struct_sockaddr_in6_len" = yes; then
AC_DEFINE(HAVE_SIN6_LEN,1,[Define if struct sockaddr_in6 has sin6_len])
fi
fi

dnl ===========================================================
dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

AC_FUNC_ALLOCA
AC_CHECK_FUNCS(isnan isinf trunc rint)
AC_CHECK_FUNCS(symlink readlink mkstemp select gettimeofday nanosleep usleep)
AC_CHECK_FUNCS(random srandom lrand48 srand48)
AC_CHECK_FUNCS(putenv setpgrp getpgid)
AC_CHECK_FUNCS(gethostname sethostname getdomainname setdomainname)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(syslog setlogmask)

AC_SEARCH_LIBS(shutdown, socket)
AC_SEARCH_LIBS(inet_aton, resolv)
AC_SEARCH_LIBS(gethostbyname_r, nsl)

dnl Checks for pty-related fns.  It appears that recent Cygwin has them,
dnl but only in a static library.  That prevents us from creating DLL
dnl version of gauche.  Thus we explictly exclude them on cygwin.
case "$target" in
  *cygwin*)
    : ;;
  *)
    AC_SEARCH_LIBS(openpty, util, AC_DEFINE(HAVE_OPENPTY, 1, [Define if you have openpty]))
    AC_SEARCH_LIBS(forkpty, util, AC_DEFINE(HAVE_FORKPTY, 1, [Define if you have forkpty]))
    ;;
esac

dnl Checks if crypt() exists and whether it's in libc or libcrypt.
dnl Note: on cygwin, libcrypt is only available as a static library,
dnl and prevents libgauche.dll from building.   We explicitly excludes it.
dnl
case "$target" in
  *cygwin*)
     : ;;
  *)
     AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT,1,[Define if uses libcrypt]))
     ;;
esac

dnl Checks if dlopen exists, and if it's in libc or libdl.
AC_SEARCH_LIBS(dlopen, dl, HAVE_DLOPEN=yes, HAVE_DLOPEN=no)
AC_CHECK_LIB(dyld, dlopen, HAVE_DLOPEN=yes; LIBS="-ldyld $LIBS", HAVE_DLOPEN=no)
AC_DEFINE(HAVE_DLOPEN,1,[Define if the system has dlopen()])

dnl Checks for sched_yield.
AC_SEARCH_LIBS(sched_yield, rt, AC_DEFINE(HAVE_SCHED_YIELD,1,[Define if uses librt]))

dnl ext/charconv --------------------------------------------
dnl Check the iconv() prototype
ichdr="#include <$ICONV_NAME.h>"
AC_CACHE_CHECK(iconv takes const char **input, ac_cv_iconv_const_input, [
AC_TRY_COMPILE($ichdr, [
const char *inbuf;
char *outbuf;
int inroom, outroom;
iconv((iconv_t)0, &inbuf, &inroom, &outbuf, &outroom);
], ac_cv_iconv_const_input=yes, ac_cv_iconv_const_input=no)])

if test "$ac_cv_iconv_const_input" = yes; then
AC_DEFINE(ICONV_CONST_INPUT,1,[Define if iconv takes const char **input])
fi

dnl ext/dbm -------------------------------------------------
dnl Check for various dbm libraries availability
dnl On some systems, legacy DBM and NDBM is emulated by more powerful
dnl packages like BSD DB or GDBM.  We need to be careful to pick the
dnl consistent header/library pair.
AC_CHECK_HEADERS(gdbm.h, [
  DBM_ARCHFILES=gdbm.la
  DBM_SCMFILES=gdbm.scm
])
AC_CHECK_HEADERS(ndbm.h gdbm/ndbm.h, [
  NDBM_HEADER=$ac_header
  DBM_ARCHFILES="ndbm.la $DBM_ARCHFILES"
  DBM_SCMFILES="ndbm.scm $DBM_SCMFILES"
])
AC_CHECK_HEADERS(dbm.h gdbm/dbm.h, [
  ODBM_HEADER=$ac_header
  DBM_ARCHFILES="odbm.la $DBM_ARCHFILES"
  DBM_SCMFILES="odbm.scm $DBM_SCMFILES"
])

AC_CHECK_LIB(gdbm, gdbm_open, [ GDBMLIB="-lgdbm" ])
LIBSAVE="$LIBS"
if test "$NDBM_HEADER" = "gdbm/ndbm.h"; then
  NDBMLIB="-lgdbm"  # use emulation by gdbm
else
  AC_SEARCH_LIBS(dbm_open, ndbm gdbm,   [ NDBMLIB="$LIBS"; LIBS="$LIBSAVE" ])
fi
if test "$ODBM_HEADER" = "gdbm/dbm.h"; then
  ODBMLIB="-lgdbm"  # use emulation by gdbm
else
  AC_SEARCH_LIBS(dbminit,  dbm gdbm, [ ODBMLIB="$LIBS"; LIBS="$LIBSAVE" ])
fi

AC_SUBST(DBM_ARCHFILES)
AC_SUBST(DBM_SCMFILES)
AC_SUBST(GDBMLIB)
AC_SUBST(NDBMLIB)
AC_SUBST(ODBMLIB)

dnl ext/digest ----------------------------------------------
dnl Check for some types
AC_C_BIGENDIAN
AC_CHECK_TYPES([u_int8_t, uint8_t])
AC_CHECK_TYPES([u_int32_t, uint32_t])
AC_CHECK_TYPES([u_int64_t, uint64_t])

dnl ext/net -------------------------------------------------
dnl Check for reentrant version synopsis of netdb functions.
dnl   The calling synopsis of netdb functions like gethostbyname_r differ
dnl   among platforms.
AC_CHECK_FUNC(gethostbyname_r)
if test $ac_cv_func_gethostbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyname_r,
                 ac_cv_func_gethostbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyname_r(n, h, buf, len, &err);
      ], ac_cv_func_gethostbyname_r_nargs=5, [
    ac_cv_func_gethostbyname_r=no])])])
fi

if test $ac_cv_func_gethostbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYNAME_R_NUMARGS, $ac_cv_func_gethostbyname_r_nargs, [Define number of args gethostbyname_r takes])
fi

AC_CHECK_FUNC(gethostbyaddr_r)
if test $ac_cv_func_gethostbyaddr_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for gethostbyaddr_r,
                 ac_cv_func_gethostbyaddr_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h, *r; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &r, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=8, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; int addrlen, type; struct hostent *h; char buf[4096]; int len=4096; int err;
      (void)gethostbyaddr_r(n, addrlen, type, h, buf, len, &err);
      ], ac_cv_func_gethostbyaddr_r_nargs=7, [
    ac_cv_func_gethostbyaddr_r=no])])])
fi

if test $ac_cv_func_gethostbyaddr_r != no; then
  AC_DEFINE_UNQUOTED(GETHOSTBYADDR_R_NUMARGS, $ac_cv_func_gethostbyaddr_r_nargs, [Define number of args gethostbyaddr_r takes])
fi

AC_CHECK_FUNC(getprotobyname_r)
if test $ac_cv_func_getprotobyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobyname_r,
                 ac_cv_func_getprotobyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobyname_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobyname_r(n, h, buf, len);
      ], ac_cv_func_getprotobyname_r_nargs=4, [
    ac_cv_func_getprotobyname_r=no])])])
fi

if test $ac_cv_func_getprotobyname_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNAME_R_NUMARGS, $ac_cv_func_getprotobyname_r_nargs, [Define number of args getprotobyname_r takes])
fi

AC_CHECK_FUNC(getprotobynumber_r)
if test $ac_cv_func_getprotobynumber_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getprotobynumber_r,
                 ac_cv_func_getprotobynumber_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h, *r; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len, &r);
      ], ac_cv_func_getprotobynumber_r_nargs=5, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; struct protoent *h; char buf[4096]; int len=4096;
      (void)getprotobynumber_r(n, h, buf, len);
      ], ac_cv_func_getprotobynumber_r_nargs=4, [
    ac_cv_func_getprotobynumber_r=no])])])
fi

if test $ac_cv_func_getprotobynumber_r != no; then
  AC_DEFINE_UNQUOTED(GETPROTOBYNUMBER_R_NUMARGS, $ac_cv_func_getprotobynumber_r_nargs, [Define number of args getprotobynumber_r takes])
fi

AC_CHECK_FUNC(getservbyname_r)
if test $ac_cv_func_getservbyname_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyname_r,
                 ac_cv_func_getservbyname_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyname_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      char *n, *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyname_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyname_r_nargs=5, [
    ac_cv_func_getservbyname_r=no])])])
fi

if test $ac_cv_func_getservbyname_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYNAME_R_NUMARGS, $ac_cv_func_getservbyname_r_nargs, [Define number of args getservbyname_r takes])
fi

AC_CHECK_FUNC(getservbyport_r)
if test $ac_cv_func_getservbyport_r = 'yes'; then
  AC_CACHE_CHECK(number of arguments for getservbyport_r,
                 ac_cv_func_getservbyport_r_nargs, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h, *r; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len, &r);
      ], ac_cv_func_getservbyport_r_nargs=6, [
    AC_TRY_COMPILE([#include <netdb.h>], [
      int n; char *p; struct servent *h; char buf[4096]; int len=4096;
      (void)getservbyport_r(n, p, h, buf, len);
      ], ac_cv_func_getservbyport_r_nargs=5, [
    ac_cv_func_getservbyport_r=no])])])
fi

if test $ac_cv_func_getservbyport_r != no; then
  AC_DEFINE_UNQUOTED(GETSERVBYPORT_R_NUMARGS, $ac_cv_func_getservbyport_r_nargs, [Define number of args getservbyport_r takes])
fi

dnl
dnl Checks compiler options for dynamic link and thread support.
dnl This section will eventually replaced by libtool support.
dnl
dnl  SHLIB_SO_SUFFIX     Suffix of dlopen-able module.  most systems doesn't
dnl                      have restriction for this.  default "so".
dnl  SHLIB_DYLIB_SUFFIX  Suffix of dynamic linkable module.  On Unices
dnl                      it is usuallly "so".  On MacOSX it is "dylib".
dnl                      On Win32 it is "dll".   If not explicitly specified,
dnl                      SHLIB_SO_SUFFIX is used.
dnl  SHLIB_SO_CFLAGS     flags to compile files which is dlopen-able
dnl                      e.g. "-fpic"
dnl  SHLIB_SO_LDFLAGS    flags to link files to create dlopen-able
dnl                      module, e.g. "-shared -o"
dnl  SHLIB_DYLIB_LDFLAGS flags to link files to create dynamically linkable
dnl                      module.   On most unices it is the same as
dnl                      SHLIB_SO_LDFLAGS.
dnl  SHLIB_MAIN_LDFLAGS  flags required to compile a main program which
dnl                      exposes symbols to be referred by the dynamically
dnl                      loaded module, e.g. "-rdynamic"
dnl  LIBGAUCHE_SO        defined as "libgauche.$(SHLIB_SO_SUFFIX)" if
dnl                      system supports dso.  empty otherwise.
dnl  GOSH_USE_SHLIB      If set to "yes", gosh uses dynamic linkable version
dnl                      of libgauche, instead of statically links libgauche.a.
dnl                      On Win32 it is required to allow extensions to work.

AC_MSG_CHECKING(how to make dynamic loadable module)
# A flag to indicate libgauche.la can be added when linking extension module.
# It is required on cygwin; it has to be omitted on MacOS X; Other unices
# generally don't care.
ext_use_libgauche_la=yes 

case $host in
  *freebsd2*)
    SHLIB_SO_CFLAGS="-fpic -fPIC"
    SHLIB_SO_LDFLAGS="-v;ld -Bshareable -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *-linux-gnu|*freebsd*)
    SHLIB_SO_CFLAGS="-fPIC"
    SHLIB_SO_LDFLAGS="$rpath -shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS="-rdynamic"
    SHLIB_OK=ok
    ;;
  *netbsd*)
    SHLIB_SO_CFLAGS="-fPIC -DPIC"
    SHLIB_SO_LDFLAGS="$rpath -shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS="-rdynamic"
    SHLIB_OK=ok
    ;;
  *darwin*)
    # -no-cpp-precomp is not related to shared library, but needed to
    # get src/{vm.c,char.c} compiled -skimu
    # [Shiro] Darwin 1.3 and later needs different flags 
    case $host_os in
      darwin1.[[012]]) FLAT_NAMESPACE="" ;;
      *)               FLAT_NAMESPACE="-flat_namespace" ;;
    esac
    CPPFLAGS="$CPPFLAGS -no-cpp-precomp"
    SHLIB_SO_CFLAGS="-no-cpp-precomp -fPIC -fno-common"
    SHLIB_SO_LDFLAGS="-bundle $FLAT_NAMESPACE -undefined suppress -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_DYLIB_LDFLAGS="-dynamiclib -o"
    SHLIB_DYLIB_SUFFIX="dylib"
    SHLIB_LIBS_FOR_EXT=""
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ext_use_libgauche_la=no
    ;;
  mips-sgi-irix*)
    if test "$CC" = gcc; then
      SHLIB_SO_CFLAGS="-fPIC"
    else
      SHLIB_SO_CFLAGS="-KPIC"
    fi
    SHLIB_SO_LDFLAGS="$rpath -shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *solaris*)
    if test "$CC" = gcc; then
      SHLIB_SO_CFLAGS="-fPIC"
      SHLIB_SO_LDFLAGS="-shared -o"
    else
      SHLIB_SO_CFLAGS="-Kpic"
      SHLIB_SO_LDFLAGS="-G -h"
    fi
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *hp*)
    if test "$CC" = gcc; then
      SHLIB_SO_CFLAGS="-fPIC"
      SHLIB_SO_LDFLAGS="-shared -o"
    else
      SHLIB_SO_CFLAGS="+z +Z"
      SHLIB_SO_LDFLAGS=";ld -b -o"
    fi
    SHLIB_SO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *cygwin*)
    SHLIB_SO_CFLAGS=""
    SHLIB_SO_LDFLAGS="-shared -o"
    SHLIB_SO_SUFFIX="so"
    SHLIB_DYLIB_SUFFIX="dll"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    GOSH_USE_SHLIB=yes
    ;;
  *)
    SHLIB_SO_CFLAGS=""
    SHLIB_SO_LDFLAGS=""
    SHLIB_SO_SUFFIX=""
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=unknown
    ;;
esac
if test -z "$SHLIB_DYLIB_LDFLAGS"; then
  SHLIB_DYLIB_LDFLAGS=$SHLIB_SO_LDFLAGS
fi
if test -z "$SHLIB_DYLIB_SUFFIX"; then
  SHLIB_DYLIB_SUFFIX=$SHLIB_SO_SUFFIX
fi
if test "$SHLIB_OK" = ok; then
  LIBGAUCHE_SO="libgauche.$SHLIB_DYLIB_SUFFIX"
else
  LIBGAUCHE_SO=
fi
if test "$ext_use_libgauche_la" = yes; then
  EXT_LIBGAUCHE='$(top_builddir)/src/libgauche.la'
else
  EXT_LIBGAUCHE=
fi

AC_SUBST(SHLIB_SO_CFLAGS)
AC_SUBST(SHLIB_SO_LDFLAGS)
AC_SUBST(SHLIB_SO_SUFFIX)
AC_SUBST(SHLIB_LIBS_FOR_EXT)
AC_SUBST(SHLIB_DYLIB_LDFLAGS)
AC_SUBST(SHLIB_DYLIB_SUFFIX)
AC_SUBST(SHLIB_MAIN_LDFLAGS)
AC_SUBST(EXT_LIBGAUCHE)
AC_SUBST(LIBGAUCHE_SO)
AC_SUBST(GOSH_USE_SHLIB)
AC_DEFINE_UNQUOTED(SHLIB_SO_SUFFIX, "$SHLIB_SO_SUFFIX",[Define to the suffix of dynamic loadable object])
AC_MSG_RESULT($SHLIB_OK)

dnl obtain some parameters from libtool
AC_DEFINE_UNQUOTED(SCM_LIBTOOL_OBJDIR, "$objdir", [Directory where libtool places the compiled libraries])

dnl Sets some optimization flags by heuristics.
AC_GAUCHE_OPTFLAGS

dnl ===========================================================
dnl Add version macro
GAUCHE_VERSION=$PACKAGE_VERSION
AC_SUBST(GAUCHE_VERSION)
AC_DEFINE_UNQUOTED(GAUCHE_VERSION, "$GAUCHE_VERSION",[Gauche version string])
changequote(<<, >>)dnl
GAUCHE_VERSION_TRUNC=`echo $GAUCHE_VERSION | sed 's/[-_].*//'`
changequote([, ])dnl
OLD_IFS=$IFS; IFS="."; set $GAUCHE_VERSION_TRUNC; IFS=$OLD_IFS
GAUCHE_MAJOR_VERSION=$1
GAUCHE_MINOR_VERSION=$2
GAUCHE_MICRO_VERSION=$3
AC_DEFINE_UNQUOTED(GAUCHE_MAJOR_VERSION, $GAUCHE_MAJOR_VERSION,[Gauche major version number])
AC_DEFINE_UNQUOTED(GAUCHE_MINOR_VERSION, $GAUCHE_MINOR_VERSION,[Gauche minor version number])
AC_DEFINE_UNQUOTED(GAUCHE_MICRO_VERSION, $GAUCHE_MICRO_VERSION,[Gauche patch level number])

dnl put the args to the configure in gauche-config script for later use.
dnl the use of ac_configure_args depends on autoconf 2.52.
GAUCHE_CONFIGURE_ARGS="`echo ""$ac_configure_args"" | sed 's/[\\""\`\$]/\\\&/g'`"
AC_SUBST(GAUCHE_CONFIGURE_ARGS)

dnl ===========================================================
dnl Configure gc and extensions
AC_CONFIG_SUBDIRS(gc)

dnl ===========================================================
dnl Create output files
echo $GAUCHE_VERSION > VERSION
AC_OUTPUT(Makefile
          src/Makefile src/gauche-config
          lib/Makefile lib/slib.scm
          doc/gosh.1 doc/gauche-config.1 doc/Makefile
          ext/Makefile ext/Makefile.ext
          ext/auxsys/Makefile
          ext/charconv/Makefile ext/charconv/charconv.h
          ext/dbm/Makefile
          ext/digest/Makefile
          ext/fcntl/Makefile
          ext/mt-random/Makefile
          ext/net/Makefile
          ext/syslog/Makefile
          ext/termios/Makefile
          ext/threads/Makefile
          ext/uvector/Makefile
         )
