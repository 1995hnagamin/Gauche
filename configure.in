dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/gauche.h)
AC_CONFIG_HEADER(src/gauche/config.h)
AC_CANONICAL_SYSTEM

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_INSTALL

dnl Checks for libraries.
AC_CHECK_LIB(m, sin) dnl needed to check trunc and rint below
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(crypt, crypt)
AC_CHECK_FUNCS(trunc rint)
AC_CHECK_FUNCS(symlink)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(glob.h)
AC_CHECK_HEADERS(dlfcn.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_INLINE
AC_STRUCT_TM
AC_CHECK_SIZEOF(long)
dnl Checks non-POSIX members of system structure
AC_MSG_CHECKING(struct group has gr_passwd)
AC_TRY_COMPILE([
#include <grp.h>
], [
struct group g;
const char *p = g.gr_passwd;
], ac_cv_struct_gr_passwd=yes, ac_cv_struct_gr_passwd=no)
if test "$ac_cv_struct_gr_passwd" = yes; then
AC_DEFINE(HAVE_GR_PASSWD)
fi
AC_MSG_RESULT($ac_cv_struct_gr_passwd)

AC_MSG_CHECKING(struct passwd has pw_passwd)
AC_TRY_COMPILE([
#include <pwd.h>
], [
struct passwd pw;
const char *p = pw.pw_passwd;
], ac_cv_struct_pw_passwd=yes, ac_cv_struct_pw_passwd=no)
if test "$ac_cv_struct_pw_passwd" = yes; then
AC_DEFINE(HAVE_PW_PASSWD)
fi
AC_MSG_RESULT($ac_cv_struct_pw_passwd)

AC_MSG_CHECKING(struct passwd has pw_gecos)
AC_TRY_COMPILE([
#include <pwd.h>
], [
struct passwd pw;
const char *p = pw.pw_gecos;
], ac_cv_struct_pw_gecos=yes, ac_cv_struct_pw_gecos=no)
if test "$ac_cv_struct_pw_gecos" = yes; then
AC_DEFINE(HAVE_PW_GECOS)
fi
AC_MSG_RESULT($ac_cv_struct_pw_gecos)

AC_MSG_CHECKING(struct passwd has pw_class)
AC_TRY_COMPILE([
#include <pwd.h>
], [
struct passwd pw;
const char *p = pw.pw_class;
], ac_cv_struct_pw_class=yes, ac_cv_struct_pw_class=no)
if test "$ac_cv_struct_pw_class" = yes; then
AC_DEFINE(HAVE_PW_CLASS)
fi
AC_MSG_RESULT($ac_cv_struct_pw_class)

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL

dnl Checks compiler options for dynamic link.
dnl
dnl  SHLIB_DSO_SUFFIX    suffix of dynamic loadable module, e.g. ".so"
dnl  SHLIB_DSO_CCFLAGS   flags to compile files which is dynamically loadable,
dnl                      e.g. "-fpic"
dnl  SHLIB_DSO_LDFLAGS   flags to link files to create dynamically loadable
dnl                      module, e.g. "-shared -o"
dnl  SHLIB_MAIN_LDFLAGS  flags required to compile a main program which
dnl                      exposes symbols to be referred by the dynamically
dnl                      loaded module, e.g. "-rdynamic"
dnl  SHLIB_LIBGAUCHE     defined as "libgauche.$(SHLIB_DSO_SUFFIX)" if
dnl                      system supports dso.  empty otherwise.

AC_MSG_CHECKING(how to make dynamic loadable module)
case $host in
  *-linux-gnu)
    SHLIB_DSO_CCFLAGS="-fpic"
    SHLIB_DSO_LDFLAGS="-shared -o"
    SHLIB_DSO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS="-rdynamic"
    SHLIB_OK=ok
    ;;
  mips-sgi-irix*)
    if test X$CC = Xgcc; then
      SHLIB_DSO_CCFLAGS="-fpic"
    else
      SHLIB_DSO_CCFLAGS="-KPIC"
    fi
    SHLIB_DSO_LDFLAGS="-shared -o"
    SHLIB_DSO_SUFFIX="so"
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=ok
    ;;
  *)
    SHLIB_DSO_CCFLAGS=""
    SHLIB_DSO_LDFLAGS=""
    SHLIB_DSO_SUFFIX=""
    SHLIB_MAIN_LDFLAGS=""
    SHLIB_OK=unknown
    ;;
esac
if test X$SHLIB_OK = Xok; then
  SHLIB_LIBGAUCHE="libgauche.$SHLIB_DSO_SUFFIX"
fi
AC_SUBST(SHLIB_DSO_CCFLAGS)
AC_SUBST(SHLIB_DSO_LDFLAGS)
AC_SUBST(SHLIB_DSO_SUFFIX)
AC_SUBST(SHLIB_MAIN_LDFLAGS)
AC_SUBST(SHLIB_LIBGAUCHE)
AC_MSG_RESULT($SHLIB_OK)

dnl Add version macro
GAUCHE_VERSION=`cat VERSION`
AC_SUBST(GAUCHE_VERSION)
AC_DEFINE_UNQUOTED(GAUCHE_VERSION, "$GAUCHE_VERSION")

dnl Create output files
AC_OUTPUT(src/Makefile src/gauche-config lib/Makefile 
          ext/uvector/Makefile
          Makefile)

